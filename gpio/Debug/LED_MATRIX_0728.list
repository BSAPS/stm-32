
LED_MATRIX_0728.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005434  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  080055d4  080055d4  000065d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce0  08005ce0  000070c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce8  08005ce8  000070c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08005cf0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b30  200000c4  08005db4  000070c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  08005db4  00007bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f004  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237e  00000000  00000000  000160f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00018478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017bae  00000000  00000000  00019170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001049e  00000000  00000000  00030d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00093c2e  00000000  00000000  000411bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000d4dea  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a05  00000000  00000000  000d4e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ab0  00000000  00000000  000d5834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d92e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055bc 	.word	0x080055bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	080055bc 	.word	0x080055bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <pulse>:

/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* ------------------- 유틸리티 함수 ------------------- */
void pulse(GPIO_TypeDef* port, uint16_t pin) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f001 ff28 	bl	8002424 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f001 ff22 	bl	8002424 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <set_row_address>:

void set_row_address(uint8_t row) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(mat_pins.A.port, mat_pins.A.pin, (row >> 0) & 0x01);
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <set_row_address+0x80>)
 80005f4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <set_row_address+0x80>)
 80005f8:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	f001 ff0d 	bl	8002424 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(mat_pins.B.port, mat_pins.B.pin, (row >> 1) & 0x01);
 800060a:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <set_row_address+0x80>)
 800060c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <set_row_address+0x80>)
 8000610:	f8b3 1054 	ldrh.w	r1, [r3, #84]	@ 0x54
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	085b      	lsrs	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	f001 feff 	bl	8002424 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(mat_pins.C.port, mat_pins.C.pin, (row >> 2) & 0x01);
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <set_row_address+0x80>)
 8000628:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <set_row_address+0x80>)
 800062c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	f001 fef1 	bl	8002424 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(mat_pins.D.port, mat_pins.D.pin, (row >> 3) & 0x01);
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <set_row_address+0x80>)
 8000644:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <set_row_address+0x80>)
 8000648:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	f001 fee3 	bl	8002424 <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000

0800066c <setPixel>:

void setPixel(uint8_t row, uint8_t col, uint8_t r, uint8_t g, uint8_t b) {
 800066c:	b490      	push	{r4, r7}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4604      	mov	r4, r0
 8000674:	4608      	mov	r0, r1
 8000676:	4611      	mov	r1, r2
 8000678:	461a      	mov	r2, r3
 800067a:	4623      	mov	r3, r4
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	460b      	mov	r3, r1
 8000684:	717b      	strb	r3, [r7, #5]
 8000686:	4613      	mov	r3, r2
 8000688:	713b      	strb	r3, [r7, #4]
    if (row < HUB75_HEIGHT && col < HUB75_WIDTH) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b1f      	cmp	r3, #31
 800068e:	d82e      	bhi.n	80006ee <setPixel+0x82>
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	2b3f      	cmp	r3, #63	@ 0x3f
 8000694:	d82b      	bhi.n	80006ee <setPixel+0x82>
        rgb_framebuffer[row][col][0] = r;
 8000696:	79f9      	ldrb	r1, [r7, #7]
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	4817      	ldr	r0, [pc, #92]	@ (80006f8 <setPixel+0x8c>)
 800069c:	461a      	mov	r2, r3
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	441a      	add	r2, r3
 80006a2:	460b      	mov	r3, r1
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	440b      	add	r3, r1
 80006a8:	019b      	lsls	r3, r3, #6
 80006aa:	4413      	add	r3, r2
 80006ac:	4403      	add	r3, r0
 80006ae:	797a      	ldrb	r2, [r7, #5]
 80006b0:	701a      	strb	r2, [r3, #0]
        rgb_framebuffer[row][col][1] = g;
 80006b2:	79f9      	ldrb	r1, [r7, #7]
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	4810      	ldr	r0, [pc, #64]	@ (80006f8 <setPixel+0x8c>)
 80006b8:	461a      	mov	r2, r3
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	441a      	add	r2, r3
 80006be:	460b      	mov	r3, r1
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	440b      	add	r3, r1
 80006c4:	019b      	lsls	r3, r3, #6
 80006c6:	4413      	add	r3, r2
 80006c8:	4403      	add	r3, r0
 80006ca:	3301      	adds	r3, #1
 80006cc:	793a      	ldrb	r2, [r7, #4]
 80006ce:	701a      	strb	r2, [r3, #0]
        rgb_framebuffer[row][col][2] = b;
 80006d0:	79f9      	ldrb	r1, [r7, #7]
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <setPixel+0x8c>)
 80006d6:	461a      	mov	r2, r3
 80006d8:	0052      	lsls	r2, r2, #1
 80006da:	441a      	add	r2, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	440b      	add	r3, r1
 80006e2:	019b      	lsls	r3, r3, #6
 80006e4:	4413      	add	r3, r2
 80006e6:	4403      	add	r3, r0
 80006e8:	3302      	adds	r3, #2
 80006ea:	7c3a      	ldrb	r2, [r7, #16]
 80006ec:	701a      	strb	r2, [r3, #0]
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc90      	pop	{r4, r7}
 80006f6:	4770      	bx	lr
 80006f8:	200000e0 	.word	0x200000e0

080006fc <clearBuffer>:

void clearBuffer(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    memset(rgb_framebuffer, 0, sizeof(rgb_framebuffer));
 8000700:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000704:	2100      	movs	r1, #0
 8000706:	4802      	ldr	r0, [pc, #8]	@ (8000710 <clearBuffer+0x14>)
 8000708:	f004 fada 	bl	8004cc0 <memset>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000e0 	.word	0x200000e0

08000714 <HUB75_UpdateScreen>:

/* ------------------- 화면 갱신 ------------------- */
void HUB75_UpdateScreen(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    for (uint8_t row = 0; row < HUB75_HEIGHT / 2; row++) {
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e0e9      	b.n	80008f4 <HUB75_UpdateScreen+0x1e0>
        set_row_address(row);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff60 	bl	80005e8 <set_row_address>

        HAL_GPIO_WritePin(mat_pins.OE.port, mat_pins.OE.pin, GPIO_PIN_SET);
 8000728:	4b77      	ldr	r3, [pc, #476]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a76      	ldr	r2, [pc, #472]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800072e:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8000732:	2201      	movs	r2, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fe75 	bl	8002424 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(mat_pins.LAT.port, mat_pins.LAT.pin, GPIO_PIN_RESET);
 800073a:	4b73      	ldr	r3, [pc, #460]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800073c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800073e:	4a72      	ldr	r2, [pc, #456]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000740:	8f91      	ldrh	r1, [r2, #60]	@ 0x3c
 8000742:	2200      	movs	r2, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fe6d 	bl	8002424 <HAL_GPIO_WritePin>

        for (uint8_t col = 0; col < HUB75_WIDTH; col++) {
 800074a:	2300      	movs	r3, #0
 800074c:	71bb      	strb	r3, [r7, #6]
 800074e:	e0b6      	b.n	80008be <HUB75_UpdateScreen+0x1aa>
            uint8_t r1 = rgb_framebuffer[row][col][0];
 8000750:	79f9      	ldrb	r1, [r7, #7]
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	486d      	ldr	r0, [pc, #436]	@ (800090c <HUB75_UpdateScreen+0x1f8>)
 8000756:	461a      	mov	r2, r3
 8000758:	0052      	lsls	r2, r2, #1
 800075a:	441a      	add	r2, r3
 800075c:	460b      	mov	r3, r1
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	440b      	add	r3, r1
 8000762:	019b      	lsls	r3, r3, #6
 8000764:	4413      	add	r3, r2
 8000766:	4403      	add	r3, r0
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	717b      	strb	r3, [r7, #5]
            uint8_t g1 = rgb_framebuffer[row][col][1];
 800076c:	79f9      	ldrb	r1, [r7, #7]
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	4866      	ldr	r0, [pc, #408]	@ (800090c <HUB75_UpdateScreen+0x1f8>)
 8000772:	461a      	mov	r2, r3
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	441a      	add	r2, r3
 8000778:	460b      	mov	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	440b      	add	r3, r1
 800077e:	019b      	lsls	r3, r3, #6
 8000780:	4413      	add	r3, r2
 8000782:	4403      	add	r3, r0
 8000784:	3301      	adds	r3, #1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	713b      	strb	r3, [r7, #4]
            uint8_t b1 = rgb_framebuffer[row][col][2];
 800078a:	79f9      	ldrb	r1, [r7, #7]
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	485f      	ldr	r0, [pc, #380]	@ (800090c <HUB75_UpdateScreen+0x1f8>)
 8000790:	461a      	mov	r2, r3
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	441a      	add	r2, r3
 8000796:	460b      	mov	r3, r1
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	440b      	add	r3, r1
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	4413      	add	r3, r2
 80007a0:	4403      	add	r3, r0
 80007a2:	3302      	adds	r3, #2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	70fb      	strb	r3, [r7, #3]
            uint8_t r2 = rgb_framebuffer[row + HUB75_HEIGHT / 2][col][0];
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f103 0110 	add.w	r1, r3, #16
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	4856      	ldr	r0, [pc, #344]	@ (800090c <HUB75_UpdateScreen+0x1f8>)
 80007b2:	461a      	mov	r2, r3
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	441a      	add	r2, r3
 80007b8:	460b      	mov	r3, r1
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	440b      	add	r3, r1
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	4413      	add	r3, r2
 80007c2:	4403      	add	r3, r0
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	70bb      	strb	r3, [r7, #2]
            uint8_t g2 = rgb_framebuffer[row + HUB75_HEIGHT / 2][col][1];
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f103 0110 	add.w	r1, r3, #16
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	484e      	ldr	r0, [pc, #312]	@ (800090c <HUB75_UpdateScreen+0x1f8>)
 80007d2:	461a      	mov	r2, r3
 80007d4:	0052      	lsls	r2, r2, #1
 80007d6:	441a      	add	r2, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	440b      	add	r3, r1
 80007de:	019b      	lsls	r3, r3, #6
 80007e0:	4413      	add	r3, r2
 80007e2:	4403      	add	r3, r0
 80007e4:	3301      	adds	r3, #1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	707b      	strb	r3, [r7, #1]
            uint8_t b2 = rgb_framebuffer[row + HUB75_HEIGHT / 2][col][2];
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f103 0110 	add.w	r1, r3, #16
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	4846      	ldr	r0, [pc, #280]	@ (800090c <HUB75_UpdateScreen+0x1f8>)
 80007f4:	461a      	mov	r2, r3
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	441a      	add	r2, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	440b      	add	r3, r1
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	4413      	add	r3, r2
 8000804:	4403      	add	r3, r0
 8000806:	3302      	adds	r3, #2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	703b      	strb	r3, [r7, #0]

            HAL_GPIO_WritePin(mat_pins.R1.port, mat_pins.R1.pin, r1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800080c:	4b3e      	ldr	r3, [pc, #248]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	4b3d      	ldr	r3, [pc, #244]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000812:	8899      	ldrh	r1, [r3, #4]
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	2b00      	cmp	r3, #0
 8000818:	bf14      	ite	ne
 800081a:	2301      	movne	r3, #1
 800081c:	2300      	moveq	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	f001 fdff 	bl	8002424 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mat_pins.G1.port, mat_pins.G1.pin, g1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000826:	4b38      	ldr	r3, [pc, #224]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	4b37      	ldr	r3, [pc, #220]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800082c:	8999      	ldrh	r1, [r3, #12]
 800082e:	793b      	ldrb	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	f001 fdf2 	bl	8002424 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mat_pins.B1.port, mat_pins.B1.pin, b1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000840:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000842:	6918      	ldr	r0, [r3, #16]
 8000844:	4b30      	ldr	r3, [pc, #192]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000846:	8a99      	ldrh	r1, [r3, #20]
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	f001 fde5 	bl	8002424 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mat_pins.R2.port, mat_pins.R2.pin, r2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800085c:	6998      	ldr	r0, [r3, #24]
 800085e:	4b2a      	ldr	r3, [pc, #168]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000860:	8b99      	ldrh	r1, [r3, #28]
 8000862:	78bb      	ldrb	r3, [r7, #2]
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	f001 fdd8 	bl	8002424 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mat_pins.G2.port, mat_pins.G2.pin, g2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000874:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000876:	6a18      	ldr	r0, [r3, #32]
 8000878:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 800087a:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 800087c:	787b      	ldrb	r3, [r7, #1]
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	f001 fdcb 	bl	8002424 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(mat_pins.B2.port, mat_pins.B2.pin, b2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000890:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 8000894:	8d99      	ldrh	r1, [r3, #44]	@ 0x2c
 8000896:	783b      	ldrb	r3, [r7, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	f001 fdbe 	bl	8002424 <HAL_GPIO_WritePin>

            pulse(mat_pins.CLK.port, mat_pins.CLK.pin);
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 80008ae:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe82 	bl	80005bc <pulse>
        for (uint8_t col = 0; col < HUB75_WIDTH; col++) {
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	3301      	adds	r3, #1
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80008c2:	f67f af45 	bls.w	8000750 <HUB75_UpdateScreen+0x3c>
        }

        pulse(mat_pins.LAT.port, mat_pins.LAT.pin);
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 80008c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 80008cc:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe73 	bl	80005bc <pulse>
        HAL_GPIO_WritePin(mat_pins.OE.port, mat_pins.OE.pin, GPIO_PIN_RESET);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <HUB75_UpdateScreen+0x1f4>)
 80008dc:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 80008e0:	2200      	movs	r2, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fd9e 	bl	8002424 <HAL_GPIO_WritePin>

        HAL_Delay(0.1);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa4f 	bl	8001d8c <HAL_Delay>
    for (uint8_t row = 0; row < HUB75_HEIGHT / 2; row++) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	3301      	adds	r3, #1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	f67f af12 	bls.w	8000720 <HUB75_UpdateScreen+0xc>
    }
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000
 800090c:	200000e0 	.word	0x200000e0

08000910 <LEDMatrix_TurnOn>:


void LEDMatrix_TurnOn(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;

    if (!led_enabled) {
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <LEDMatrix_TurnOn+0x4c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <LEDMatrix_TurnOn+0x16>
        led_state = LED_STATE_CLOCK;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <LEDMatrix_TurnOn+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
        return;
 8000924:	e017      	b.n	8000956 <LEDMatrix_TurnOn+0x46>
    }

    uint32_t now = HAL_GetTick();
 8000926:	f001 fa25 	bl	8001d74 <HAL_GetTick>
 800092a:	6078      	str	r0, [r7, #4]
    if (now - last_tick >= 2000) {  // 4초마다 전환
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <LEDMatrix_TurnOn+0x54>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000938:	d30d      	bcc.n	8000956 <LEDMatrix_TurnOn+0x46>
        last_tick = now;
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <LEDMatrix_TurnOn+0x54>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6013      	str	r3, [r2, #0]

        if (led_state == LED_STATE_STOP)
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <LEDMatrix_TurnOn+0x50>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d103      	bne.n	8000950 <LEDMatrix_TurnOn+0x40>
            led_state = LED_STATE_MARIO;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <LEDMatrix_TurnOn+0x50>)
 800094a:	2202      	movs	r2, #2
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e002      	b.n	8000956 <LEDMatrix_TurnOn+0x46>
        else
            led_state = LED_STATE_STOP;
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <LEDMatrix_TurnOn+0x50>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
    }
}
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20001998 	.word	0x20001998
 8000960:	200018e0 	.word	0x200018e0
 8000964:	200018e4 	.word	0x200018e4

08000968 <LEDMatrix_TurnOff>:
//        drawMario(0, 16);
//    }
//    state = 1 - state;
//}

void LEDMatrix_TurnOff(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    const char* ampm;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <LEDMatrix_TurnOff+0x48>)
 8000978:	f002 fc0f 	bl	800319a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <LEDMatrix_TurnOff+0x48>)
 8000984:	f002 fceb 	bl	800335e <HAL_RTC_GetDate>
    ampm = (sTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <LEDMatrix_TurnOff+0x2a>
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <LEDMatrix_TurnOff+0x4c>)
 8000990:	e000      	b.n	8000994 <LEDMatrix_TurnOff+0x2c>
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <LEDMatrix_TurnOff+0x50>)
 8000994:	61fb      	str	r3, [r7, #28]

    clearBuffer();  // 기존 화면 초기화
 8000996:	f7ff feb1 	bl	80006fc <clearBuffer>
    drawClockTime(sTime.Hours, sTime.Minutes, ampm);
 800099a:	7a3b      	ldrb	r3, [r7, #8]
 800099c:	7a79      	ldrb	r1, [r7, #9]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f901 	bl	8000ba8 <drawClockTime>
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200018e8 	.word	0x200018e8
 80009b4:	080055d4 	.word	0x080055d4
 80009b8:	080055d8 	.word	0x080055d8

080009bc <drawCharBitmap>:




void drawCharBitmap(uint8_t row, uint8_t col, const uint8_t bitmap[][2]) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	4603      	mov	r3, r0
 80009c4:	603a      	str	r2, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	460b      	mov	r3, r1
 80009ca:	71bb      	strb	r3, [r7, #6]
    for (uint8_t r = 0; r < FONT_HEIGHT; r++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e030      	b.n	8000a34 <drawCharBitmap+0x78>
        for (uint8_t c = 0; c < FONT_WIDTH; c++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	73bb      	strb	r3, [r7, #14]
 80009d6:	e027      	b.n	8000a28 <drawCharBitmap+0x6c>
            uint8_t byte_index = c / 8;
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	737b      	strb	r3, [r7, #13]
            uint8_t bit_index = 7 - (c % 8);
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	43db      	mvns	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	733b      	strb	r3, [r7, #12]
            if (bitmap[r][byte_index] & (1 << bit_index)) {
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	441a      	add	r2, r3
 80009f2:	7b7b      	ldrb	r3, [r7, #13]
 80009f4:	5cd3      	ldrb	r3, [r2, r3]
 80009f6:	461a      	mov	r2, r3
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	fa42 f303 	asr.w	r3, r2, r3
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00d      	beq.n	8000a22 <drawCharBitmap+0x66>
                setPixel(row + r, col + c, 1, 0, 0);  // 빨간색
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b2d8      	uxtb	r0, r3
 8000a0e:	79ba      	ldrb	r2, [r7, #6]
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	4413      	add	r3, r2
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	2300      	movs	r3, #0
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f7ff fe25 	bl	800066c <setPixel>
        for (uint8_t c = 0; c < FONT_WIDTH; c++) {
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	3301      	adds	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	2b0d      	cmp	r3, #13
 8000a2c:	d9d4      	bls.n	80009d8 <drawCharBitmap+0x1c>
    for (uint8_t r = 0; r < FONT_HEIGHT; r++) {
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	3301      	adds	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d9cb      	bls.n	80009d2 <drawCharBitmap+0x16>
            }
        }
    }
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <drawDigit>:
    }
}


//------------time---------------
void drawDigit(uint8_t digit, int y, int x) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	73fb      	strb	r3, [r7, #15]
    const uint8_t (*bmp)[2] = NULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    switch (digit) {
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	f200 808c 	bhi.w	8000b76 <drawDigit+0x132>
 8000a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a64 <drawDigit+0x20>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000a8d 	.word	0x08000a8d
 8000a68:	08000a93 	.word	0x08000a93
 8000a6c:	08000a99 	.word	0x08000a99
 8000a70:	08000a9f 	.word	0x08000a9f
 8000a74:	08000aa5 	.word	0x08000aa5
 8000a78:	08000aab 	.word	0x08000aab
 8000a7c:	08000ab1 	.word	0x08000ab1
 8000a80:	08000ab7 	.word	0x08000ab7
 8000a84:	08000abd 	.word	0x08000abd
 8000a88:	08000ac3 	.word	0x08000ac3
        case 0: bmp = big_bitmap_0; break;
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b80 <drawDigit+0x13c>)
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e01a      	b.n	8000ac8 <drawDigit+0x84>
        case 1: bmp = big_bitmap_1; break;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	@ (8000b84 <drawDigit+0x140>)
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	e017      	b.n	8000ac8 <drawDigit+0x84>
        case 2: bmp = big_bitmap_2; break;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	@ (8000b88 <drawDigit+0x144>)
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	e014      	b.n	8000ac8 <drawDigit+0x84>
        case 3: bmp = big_bitmap_3; break;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <drawDigit+0x148>)
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e011      	b.n	8000ac8 <drawDigit+0x84>
        case 4: bmp = big_bitmap_4; break;
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8000b90 <drawDigit+0x14c>)
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	e00e      	b.n	8000ac8 <drawDigit+0x84>
        case 5: bmp = big_bitmap_5; break;
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000b94 <drawDigit+0x150>)
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	e00b      	b.n	8000ac8 <drawDigit+0x84>
        case 6: bmp = big_bitmap_6; break;
 8000ab0:	4b39      	ldr	r3, [pc, #228]	@ (8000b98 <drawDigit+0x154>)
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	e008      	b.n	8000ac8 <drawDigit+0x84>
        case 7: bmp = big_bitmap_7; break;
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <drawDigit+0x158>)
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	e005      	b.n	8000ac8 <drawDigit+0x84>
        case 8: bmp = big_bitmap_8; break;
 8000abc:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <drawDigit+0x15c>)
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	e002      	b.n	8000ac8 <drawDigit+0x84>
        case 9: bmp = big_bitmap_9; break;
 8000ac2:	4b38      	ldr	r3, [pc, #224]	@ (8000ba4 <drawDigit+0x160>)
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	bf00      	nop
        default: return;
    }

    for (int row = 0; row < BIG_FONT_HEIGHT; ++row) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	e04f      	b.n	8000b6e <drawDigit+0x12a>
        for (int col = 0; col < BIG_FONT_WIDTH; ++col) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e046      	b.n	8000b62 <drawDigit+0x11e>
            if ((bmp[row][col / 8] >> (7 - (col % 8))) & 0x01) {
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	69fa      	ldr	r2, [r7, #28]
 8000ada:	441a      	add	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da00      	bge.n	8000ae4 <drawDigit+0xa0>
 8000ae2:	3307      	adds	r3, #7
 8000ae4:	10db      	asrs	r3, r3, #3
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	425a      	negs	r2, r3
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	f002 0207 	and.w	r2, r2, #7
 8000af6:	bf58      	it	pl
 8000af8:	4253      	negpl	r3, r2
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	fa41 f303 	asr.w	r3, r1, r3
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d014      	beq.n	8000b34 <drawDigit+0xf0>
                setPixel(y + row, x + col+2, 1, 1, 0);
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	b2d8      	uxtb	r0, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3302      	adds	r3, #2
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	2300      	movs	r3, #0
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f7ff fd9d 	bl	800066c <setPixel>
 8000b32:	e013      	b.n	8000b5c <drawDigit+0x118>
            } else {
                setPixel(y + row, x + col+2, 0, 0, 0);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b2d8      	uxtb	r0, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	b2d9      	uxtb	r1, r3
 8000b50:	2300      	movs	r3, #0
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2200      	movs	r2, #0
 8000b58:	f7ff fd88 	bl	800066c <setPixel>
        for (int col = 0; col < BIG_FONT_WIDTH; ++col) {
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	ddb5      	ble.n	8000ad4 <drawDigit+0x90>
    for (int row = 0; row < BIG_FONT_HEIGHT; ++row) {
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	ddac      	ble.n	8000ace <drawDigit+0x8a>
 8000b74:	e000      	b.n	8000b78 <drawDigit+0x134>
        default: return;
 8000b76:	bf00      	nop
            }
        }
    }
}
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	08005654 	.word	0x08005654
 8000b84:	08005674 	.word	0x08005674
 8000b88:	08005694 	.word	0x08005694
 8000b8c:	080056b4 	.word	0x080056b4
 8000b90:	080056d4 	.word	0x080056d4
 8000b94:	080056f4 	.word	0x080056f4
 8000b98:	08005714 	.word	0x08005714
 8000b9c:	08005734 	.word	0x08005734
 8000ba0:	08005754 	.word	0x08005754
 8000ba4:	08005774 	.word	0x08005774

08000ba8 <drawClockTime>:

void drawClockTime(uint8_t hour, uint8_t minute, const char* ampm) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
	if (ampm[0] == 'A') {
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b41      	cmp	r3, #65	@ 0x41
 8000bbe:	d14a      	bne.n	8000c56 <drawClockTime+0xae>
	    for (int row = 0; row < SMALL_FONT_HEIGHT; ++row) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	e043      	b.n	8000c4e <drawClockTime+0xa6>
	        for (int col = 0; col < SMALL_FONT_WIDTH; ++col) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	e03a      	b.n	8000c42 <drawClockTime+0x9a>
	            if ((bitmap_A[row][0] >> (7 - col)) & 0x01)
 8000bcc:	4a8a      	ldr	r2, [pc, #552]	@ (8000df8 <drawClockTime+0x250>)
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	f1c3 0307 	rsb	r3, r3, #7
 8000bdc:	fa42 f303 	asr.w	r3, r2, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00d      	beq.n	8000c04 <drawClockTime+0x5c>
	                setPixel(2 + row, 25 + col, 1, 1, 0);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	3302      	adds	r3, #2
 8000bee:	b2d8      	uxtb	r0, r3
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3319      	adds	r3, #25
 8000bf6:	b2d9      	uxtb	r1, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f7ff fd34 	bl	800066c <setPixel>
	            if ((bitmap_M[row][0] >> (7 - col)) & 0x01)
 8000c04:	4a7d      	ldr	r2, [pc, #500]	@ (8000dfc <drawClockTime+0x254>)
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	f1c3 0307 	rsb	r3, r3, #7
 8000c14:	fa42 f303 	asr.w	r3, r2, r3
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00d      	beq.n	8000c3c <drawClockTime+0x94>
	                setPixel(2 + row, 33 + col, 1, 1, 0);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3302      	adds	r3, #2
 8000c26:	b2d8      	uxtb	r0, r3
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3321      	adds	r3, #33	@ 0x21
 8000c2e:	b2d9      	uxtb	r1, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	2201      	movs	r2, #1
 8000c38:	f7ff fd18 	bl	800066c <setPixel>
	        for (int col = 0; col < SMALL_FONT_WIDTH; ++col) {
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2b06      	cmp	r3, #6
 8000c46:	ddc1      	ble.n	8000bcc <drawClockTime+0x24>
	    for (int row = 0; row < SMALL_FONT_HEIGHT; ++row) {
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	2b0b      	cmp	r3, #11
 8000c52:	ddb8      	ble.n	8000bc6 <drawClockTime+0x1e>
 8000c54:	e049      	b.n	8000cea <drawClockTime+0x142>
	        	}
	    	}
		} else {
			for (int row = 0; row < SMALL_FONT_HEIGHT; ++row) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e043      	b.n	8000ce4 <drawClockTime+0x13c>
				for (int col = 0; col < SMALL_FONT_WIDTH; ++col) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	e03a      	b.n	8000cd8 <drawClockTime+0x130>
					if ((bitmap_cP[row][0] >> (7 - col)) & 0x01)
 8000c62:	4a67      	ldr	r2, [pc, #412]	@ (8000e00 <drawClockTime+0x258>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	fa42 f303 	asr.w	r3, r2, r3
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00d      	beq.n	8000c9a <drawClockTime+0xf2>
						setPixel(2 + row, 25 + col, 1, 1, 0);
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3302      	adds	r3, #2
 8000c84:	b2d8      	uxtb	r0, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	3319      	adds	r3, #25
 8000c8c:	b2d9      	uxtb	r1, r3
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	2201      	movs	r2, #1
 8000c96:	f7ff fce9 	bl	800066c <setPixel>
					if ((bitmap_M[row][0] >> (7 - col)) & 0x01)
 8000c9a:	4a58      	ldr	r2, [pc, #352]	@ (8000dfc <drawClockTime+0x254>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	fa42 f303 	asr.w	r3, r2, r3
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00d      	beq.n	8000cd2 <drawClockTime+0x12a>
						setPixel(2 + row, 33 + col, 1, 1, 0);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	3302      	adds	r3, #2
 8000cbc:	b2d8      	uxtb	r0, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	3321      	adds	r3, #33	@ 0x21
 8000cc4:	b2d9      	uxtb	r1, r3
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f7ff fccd 	bl	800066c <setPixel>
				for (int col = 0; col < SMALL_FONT_WIDTH; ++col) {
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	ddc1      	ble.n	8000c62 <drawClockTime+0xba>
			for (int row = 0; row < SMALL_FONT_HEIGHT; ++row) {
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b0b      	cmp	r3, #11
 8000ce8:	ddb8      	ble.n	8000c5c <drawClockTime+0xb4>
				}
			}
		}


    drawDigit(hour / 10, 16, 0);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4a45      	ldr	r2, [pc, #276]	@ (8000e04 <drawClockTime+0x25c>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	08db      	lsrs	r3, r3, #3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fea2 	bl	8000a44 <drawDigit>
    drawDigit(hour % 10, 16, 12);
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	4b40      	ldr	r3, [pc, #256]	@ (8000e04 <drawClockTime+0x25c>)
 8000d04:	fba3 1302 	umull	r1, r3, r3, r2
 8000d08:	08d9      	lsrs	r1, r3, #3
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	220c      	movs	r2, #12
 8000d18:	2110      	movs	r1, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe92 	bl	8000a44 <drawDigit>

    for (int row = 0; row < BIG_FONT_HEIGHT; ++row) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e045      	b.n	8000db2 <drawClockTime+0x20a>
        for (int col = 0; col < BIG_FONT_WIDTH; ++col) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	e03c      	b.n	8000da6 <drawClockTime+0x1fe>
            if ((big_bitmap_COLON[row][col / 8] >> (7 - (col % 8))) & 0x01)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da00      	bge.n	8000d34 <drawClockTime+0x18c>
 8000d32:	3307      	adds	r3, #7
 8000d34:	10db      	asrs	r3, r3, #3
 8000d36:	4619      	mov	r1, r3
 8000d38:	4a33      	ldr	r2, [pc, #204]	@ (8000e08 <drawClockTime+0x260>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	425a      	negs	r2, r3
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	f002 0207 	and.w	r2, r2, #7
 8000d52:	bf58      	it	pl
 8000d54:	4253      	negpl	r3, r2
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	fa41 f303 	asr.w	r3, r1, r3
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00e      	beq.n	8000d84 <drawClockTime+0x1dc>
                setPixel(16 + row, 27 + col, 1, 1, 0);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3310      	adds	r3, #16
 8000d6c:	b2d8      	uxtb	r0, r3
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	331b      	adds	r3, #27
 8000d74:	b2d9      	uxtb	r1, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f7ff fc75 	bl	800066c <setPixel>
 8000d82:	e00d      	b.n	8000da0 <drawClockTime+0x1f8>
            else
                setPixel(16 + row, 27 + col, 0, 0, 0);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3310      	adds	r3, #16
 8000d8a:	b2d8      	uxtb	r0, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	331b      	adds	r3, #27
 8000d92:	b2d9      	uxtb	r1, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f7ff fc66 	bl	800066c <setPixel>
        for (int col = 0; col < BIG_FONT_WIDTH; ++col) {
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b0a      	cmp	r3, #10
 8000daa:	ddbf      	ble.n	8000d2c <drawClockTime+0x184>
    for (int row = 0; row < BIG_FONT_HEIGHT; ++row) {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	ddb6      	ble.n	8000d26 <drawClockTime+0x17e>
        }
    }

    drawDigit(minute / 10, 16, 38);
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <drawClockTime+0x25c>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2226      	movs	r2, #38	@ 0x26
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fe3b 	bl	8000a44 <drawDigit>
    drawDigit(minute % 10, 16, 50);
 8000dce:	79ba      	ldrb	r2, [r7, #6]
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <drawClockTime+0x25c>)
 8000dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd6:	08d9      	lsrs	r1, r3, #3
 8000dd8:	460b      	mov	r3, r1
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2232      	movs	r2, #50	@ 0x32
 8000de6:	2110      	movs	r1, #16
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe2b 	bl	8000a44 <drawDigit>

}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08005630 	.word	0x08005630
 8000dfc:	0800563c 	.word	0x0800563c
 8000e00:	08005648 	.word	0x08005648
 8000e04:	cccccccd 	.word	0xcccccccd
 8000e08:	08005794 	.word	0x08005794

08000e0c <drawStopNow>:

// ==== 메시지 표시 ====
void drawStopNow(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
    clearBuffer();
 8000e12:	f7ff fc73 	bl	80006fc <clearBuffer>

    uint8_t row1 = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]
    uint8_t row2 = 16;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	71bb      	strb	r3, [r7, #6]
    uint8_t spacing = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	717b      	strb	r3, [r7, #5]
    uint8_t charWidth = FONT_WIDTH;
 8000e22:	230e      	movs	r3, #14
 8000e24:	713b      	strb	r3, [r7, #4]
    uint8_t totalWidth = charWidth * 4 + spacing * 3; // 56
 8000e26:	793b      	ldrb	r3, [r7, #4]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	797b      	ldrb	r3, [r7, #5]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	0049      	lsls	r1, r1, #1
 8000e32:	440b      	add	r3, r1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	70fb      	strb	r3, [r7, #3]
    uint8_t startCol = (HUB75_WIDTH - totalWidth) / 2;  // 4
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e40:	0fda      	lsrs	r2, r3, #31
 8000e42:	4413      	add	r3, r2
 8000e44:	105b      	asrs	r3, r3, #1
 8000e46:	70bb      	strb	r3, [r7, #2]

    // Line 1: S T O P
    drawCharBitmap(row1, startCol + (charWidth + spacing) * 0, bitmap_S);
 8000e48:	78b9      	ldrb	r1, [r7, #2]
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a30      	ldr	r2, [pc, #192]	@ (8000f10 <drawStopNow+0x104>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fdb4 	bl	80009bc <drawCharBitmap>
    drawCharBitmap(row1, startCol + (charWidth + spacing) * 1, bitmap_T);
 8000e54:	793a      	ldrb	r2, [r7, #4]
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2d9      	uxtb	r1, r3
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a2b      	ldr	r2, [pc, #172]	@ (8000f14 <drawStopNow+0x108>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fda8 	bl	80009bc <drawCharBitmap>
    drawCharBitmap(row1, startCol + (charWidth + spacing) * 2, bitmap_O);
 8000e6c:	793a      	ldrb	r2, [r7, #4]
 8000e6e:	797b      	ldrb	r3, [r7, #5]
 8000e70:	4413      	add	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2d9      	uxtb	r1, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4a25      	ldr	r2, [pc, #148]	@ (8000f18 <drawStopNow+0x10c>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd9a 	bl	80009bc <drawCharBitmap>
    drawCharBitmap(row1, startCol + (charWidth + spacing) * 3, bitmap_P);
 8000e88:	793a      	ldrb	r2, [r7, #4]
 8000e8a:	797b      	ldrb	r3, [r7, #5]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	0052      	lsls	r2, r2, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	78bb      	ldrb	r3, [r7, #2]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2d9      	uxtb	r1, r3
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f1c <drawStopNow+0x110>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fd8a 	bl	80009bc <drawCharBitmap>

    // Line 2:   N O W !
    drawCharBitmap(row2, startCol + (charWidth + spacing) * 0, bitmap_N);
 8000ea8:	78b9      	ldrb	r1, [r7, #2]
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <drawStopNow+0x114>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fd84 	bl	80009bc <drawCharBitmap>
    drawCharBitmap(row2, startCol + (charWidth + spacing) * 1, bitmap_O);
 8000eb4:	793a      	ldrb	r2, [r7, #4]
 8000eb6:	797b      	ldrb	r3, [r7, #5]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	78bb      	ldrb	r3, [r7, #2]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2d9      	uxtb	r1, r3
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <drawStopNow+0x10c>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fd78 	bl	80009bc <drawCharBitmap>
    drawCharBitmap(row2, startCol + (charWidth + spacing) * 2, bitmap_W);
 8000ecc:	793a      	ldrb	r2, [r7, #4]
 8000ece:	797b      	ldrb	r3, [r7, #5]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	78bb      	ldrb	r3, [r7, #2]
 8000eda:	4413      	add	r3, r2
 8000edc:	b2d9      	uxtb	r1, r3
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <drawStopNow+0x118>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fd6a 	bl	80009bc <drawCharBitmap>
    drawCharBitmap(row2, startCol + (charWidth + spacing) * 3, bitmap_EXCL);
 8000ee8:	793a      	ldrb	r2, [r7, #4]
 8000eea:	797b      	ldrb	r3, [r7, #5]
 8000eec:	4413      	add	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	0052      	lsls	r2, r2, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	78bb      	ldrb	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <drawStopNow+0x11c>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd5a 	bl	80009bc <drawCharBitmap>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08005bb4 	.word	0x08005bb4
 8000f14:	08005bd4 	.word	0x08005bd4
 8000f18:	08005bf4 	.word	0x08005bf4
 8000f1c:	08005c14 	.word	0x08005c14
 8000f20:	08005c34 	.word	0x08005c34
 8000f24:	08005c54 	.word	0x08005c54
 8000f28:	08005c74 	.word	0x08005c74

08000f2c <drawMario>:
    drawCharBitmap3B(start_row, start_col + (17 + spacing) * 1, O_bitmap);     // O
    drawCharBitmap3B(start_row, start_col + (17 + spacing) * 2, EXCL_bitmap); // !
}


void drawMario(uint8_t start_row, uint8_t start_col) {
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
    for (uint8_t r = 0; r < 32; r++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e068      	b.n	8001014 <drawMario+0xe8>
        for (uint8_t c = 0; c < 32; c++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	73bb      	strb	r3, [r7, #14]
 8000f46:	e05f      	b.n	8001008 <drawMario+0xdc>
            uint8_t color = marioBits[r][c];
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	4935      	ldr	r1, [pc, #212]	@ (8001024 <drawMario+0xf8>)
 8000f4e:	0152      	lsls	r2, r2, #5
 8000f50:	440a      	add	r2, r1
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	72bb      	strb	r3, [r7, #10]

            uint8_t red = 0, green = 0, blue = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	737b      	strb	r3, [r7, #13]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	733b      	strb	r3, [r7, #12]
 8000f60:	2300      	movs	r3, #0
 8000f62:	72fb      	strb	r3, [r7, #11]

            switch (color) {
 8000f64:	7abb      	ldrb	r3, [r7, #10]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	d835      	bhi.n	8000fd6 <drawMario+0xaa>
 8000f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <drawMario+0x44>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f91 	.word	0x08000f91
 8000f74:	08000f9f 	.word	0x08000f9f
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08000fd7 	.word	0x08000fd7
 8000f80:	08000fad 	.word	0x08000fad
 8000f84:	08000fd7 	.word	0x08000fd7
 8000f88:	08000fbb 	.word	0x08000fbb
 8000f8c:	08000fc9 	.word	0x08000fc9
                case 0x00: red = 0; green = 0; blue = 0; break;  // 검정
 8000f90:	2300      	movs	r3, #0
 8000f92:	737b      	strb	r3, [r7, #13]
 8000f94:	2300      	movs	r3, #0
 8000f96:	733b      	strb	r3, [r7, #12]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	72fb      	strb	r3, [r7, #11]
 8000f9c:	e022      	b.n	8000fe4 <drawMario+0xb8>
                case 0x01: red = 0; green = 0; blue = 1; break;  // 파랑
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	737b      	strb	r3, [r7, #13]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	733b      	strb	r3, [r7, #12]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	72fb      	strb	r3, [r7, #11]
 8000faa:	e01b      	b.n	8000fe4 <drawMario+0xb8>
                case 0x04: red = 1; green = 0; blue = 0; break;  // 빨강
 8000fac:	2301      	movs	r3, #1
 8000fae:	737b      	strb	r3, [r7, #13]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	733b      	strb	r3, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	72fb      	strb	r3, [r7, #11]
 8000fb8:	e014      	b.n	8000fe4 <drawMario+0xb8>
                case 0x06: red = 1; green = 1; blue = 0; break;  // 노랑
 8000fba:	2301      	movs	r3, #1
 8000fbc:	737b      	strb	r3, [r7, #13]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	733b      	strb	r3, [r7, #12]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	72fb      	strb	r3, [r7, #11]
 8000fc6:	e00d      	b.n	8000fe4 <drawMario+0xb8>
                case 0x07: red = 1; green = 1; blue = 1; break;  // 흰색
 8000fc8:	2301      	movs	r3, #1
 8000fca:	737b      	strb	r3, [r7, #13]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	733b      	strb	r3, [r7, #12]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	72fb      	strb	r3, [r7, #11]
 8000fd4:	e006      	b.n	8000fe4 <drawMario+0xb8>
                default:   red = 0; green = 0; blue = 0; break;  // 예외: 검정 처리
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	737b      	strb	r3, [r7, #13]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	733b      	strb	r3, [r7, #12]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	72fb      	strb	r3, [r7, #11]
 8000fe2:	bf00      	nop
            }

            setPixel(start_row + r, start_col + c, red, green, blue);
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2d8      	uxtb	r0, r3
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2d9      	uxtb	r1, r3
 8000ff4:	7b3c      	ldrb	r4, [r7, #12]
 8000ff6:	7b7a      	ldrb	r2, [r7, #13]
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4623      	mov	r3, r4
 8000ffe:	f7ff fb35 	bl	800066c <setPixel>
        for (uint8_t c = 0; c < 32; c++) {
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	3301      	adds	r3, #1
 8001006:	73bb      	strb	r3, [r7, #14]
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	2b1f      	cmp	r3, #31
 800100c:	d99c      	bls.n	8000f48 <drawMario+0x1c>
    for (uint8_t r = 0; r < 32; r++) {
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b1f      	cmp	r3, #31
 8001018:	d993      	bls.n	8000f42 <drawMario+0x16>
        }
    }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	080057b4 	.word	0x080057b4

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b0ab      	sub	sp, #172	@ 0xac
 800102c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 fe3b 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f8c3 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 f9ff 	bl	8001438 <MX_GPIO_Init>
  MX_RTC_Init();
 800103a:	f000 f92d 	bl	8001298 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f9d1 	bl	80013e4 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8001042:	f000 f985 	bl	8001350 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  char *msg = "UART Bitmask FSM Receiver Start\r\n";
 8001046:	4b55      	ldr	r3, [pc, #340]	@ (800119c <main+0x174>)
 8001048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800104c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001050:	f7ff f8c6 	bl	80001e0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001060:	484f      	ldr	r0, [pc, #316]	@ (80011a0 <main+0x178>)
 8001062:	f002 fdef 	bl	8003c44 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	494e      	ldr	r1, [pc, #312]	@ (80011a4 <main+0x17c>)
 800106a:	484d      	ldr	r0, [pc, #308]	@ (80011a0 <main+0x178>)
 800106c:	f002 fe75 	bl	8003d5a <HAL_UART_Receive_IT>
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  char temp[100];
  const char* ampm;

  uint8_t last_minute = 0xFF;
 8001070:	23ff      	movs	r3, #255	@ 0xff
 8001072:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t last_tick = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800107c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4848      	ldr	r0, [pc, #288]	@ (80011a8 <main+0x180>)
 8001086:	f002 f888 	bl	800319a <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800108a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4845      	ldr	r0, [pc, #276]	@ (80011a8 <main+0x180>)
 8001094:	f002 f963 	bl	800335e <HAL_RTC_GetDate>
  ampm = (sTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001098:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <main+0x7c>
 80010a0:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <main+0x184>)
 80010a2:	e000      	b.n	80010a6 <main+0x7e>
 80010a4:	4b42      	ldr	r3, [pc, #264]	@ (80011b0 <main+0x188>)
 80010a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  clearBuffer();
 80010aa:	f7ff fb27 	bl	80006fc <clearBuffer>
  drawClockTime(sTime.Hours, sTime.Minutes, ampm);
 80010ae:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80010b2:	f897 106d 	ldrb.w	r1, [r7, #109]	@ 0x6d
 80010b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fd74 	bl	8000ba8 <drawClockTime>
    while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HUB75_UpdateScreen();
 80010c0:	f7ff fb28 	bl	8000714 <HUB75_UpdateScreen>

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4836      	ldr	r0, [pc, #216]	@ (80011a8 <main+0x180>)
 80010ce:	f002 f864 	bl	800319a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80010d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4833      	ldr	r0, [pc, #204]	@ (80011a8 <main+0x180>)
 80010dc:	f002 f93f 	bl	800335e <HAL_RTC_GetDate>
    ampm = (sTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80010e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <main+0xc4>
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <main+0x184>)
 80010ea:	e000      	b.n	80010ee <main+0xc6>
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <main+0x188>)
 80010ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // 1분마다 시계 정보 UART 출력
    if (sTime.Minutes != last_minute) {
 80010f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80010f6:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d02c      	beq.n	8001158 <main+0x130>
        last_minute = sTime.Minutes;
 80010fe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001102:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        sprintf(temp, "\r\n20%02x-%02x-%02x %s %02x:%02x:%02x",
            sDate.Year, sDate.Month, sDate.Date,
 8001106:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
        sprintf(temp, "\r\n20%02x-%02x-%02x %s %02x:%02x:%02x",
 800110a:	461d      	mov	r5, r3
            sDate.Year, sDate.Month, sDate.Date,
 800110c:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
        sprintf(temp, "\r\n20%02x-%02x-%02x %s %02x:%02x:%02x",
 8001110:	461e      	mov	r6, r3
            sDate.Year, sDate.Month, sDate.Date,
 8001112:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
        sprintf(temp, "\r\n20%02x-%02x-%02x %s %02x:%02x:%02x",
 8001116:	461a      	mov	r2, r3
            ampm, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001118:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800111c:	f897 106d 	ldrb.w	r1, [r7, #109]	@ 0x6d
 8001120:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
        sprintf(temp, "\r\n20%02x-%02x-%02x %s %02x:%02x:%02x",
 8001124:	4604      	mov	r4, r0
 8001126:	1d38      	adds	r0, r7, #4
 8001128:	9404      	str	r4, [sp, #16]
 800112a:	9103      	str	r1, [sp, #12]
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	4633      	mov	r3, r6
 8001138:	462a      	mov	r2, r5
 800113a:	491e      	ldr	r1, [pc, #120]	@ (80011b4 <main+0x18c>)
 800113c:	f003 fd9e 	bl	8004c7c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen(temp), HAL_MAX_DELAY);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f84c 	bl	80001e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	1d39      	adds	r1, r7, #4
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <main+0x178>)
 8001154:	f002 fd76 	bl	8003c44 <HAL_UART_Transmit>
    }

    // 🔄 LED 상태 토글 (led_matrix.c 내부에서 전환만 처리)
       LEDMatrix_TurnOn();
 8001158:	f7ff fbda 	bl	8000910 <LEDMatrix_TurnOn>

       // ✅ 화면 갱신
       clearBuffer();
 800115c:	f7ff face 	bl	80006fc <clearBuffer>

       // 🖥 현재 상태에 따라 렌더링
       switch (led_state) {
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <main+0x190>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d013      	beq.n	8001190 <main+0x168>
 8001168:	2b02      	cmp	r3, #2
 800116a:	dca9      	bgt.n	80010c0 <main+0x98>
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <main+0x14e>
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00a      	beq.n	800118a <main+0x162>
 8001174:	e011      	b.n	800119a <main+0x172>
           case LED_STATE_CLOCK:
               drawClockTime(sTime.Hours, sTime.Minutes, ampm);
 8001176:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800117a:	f897 106d 	ldrb.w	r1, [r7, #109]	@ 0x6d
 800117e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fd10 	bl	8000ba8 <drawClockTime>
               break;
 8001188:	e007      	b.n	800119a <main+0x172>
           case LED_STATE_STOP:
               drawStopNow();
 800118a:	f7ff fe3f 	bl	8000e0c <drawStopNow>
               break;
 800118e:	e004      	b.n	800119a <main+0x172>
           case LED_STATE_MARIO:
               drawMario(0, 16);
 8001190:	2110      	movs	r1, #16
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff feca 	bl	8000f2c <drawMario>
               break;
 8001198:	bf00      	nop
    HUB75_UpdateScreen();
 800119a:	e791      	b.n	80010c0 <main+0x98>
 800119c:	080055dc 	.word	0x080055dc
 80011a0:	20001950 	.word	0x20001950
 80011a4:	200019a0 	.word	0x200019a0
 80011a8:	200018e8 	.word	0x200018e8
 80011ac:	08005600 	.word	0x08005600
 80011b0:	08005604 	.word	0x08005604
 80011b4:	08005608 	.word	0x08005608
 80011b8:	200018e0 	.word	0x200018e0

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	@ 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fd78 	bl	8004cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <SystemClock_Config+0xd4>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <SystemClock_Config+0xd4>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <SystemClock_Config+0xd4>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <SystemClock_Config+0xd8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001208:	4a22      	ldr	r2, [pc, #136]	@ (8001294 <SystemClock_Config+0xd8>)
 800120a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <SystemClock_Config+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800121c:	230a      	movs	r3, #10
 800121e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001234:	2310      	movs	r3, #16
 8001236:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001238:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800123e:	2304      	movs	r3, #4
 8001240:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001242:	2307      	movs	r3, #7
 8001244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f904 	bl	8002458 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001256:	f000 f9ab 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fb66 	bl	8002948 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001282:	f000 f995 	bl	80015b0 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	@ 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012b2:	4a26      	ldr	r2, [pc, #152]	@ (800134c <MX_RTC_Init+0xb4>)
 80012b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012b8:	2240      	movs	r2, #64	@ 0x40
 80012ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012be:	227f      	movs	r2, #127	@ 0x7f
 80012c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012da:	481b      	ldr	r0, [pc, #108]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012dc:	f001 fe42 	bl	8002f64 <HAL_RTC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 f963 	bl	80015b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <MX_RTC_Init+0xb0>)
 800130a:	f001 feac 	bl	8003066 <HAL_RTC_SetTime>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001314:	f000 f94c 	bl	80015b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001318:	2301      	movs	r3, #1
 800131a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800131c:	2301      	movs	r3, #1
 800131e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <MX_RTC_Init+0xb0>)
 8001330:	f001 ff91 	bl	8003256 <HAL_RTC_SetDate>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800133a:	f000 f939 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200018e8 	.word	0x200018e8
 800134c:	40002800 	.word	0x40002800

08001350 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <MX_TIM10_Init+0x8c>)
 800136a:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <MX_TIM10_Init+0x90>)
 800136c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 800136e:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM10_Init+0x8c>)
 8001370:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001374:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <MX_TIM10_Init+0x8c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <MX_TIM10_Init+0x8c>)
 800137e:	2263      	movs	r2, #99	@ 0x63
 8001380:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM10_Init+0x8c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_TIM10_Init+0x8c>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800138e:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM10_Init+0x8c>)
 8001390:	f002 f8f2 	bl	8003578 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800139a:	f000 f909 	bl	80015b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800139e:	480f      	ldr	r0, [pc, #60]	@ (80013dc <MX_TIM10_Init+0x8c>)
 80013a0:	f002 f939 	bl	8003616 <HAL_TIM_OC_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80013aa:	f000 f901 	bl	80015b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM10_Init+0x8c>)
 80013c6:	f002 f97f 	bl	80036c8 <HAL_TIM_OC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013d0:	f000 f8ee 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20001908 	.word	0x20001908
 80013e0:	40014400 	.word	0x40014400

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <MX_USART1_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 800141c:	f002 fbc2 	bl	8003ba4 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f8c3 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20001950 	.word	0x20001950
 8001434:	40011000 	.word	0x40011000

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a52      	ldr	r2, [pc, #328]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b50      	ldr	r3, [pc, #320]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a4b      	ldr	r2, [pc, #300]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <MX_GPIO_Init+0x168>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b45      	ldr	r3, [pc, #276]	@ (80015a0 <MX_GPIO_Init+0x168>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a44      	ldr	r2, [pc, #272]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <MX_GPIO_Init+0x168>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b3e      	ldr	r3, [pc, #248]	@ (80015a0 <MX_GPIO_Init+0x168>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a3d      	ldr	r2, [pc, #244]	@ (80015a0 <MX_GPIO_Init+0x168>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <MX_GPIO_Init+0x168>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin|C_Pin|D_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	210f      	movs	r1, #15
 80014c2:	4838      	ldr	r0, [pc, #224]	@ (80015a4 <MX_GPIO_Init+0x16c>)
 80014c4:	f000 ffae 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2130      	movs	r1, #48	@ 0x30
 80014cc:	4836      	ldr	r0, [pc, #216]	@ (80015a8 <MX_GPIO_Init+0x170>)
 80014ce:	f000 ffa9 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|G1_Pin|B1_Pin|R2_Pin
 80014d2:	2200      	movs	r2, #0
 80014d4:	f240 213f 	movw	r1, #575	@ 0x23f
 80014d8:	4834      	ldr	r0, [pc, #208]	@ (80015ac <MX_GPIO_Init+0x174>)
 80014da:	f000 ffa3 	bl	8002424 <HAL_GPIO_WritePin>
                          |G2_Pin|B2_Pin|LAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e4:	4831      	ldr	r0, [pc, #196]	@ (80015ac <MX_GPIO_Init+0x174>)
 80014e6:	f000 ff9d 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin;
 80014ea:	230f      	movs	r3, #15
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4828      	ldr	r0, [pc, #160]	@ (80015a4 <MX_GPIO_Init+0x16c>)
 8001502:	f000 fe0b 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001516:	2307      	movs	r3, #7
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4821      	ldr	r0, [pc, #132]	@ (80015a8 <MX_GPIO_Init+0x170>)
 8001522:	f000 fdfb 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_Pin */
  GPIO_InitStruct.Pin = CLK_Pin;
 8001526:	2310      	movs	r3, #16
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	481a      	ldr	r0, [pc, #104]	@ (80015a8 <MX_GPIO_Init+0x170>)
 800153e:	f000 fded 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001542:	2320      	movs	r3, #32
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <MX_GPIO_Init+0x170>)
 800155a:	f000 fddf 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin G1_Pin B1_Pin R2_Pin
                           G2_Pin B2_Pin */
  GPIO_InitStruct.Pin = R1_Pin|G1_Pin|B1_Pin|R2_Pin
 800155e:	233f      	movs	r3, #63	@ 0x3f
 8001560:	617b      	str	r3, [r7, #20]
                          |G2_Pin|B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	480d      	ldr	r0, [pc, #52]	@ (80015ac <MX_GPIO_Init+0x174>)
 8001576:	f000 fdd1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : OE_Pin LAT_Pin */
  GPIO_InitStruct.Pin = OE_Pin|LAT_Pin;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	2301      	movs	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <MX_GPIO_Init+0x174>)
 8001594:	f000 fdc2 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <Error_Handler+0x8>

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <HAL_RTC_MspInit+0x50>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d111      	bne.n	8001652 <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800162e:	2302      	movs	r3, #2
 8001630:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001636:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4618      	mov	r0, r3
 800163e:	f001 fba3 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001648:	f7ff ffb2 	bl	80015b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_RTC_MspInit+0x54>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001652:	bf00      	nop
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40002800 	.word	0x40002800
 8001660:	42470e3c 	.word	0x42470e3c

08001664 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10d      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_TIM_Base_MspInit+0x40>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <HAL_TIM_Base_MspInit+0x40>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <HAL_TIM_Base_MspInit+0x40>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40014400 	.word	0x40014400
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_UART_MspInit+0x94>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d134      	bne.n	8001734 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_UART_MspInit+0x98>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <HAL_UART_MspInit+0x98>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_UART_MspInit+0x98>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_UART_MspInit+0x98>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <HAL_UART_MspInit+0x98>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_UART_MspInit+0x98>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001702:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001714:	2307      	movs	r3, #7
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4809      	ldr	r0, [pc, #36]	@ (8001744 <HAL_UART_MspInit+0x9c>)
 8001720:	f000 fcfc 	bl	800211c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2025      	movs	r0, #37	@ 0x25
 800172a:	f000 fc2e 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800172e:	2025      	movs	r0, #37	@ 0x25
 8001730:	f000 fc47 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40011000 	.word	0x40011000
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <UsageFault_Handler+0x4>

08001770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 fad5 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <USART1_IRQHandler+0x10>)
 80017ae:	f002 faf9 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20001950 	.word	0x20001950

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f003 fa70 	bl	8004cd0 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20018000 	.word	0x20018000
 800181c:	00000400 	.word	0x00000400
 8001820:	2000199c 	.word	0x2000199c
 8001824:	20001bf8 	.word	0x20001bf8

08001828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <SystemInit+0x20>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <SystemInit+0x20>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[RX_BUFFER_SIZE] = {0};



// Callback function triggered when a UART byte is received (Interrupt)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a08      	ldr	r2, [pc, #32]	@ (800187c <HAL_UART_RxCpltCallback+0x30>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d109      	bne.n	8001872 <HAL_UART_RxCpltCallback+0x26>
        FSM_ParseByte(rx_byte);
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_UART_RxCpltCallback+0x34>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f8d6 	bl	8001a14 <FSM_ParseByte>
       HAL_UART_Receive_IT(&huart1, &rx_byte, 1);  // Continue receiving next byte
 8001868:	2201      	movs	r2, #1
 800186a:	4905      	ldr	r1, [pc, #20]	@ (8001880 <HAL_UART_RxCpltCallback+0x34>)
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <HAL_UART_RxCpltCallback+0x38>)
 800186e:	f002 fa74 	bl	8003d5a <HAL_UART_Receive_IT>
    }
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40011000 	.word	0x40011000
 8001880:	200019a0 	.word	0x200019a0
 8001884:	20001950 	.word	0x20001950

08001888 <reverse_value>:

// Reverse the bit order of a value (used in CRC computation)
unsigned short reverse_value(unsigned short value, int bit) {
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
    unsigned short ret = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < bit; i++) {
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	e011      	b.n	80018c2 <reverse_value+0x3a>
        ret = (ret << 1) | ((value >> i) & 1);
 800189e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	88f9      	ldrh	r1, [r7, #6]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	fa41 f303 	asr.w	r3, r1, r3
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < bit; i++) {
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbe9      	blt.n	800189e <reverse_value+0x16>
    }
    return ret;
 80018ca:	89fb      	ldrh	r3, [r7, #14]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <crc16_calc>:

// Calculate 16-bit CRC using polynomial 0x8005
unsigned short crc16_calc(uint8_t *pData, int length) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    unsigned short crc = 0x0000;
 80018e2:	2300      	movs	r3, #0
 80018e4:	81fb      	strh	r3, [r7, #14]
    while (length--) {
 80018e6:	e029      	b.n	800193c <crc16_calc+0x64>
        crc ^= reverse_value(*pData++, 8) << 8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2108      	movs	r1, #8
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ffc8 	bl	8001888 <reverse_value>
 80018f8:	4603      	mov	r3, r0
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001902:	4053      	eors	r3, r2
 8001904:	b21b      	sxth	r3, r3
 8001906:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	e013      	b.n	8001936 <crc16_calc+0x5e>
            crc = (crc & 0x8000) ? (crc << 1) ^ 0x8005 : crc << 1;
 800190e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da08      	bge.n	8001928 <crc16_calc+0x50>
 8001916:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	b21a      	sxth	r2, r3
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <crc16_calc+0x88>)
 8001920:	4053      	eors	r3, r2
 8001922:	b21b      	sxth	r3, r3
 8001924:	b29b      	uxth	r3, r3
 8001926:	e002      	b.n	800192e <crc16_calc+0x56>
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b07      	cmp	r3, #7
 800193a:	dde8      	ble.n	800190e <crc16_calc+0x36>
    while (length--) {
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	1e5a      	subs	r2, r3, #1
 8001940:	603a      	str	r2, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1d0      	bne.n	80018e8 <crc16_calc+0x10>
        }
    }
    crc = reverse_value(crc, 16);
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	2110      	movs	r1, #16
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff9c 	bl	8001888 <reverse_value>
 8001950:	4603      	mov	r3, r0
 8001952:	81fb      	strh	r3, [r7, #14]
    return crc ^ 0x0000;
 8001954:	89fb      	ldrh	r3, [r7, #14]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	ffff8005 	.word	0xffff8005

08001964 <UART_SendFrame>:

// Send a framed UART command with DLE-STX/ETX framing and CRC
void UART_SendFrame(uint8_t cmd) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
    uint8_t start[] = {DLE, STX};
 800196e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8001972:	833b      	strh	r3, [r7, #24]
    uint8_t end[] = {DLE, ETX};
 8001974:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8001978:	82bb      	strh	r3, [r7, #20]
    uint8_t frame[3]; // CMD + CRC(2 bytes)

    frame[0] = cmd;
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	743b      	strb	r3, [r7, #16]
    unsigned short crc = crc16_calc(&cmd, 1);
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffa8 	bl	80018d8 <crc16_calc>
 8001988:	4603      	mov	r3, r0
 800198a:	837b      	strh	r3, [r7, #26]
    frame[1] = (crc >> 8) & 0xFF;
 800198c:	8b7b      	ldrh	r3, [r7, #26]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	747b      	strb	r3, [r7, #17]
    frame[2] = crc & 0xFF;
 8001996:	8b7b      	ldrh	r3, [r7, #26]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	74bb      	strb	r3, [r7, #18]

    HAL_UART_Transmit(&huart1, start, 2, HAL_MAX_DELAY);
 800199c:	f107 0118 	add.w	r1, r7, #24
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	2202      	movs	r2, #2
 80019a6:	481a      	ldr	r0, [pc, #104]	@ (8001a10 <UART_SendFrame+0xac>)
 80019a8:	f002 f94c 	bl	8003c44 <HAL_UART_Transmit>

    for (int i = 0; i < 3; i++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	e01f      	b.n	80019f2 <UART_SendFrame+0x8e>
        if (frame[i] == DLE) {
 80019b2:	f107 0210 	add.w	r2, r7, #16
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d10b      	bne.n	80019d8 <UART_SendFrame+0x74>
            uint8_t dle_escape[] = {DLE, DLE};
 80019c0:	f241 0310 	movw	r3, #4112	@ 0x1010
 80019c4:	81bb      	strh	r3, [r7, #12]
            HAL_UART_Transmit(&huart1, dle_escape, 2, HAL_MAX_DELAY);
 80019c6:	f107 010c 	add.w	r1, r7, #12
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	2202      	movs	r2, #2
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <UART_SendFrame+0xac>)
 80019d2:	f002 f937 	bl	8003c44 <HAL_UART_Transmit>
 80019d6:	e009      	b.n	80019ec <UART_SendFrame+0x88>
        } else {
            HAL_UART_Transmit(&huart1, &frame[i], 1, HAL_MAX_DELAY);
 80019d8:	f107 0210 	add.w	r2, r7, #16
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	18d1      	adds	r1, r2, r3
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	2201      	movs	r2, #1
 80019e6:	480a      	ldr	r0, [pc, #40]	@ (8001a10 <UART_SendFrame+0xac>)
 80019e8:	f002 f92c 	bl	8003c44 <HAL_UART_Transmit>
    for (int i = 0; i < 3; i++) {
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	dddc      	ble.n	80019b2 <UART_SendFrame+0x4e>
        }
    }

    HAL_UART_Transmit(&huart1, end, 2, HAL_MAX_DELAY);
 80019f8:	f107 0114 	add.w	r1, r7, #20
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	2202      	movs	r2, #2
 8001a02:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <UART_SendFrame+0xac>)
 8001a04:	f002 f91e 	bl	8003c44 <HAL_UART_Transmit>
}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20001950 	.word	0x20001950

08001a14 <FSM_ParseByte>:

// UART receive FSM for parsing framed protocol data byte-by-byte
void FSM_ParseByte(uint8_t rx) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
    static uint8_t dle_flag = 0;
    static uint8_t receiving = 0;

    if (!receiving) {
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <FSM_ParseByte+0xd0>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11b      	bne.n	8001a5e <FSM_ParseByte+0x4a>
        if (dle_flag && rx == STX) {
 8001a26:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <FSM_ParseByte+0x34>
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d109      	bne.n	8001a48 <FSM_ParseByte+0x34>
            rx_index = 0;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	801a      	strh	r2, [r3, #0]
            receiving = 1;
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <FSM_ParseByte+0xd0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
            dle_flag = 0;
 8001a40:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
            dle_flag = 1;
        } else {
            if (rx_index < RX_BUFFER_SIZE) rx_buffer[rx_index++] = rx;
        }
    }
}
 8001a46:	e048      	b.n	8001ada <FSM_ParseByte+0xc6>
        } else if (rx == DLE) {
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d103      	bne.n	8001a56 <FSM_ParseByte+0x42>
            dle_flag = 1;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	e041      	b.n	8001ada <FSM_ParseByte+0xc6>
            dle_flag = 0;
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
}
 8001a5c:	e03d      	b.n	8001ada <FSM_ParseByte+0xc6>
        if (dle_flag) {
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d024      	beq.n	8001ab0 <FSM_ParseByte+0x9c>
            if (rx == ETX) {
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d10c      	bne.n	8001a86 <FSM_ParseByte+0x72>
                ProcessCommand(rx_buffer, rx_index);
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	481f      	ldr	r0, [pc, #124]	@ (8001af0 <FSM_ParseByte+0xdc>)
 8001a74:	f000 f83e 	bl	8001af4 <ProcessCommand>
                receiving = 0;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <FSM_ParseByte+0xd0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
                rx_index = 0;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	801a      	strh	r2, [r3, #0]
 8001a84:	e010      	b.n	8001aa8 <FSM_ParseByte+0x94>
            } else if (rx == DLE) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d10d      	bne.n	8001aa8 <FSM_ParseByte+0x94>
                if (rx_index < RX_BUFFER_SIZE) rx_buffer[rx_index++] = DLE;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2bff      	cmp	r3, #255	@ 0xff
 8001a92:	d809      	bhi.n	8001aa8 <FSM_ParseByte+0x94>
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	b291      	uxth	r1, r2
 8001a9c:	4a13      	ldr	r2, [pc, #76]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001a9e:	8011      	strh	r1, [r2, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <FSM_ParseByte+0xdc>)
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	5499      	strb	r1, [r3, r2]
            dle_flag = 0;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
}
 8001aae:	e014      	b.n	8001ada <FSM_ParseByte+0xc6>
        } else if (rx == DLE) {
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d103      	bne.n	8001abe <FSM_ParseByte+0xaa>
            dle_flag = 1;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <FSM_ParseByte+0xd4>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
}
 8001abc:	e00d      	b.n	8001ada <FSM_ParseByte+0xc6>
            if (rx_index < RX_BUFFER_SIZE) rx_buffer[rx_index++] = rx;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	2bff      	cmp	r3, #255	@ 0xff
 8001ac4:	d809      	bhi.n	8001ada <FSM_ParseByte+0xc6>
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	b291      	uxth	r1, r2
 8001ace:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <FSM_ParseByte+0xd8>)
 8001ad0:	8011      	strh	r1, [r2, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <FSM_ParseByte+0xdc>)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	5453      	strb	r3, [r2, r1]
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20001aa4 	.word	0x20001aa4
 8001ae8:	20001aa5 	.word	0x20001aa5
 8001aec:	200019a2 	.word	0x200019a2
 8001af0:	200019a4 	.word	0x200019a4

08001af4 <ProcessCommand>:

// Process a fully received command frame
void ProcessCommand(uint8_t *data, uint16_t len) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	@ 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
    if (len < 4) return;
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f240 8098 	bls.w	8001c38 <ProcessCommand+0x144>

    uint8_t dst_mask = data[0];
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t cmd = data[1];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // payload: data[2] ~ data[len - 3]
    uint16_t payload_len = len - 4;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t* payload = &data[2];
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3302      	adds	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint16_t recv_crc = (data[len - 2] << 8) | data[len - 1];
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	3b02      	subs	r3, #2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	440b      	add	r3, r1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t calc_crc = crc16_calc(data, len - 2);
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	3b02      	subs	r3, #2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fec3 	bl	80018d8 <crc16_calc>
 8001b52:	4603      	mov	r3, r0
 8001b54:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (recv_crc != calc_crc) {
 8001b56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d003      	beq.n	8001b66 <ProcessCommand+0x72>
        UART_SendFrame(CMD_NACK);
 8001b5e:	2055      	movs	r0, #85	@ 0x55
 8001b60:	f7ff ff00 	bl	8001964 <UART_SendFrame>
        return;
 8001b64:	e06d      	b.n	8001c42 <ProcessCommand+0x14e>
    }

    if (((dst_mask >> (MY_ID - 1)) & 0x01) == 0) return;
 8001b66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d062      	beq.n	8001c3c <ProcessCommand+0x148>

    switch (cmd) {
 8001b76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d022      	beq.n	8001bc4 <ProcessCommand+0xd0>
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	dc56      	bgt.n	8001c30 <ProcessCommand+0x13c>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d002      	beq.n	8001b8c <ProcessCommand+0x98>
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d00e      	beq.n	8001ba8 <ProcessCommand+0xb4>
 8001b8a:	e051      	b.n	8001c30 <ProcessCommand+0x13c>
        case CMD_LCD_ON:
            led_enabled = 1;
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <ProcessCommand+0x154>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2120      	movs	r1, #32
 8001b96:	482d      	ldr	r0, [pc, #180]	@ (8001c4c <ProcessCommand+0x158>)
 8001b98:	f000 fc44 	bl	8002424 <HAL_GPIO_WritePin>
            LEDMatrix_TurnOn();
 8001b9c:	f7fe feb8 	bl	8000910 <LEDMatrix_TurnOn>
            UART_SendFrame(CMD_ACK);
 8001ba0:	20aa      	movs	r0, #170	@ 0xaa
 8001ba2:	f7ff fedf 	bl	8001964 <UART_SendFrame>
            break;
 8001ba6:	e04c      	b.n	8001c42 <ProcessCommand+0x14e>

        case CMD_LCD_OFF:
            led_enabled = 0;
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <ProcessCommand+0x154>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4826      	ldr	r0, [pc, #152]	@ (8001c4c <ProcessCommand+0x158>)
 8001bb4:	f000 fc36 	bl	8002424 <HAL_GPIO_WritePin>
            LEDMatrix_TurnOff();
 8001bb8:	f7fe fed6 	bl	8000968 <LEDMatrix_TurnOff>
            UART_SendFrame(CMD_ACK);
 8001bbc:	20aa      	movs	r0, #170	@ 0xaa
 8001bbe:	f7ff fed1 	bl	8001964 <UART_SendFrame>
            break;
 8001bc2:	e03e      	b.n	8001c42 <ProcessCommand+0x14e>

        case CMD_SYNC_TIME:
            if (payload_len == 7) {
 8001bc4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d13a      	bne.n	8001c40 <ProcessCommand+0x14c>
                RTC_TimeTypeDef newTime;
                RTC_DateTypeDef newDate;

                newDate.Year  = payload[0];
 8001bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	73fb      	strb	r3, [r7, #15]
                newDate.Month = payload[1];
 8001bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	737b      	strb	r3, [r7, #13]
                newDate.Date  = payload[2];
 8001bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	73bb      	strb	r3, [r7, #14]
                newDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	733b      	strb	r3, [r7, #12]

                newTime.Hours   = payload[3];
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	78db      	ldrb	r3, [r3, #3]
 8001be4:	743b      	strb	r3, [r7, #16]
                newTime.Minutes = payload[4];
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	791b      	ldrb	r3, [r3, #4]
 8001bea:	747b      	strb	r3, [r7, #17]
                newTime.Seconds = payload[5];
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	795b      	ldrb	r3, [r3, #5]
 8001bf0:	74bb      	strb	r3, [r7, #18]
                newTime.TimeFormat = payload[6] ? RTC_HOURFORMAT12_PM : RTC_HOURFORMAT12_AM;
 8001bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf4:	3306      	adds	r3, #6
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	74fb      	strb	r3, [r7, #19]
                newTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
                newTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]

                HAL_RTC_SetTime(&hrtc, &newTime, RTC_FORMAT_BIN);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2200      	movs	r2, #0
 8001c12:	4619      	mov	r1, r3
 8001c14:	480e      	ldr	r0, [pc, #56]	@ (8001c50 <ProcessCommand+0x15c>)
 8001c16:	f001 fa26 	bl	8003066 <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &newDate, RTC_FORMAT_BIN);
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	480b      	ldr	r0, [pc, #44]	@ (8001c50 <ProcessCommand+0x15c>)
 8001c24:	f001 fb17 	bl	8003256 <HAL_RTC_SetDate>
                UART_SendFrame(CMD_ACK);
 8001c28:	20aa      	movs	r0, #170	@ 0xaa
 8001c2a:	f7ff fe9b 	bl	8001964 <UART_SendFrame>
            }
            break;
 8001c2e:	e007      	b.n	8001c40 <ProcessCommand+0x14c>

        default:
            UART_SendFrame(CMD_NACK);
 8001c30:	2055      	movs	r0, #85	@ 0x55
 8001c32:	f7ff fe97 	bl	8001964 <UART_SendFrame>
            break;
 8001c36:	e004      	b.n	8001c42 <ProcessCommand+0x14e>
    if (len < 4) return;
 8001c38:	bf00      	nop
 8001c3a:	e002      	b.n	8001c42 <ProcessCommand+0x14e>
    if (((dst_mask >> (MY_ID - 1)) & 0x01) == 0) return;
 8001c3c:	bf00      	nop
 8001c3e:	e000      	b.n	8001c42 <ProcessCommand+0x14e>
            break;
 8001c40:	bf00      	nop
    }
}
 8001c42:	3730      	adds	r7, #48	@ 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20001998 	.word	0x20001998
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	200018e8 	.word	0x200018e8

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c58:	f7ff fde6 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480c      	ldr	r0, [pc, #48]	@ (8001c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c5e:	490d      	ldr	r1, [pc, #52]	@ (8001c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c82:	f003 f82b 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7ff f9cf 	bl	8001028 <main>
  bx  lr    
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001c98:	08005cf0 	.word	0x08005cf0
  ldr r2, =_sbss
 8001c9c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001ca0:	20001bf4 	.word	0x20001bf4

08001ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <HAL_Init+0x40>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <HAL_Init+0x40>)
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_Init+0x40>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 f94f 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fc6e 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f967 	bl	8001fde <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 f92f 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	@ (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000068 	.word	0x20000068
 8001d44:	20000070 	.word	0x20000070
 8001d48:	2000006c 	.word	0x2000006c

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000070 	.word	0x20000070
 8001d70:	20001aa8 	.word	0x20001aa8

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20001aa8 	.word	0x20001aa8

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000070 	.word	0x20000070

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff feb6 	bl	8001d74 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d008      	beq.n	8002028 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e052      	b.n	80020ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0216 	bic.w	r2, r2, #22
 8002036:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002046:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <HAL_DMA_Abort+0x62>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0208 	bic.w	r2, r2, #8
 8002066:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002078:	e013      	b.n	80020a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207a:	f7ff fe7b 	bl	8001d74 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b05      	cmp	r3, #5
 8002086:	d90c      	bls.n	80020a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e015      	b.n	80020ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e4      	bne.n	800207a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	223f      	movs	r2, #63	@ 0x3f
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e00c      	b.n	800210e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2205      	movs	r2, #5
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e159      	b.n	80023ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	f040 8148 	bne.w	80023e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d005      	beq.n	800216e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	2b02      	cmp	r3, #2
 800216c:	d130      	bne.n	80021d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0201 	and.w	r2, r3, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d017      	beq.n	800220c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d123      	bne.n	8002260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0203 	and.w	r2, r3, #3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80a2 	beq.w	80023e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <HAL_GPIO_Init+0x2e8>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	4a56      	ldr	r2, [pc, #344]	@ (8002404 <HAL_GPIO_Init+0x2e8>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b2:	4b54      	ldr	r3, [pc, #336]	@ (8002404 <HAL_GPIO_Init+0x2e8>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022be:	4a52      	ldr	r2, [pc, #328]	@ (8002408 <HAL_GPIO_Init+0x2ec>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a49      	ldr	r2, [pc, #292]	@ (800240c <HAL_GPIO_Init+0x2f0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d019      	beq.n	800231e <HAL_GPIO_Init+0x202>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a48      	ldr	r2, [pc, #288]	@ (8002410 <HAL_GPIO_Init+0x2f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_GPIO_Init+0x1fe>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a47      	ldr	r2, [pc, #284]	@ (8002414 <HAL_GPIO_Init+0x2f8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00d      	beq.n	8002316 <HAL_GPIO_Init+0x1fa>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a46      	ldr	r2, [pc, #280]	@ (8002418 <HAL_GPIO_Init+0x2fc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x1f6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a45      	ldr	r2, [pc, #276]	@ (800241c <HAL_GPIO_Init+0x300>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_GPIO_Init+0x1f2>
 800230a:	2304      	movs	r3, #4
 800230c:	e008      	b.n	8002320 <HAL_GPIO_Init+0x204>
 800230e:	2307      	movs	r3, #7
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x204>
 8002312:	2303      	movs	r3, #3
 8002314:	e004      	b.n	8002320 <HAL_GPIO_Init+0x204>
 8002316:	2302      	movs	r3, #2
 8002318:	e002      	b.n	8002320 <HAL_GPIO_Init+0x204>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x204>
 800231e:	2300      	movs	r3, #0
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	f002 0203 	and.w	r2, r2, #3
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	4093      	lsls	r3, r2
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002330:	4935      	ldr	r1, [pc, #212]	@ (8002408 <HAL_GPIO_Init+0x2ec>)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233e:	4b38      	ldr	r3, [pc, #224]	@ (8002420 <HAL_GPIO_Init+0x304>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002362:	4a2f      	ldr	r2, [pc, #188]	@ (8002420 <HAL_GPIO_Init+0x304>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <HAL_GPIO_Init+0x304>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800238c:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <HAL_GPIO_Init+0x304>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <HAL_GPIO_Init+0x304>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002420 <HAL_GPIO_Init+0x304>)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <HAL_GPIO_Init+0x304>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002420 <HAL_GPIO_Init+0x304>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	f67f aea2 	bls.w	8002138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40013800 	.word	0x40013800
 800240c:	40020000 	.word	0x40020000
 8002410:	40020400 	.word	0x40020400
 8002414:	40020800 	.word	0x40020800
 8002418:	40020c00 	.word	0x40020c00
 800241c:	40021000 	.word	0x40021000
 8002420:	40013c00 	.word	0x40013c00

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e267      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d075      	beq.n	8002562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002476:	4b88      	ldr	r3, [pc, #544]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00c      	beq.n	800249c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002482:	4b85      	ldr	r3, [pc, #532]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800248a:	2b08      	cmp	r3, #8
 800248c:	d112      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800249a:	d10b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	4b7e      	ldr	r3, [pc, #504]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05b      	beq.n	8002560 <HAL_RCC_OscConfig+0x108>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d157      	bne.n	8002560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e242      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x74>
 80024be:	4b76      	ldr	r3, [pc, #472]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a75      	ldr	r2, [pc, #468]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01d      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x98>
 80024d6:	4b70      	ldr	r3, [pc, #448]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6f      	ldr	r2, [pc, #444]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024f0:	4b69      	ldr	r3, [pc, #420]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a68      	ldr	r2, [pc, #416]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b66      	ldr	r3, [pc, #408]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fc30 	bl	8001d74 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff fc2c 	bl	8001d74 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e207      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b5b      	ldr	r3, [pc, #364]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0xc0>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fc1c 	bl	8001d74 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fc18 	bl	8001d74 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1f3      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	4b51      	ldr	r3, [pc, #324]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0xe8>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d063      	beq.n	8002636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800256e:	4b4a      	ldr	r3, [pc, #296]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b47      	ldr	r3, [pc, #284]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b44      	ldr	r3, [pc, #272]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1c7      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4937      	ldr	r1, [pc, #220]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	e03a      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	4b34      	ldr	r3, [pc, #208]	@ (800269c <HAL_RCC_OscConfig+0x244>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff fbd1 	bl	8001d74 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff fbcd 	bl	8001d74 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1a8      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4925      	ldr	r1, [pc, #148]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x244>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff fbb0 	bl	8001d74 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7ff fbac 	bl	8001d74 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e187      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d036      	beq.n	80026b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_RCC_OscConfig+0x248>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7ff fb90 	bl	8001d74 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7ff fb8c 	bl	8001d74 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e167      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x200>
 8002676:	e01b      	b.n	80026b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_RCC_OscConfig+0x248>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7ff fb79 	bl	8001d74 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	e00e      	b.n	80026a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002686:	f7ff fb75 	bl	8001d74 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d907      	bls.n	80026a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e150      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b88      	ldr	r3, [pc, #544]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ea      	bne.n	8002686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8097 	beq.w	80027ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b81      	ldr	r3, [pc, #516]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b7d      	ldr	r3, [pc, #500]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a7c      	ldr	r2, [pc, #496]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b7a      	ldr	r3, [pc, #488]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b77      	ldr	r3, [pc, #476]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b74      	ldr	r3, [pc, #464]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a73      	ldr	r2, [pc, #460]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7ff fb35 	bl	8001d74 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7ff fb31 	bl	8001d74 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e10c      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x2ea>
 8002734:	4b64      	ldr	r3, [pc, #400]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a63      	ldr	r2, [pc, #396]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x30c>
 800274a:	4b5f      	ldr	r3, [pc, #380]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	4a5e      	ldr	r2, [pc, #376]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	@ 0x70
 8002756:	4b5c      	ldr	r3, [pc, #368]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a5b      	ldr	r2, [pc, #364]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002764:	4b58      	ldr	r3, [pc, #352]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	4a57      	ldr	r2, [pc, #348]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002770:	4b55      	ldr	r3, [pc, #340]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a54      	ldr	r2, [pc, #336]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff faf6 	bl	8001d74 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7ff faf2 	bl	8001d74 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0cb      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RCC_OscConfig+0x334>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff fae0 	bl	8001d74 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7ff fadc 	bl	8001d74 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0b5      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	4b3e      	ldr	r3, [pc, #248]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ee      	bne.n	80027b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	4a38      	ldr	r2, [pc, #224]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a1 	beq.w	8002938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f6:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d05c      	beq.n	80028bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d141      	bne.n	800288e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_RCC_OscConfig+0x478>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fab0 	bl	8001d74 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff faac 	bl	8001d74 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e087      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	491b      	ldr	r1, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7ff fa85 	bl	8001d74 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7ff fa81 	bl	8001d74 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e05c      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x416>
 800288c:	e054      	b.n	8002938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fa6e 	bl	8001d74 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7ff fa6a 	bl	8001d74 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e045      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x444>
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e038      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x4ec>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d028      	beq.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d121      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d11a      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800290a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	4293      	cmp	r3, r2
 800290e:	d111      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0cc      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b68      	ldr	r3, [pc, #416]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d90c      	bls.n	8002984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b65      	ldr	r3, [pc, #404]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b63      	ldr	r3, [pc, #396]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b4:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	494d      	ldr	r1, [pc, #308]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d044      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d119      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b3f      	ldr	r3, [pc, #252]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e067      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a26:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 0203 	bic.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4934      	ldr	r1, [pc, #208]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a38:	f7ff f99c 	bl	8001d74 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7ff f998 	bl	8001d74 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e04f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 020c 	and.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1eb      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d20c      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ace:	f000 f821 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490a      	ldr	r1, [pc, #40]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8fc 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00
 8002b04:	40023800 	.word	0x40023800
 8002b08:	08005c94 	.word	0x08005c94
 8002b0c:	20000068 	.word	0x20000068
 8002b10:	2000006c 	.word	0x2000006c

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b094      	sub	sp, #80	@ 0x50
 8002b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2c:	4b79      	ldr	r3, [pc, #484]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d00d      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x40>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f200 80e1 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b46:	e0db      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4c:	e0db      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4e:	4b73      	ldr	r3, [pc, #460]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b52:	e0d8      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	2200      	movs	r2, #0
 8002b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b86:	4622      	mov	r2, r4
 8002b88:	462b      	mov	r3, r5
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b98:	0150      	lsls	r0, r2, #5
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	1a51      	subs	r1, r2, r1
 8002ba2:	6139      	str	r1, [r7, #16]
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb8:	4659      	mov	r1, fp
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	018a      	lsls	r2, r1, #6
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bcc:	4659      	mov	r1, fp
 8002bce:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be6:	4690      	mov	r8, r2
 8002be8:	4699      	mov	r9, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	eb18 0303 	adds.w	r3, r8, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	eb49 0303 	adc.w	r3, r9, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c06:	4629      	mov	r1, r5
 8002c08:	024b      	lsls	r3, r1, #9
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c10:	4621      	mov	r1, r4
 8002c12:	024a      	lsls	r2, r1, #9
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c24:	f7fd fb34 	bl	8000290 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c30:	e058      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0159      	lsls	r1, r3, #5
 8002c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5e:	0150      	lsls	r0, r2, #5
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4641      	mov	r1, r8
 8002c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c84:	ebb2 040a 	subs.w	r4, r2, sl
 8002c88:	eb63 050b 	sbc.w	r5, r3, fp
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	00eb      	lsls	r3, r5, #3
 8002c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9a:	00e2      	lsls	r2, r4, #3
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	4643      	mov	r3, r8
 8002ca2:	18e3      	adds	r3, r4, r3
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	eb45 0303 	adc.w	r3, r5, r3
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	028b      	lsls	r3, r1, #10
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	61fa      	str	r2, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	f7fd fada 	bl	8000290 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3750      	adds	r7, #80	@ 0x50
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000068 	.word	0x20000068

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08005ca4 	.word	0x08005ca4

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffdc 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0b5b      	lsrs	r3, r3, #13
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005ca4 	.word	0x08005ca4

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d035      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002db0:	4b67      	ldr	r3, [pc, #412]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002db6:	f7fe ffdd 	bl	8001d74 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dbe:	f7fe ffd9 	bl	8001d74 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0ba      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd0:	4b60      	ldr	r3, [pc, #384]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	019a      	lsls	r2, r3, #6
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	071b      	lsls	r3, r3, #28
 8002de8:	495a      	ldr	r1, [pc, #360]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002df0:	4b57      	ldr	r3, [pc, #348]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df6:	f7fe ffbd 	bl	8001d74 <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dfe:	f7fe ffb9 	bl	8001d74 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e09a      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e10:	4b50      	ldr	r3, [pc, #320]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8083 	beq.w	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b49      	ldr	r3, [pc, #292]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	4a48      	ldr	r2, [pc, #288]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3a:	4b46      	ldr	r3, [pc, #280]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e46:	4b44      	ldr	r3, [pc, #272]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a43      	ldr	r2, [pc, #268]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e52:	f7fe ff8f 	bl	8001d74 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe ff8b 	bl	8001d74 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e06c      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e78:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e80:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e96:	4b2f      	ldr	r3, [pc, #188]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002eac:	4a29      	ldr	r2, [pc, #164]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eb2:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d114      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe ff59 	bl	8001d74 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe ff55 	bl	8001d74 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e034      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ef6:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f0a:	4912      	ldr	r1, [pc, #72]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
 8002f10:	e005      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f12:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4a0f      	ldr	r2, [pc, #60]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f18:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f1c:	6093      	str	r3, [r2, #8]
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	490a      	ldr	r1, [pc, #40]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7c1a      	ldrb	r2, [r3, #16]
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f42:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	42470068 	.word	0x42470068
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	42470e40 	.word	0x42470e40
 8002f60:	424711e0 	.word	0x424711e0

08002f64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e073      	b.n	800305e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7f5b      	ldrb	r3, [r3, #29]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe fb40 	bl	800160c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d055      	beq.n	800304c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	22ca      	movs	r2, #202	@ 0xca
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2253      	movs	r2, #83	@ 0x53
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa49 	bl	8003448 <RTC_EnterInitMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d12c      	bne.n	800301a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68d2      	ldr	r2, [r2, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6919      	ldr	r1, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	041a      	lsls	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fa50 	bl	80034b6 <RTC_ExitInitMode>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d110      	bne.n	8003042 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	22ff      	movs	r2, #255	@ 0xff
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24
 800304a:	e001      	b.n	8003050 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003066:	b590      	push	{r4, r7, lr}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	7f1b      	ldrb	r3, [r3, #28]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_RTC_SetTime+0x1c>
 800307e:	2302      	movs	r3, #2
 8003080:	e087      	b.n	8003192 <HAL_RTC_SetTime+0x12c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2202      	movs	r2, #2
 800308c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d126      	bne.n	80030e2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa27 	bl	8003500 <RTC_ByteToBcd2>
 80030b2:	4603      	mov	r3, r0
 80030b4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	785b      	ldrb	r3, [r3, #1]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa20 	bl	8003500 <RTC_ByteToBcd2>
 80030c0:	4603      	mov	r3, r0
 80030c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80030c4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	789b      	ldrb	r3, [r3, #2]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fa18 	bl	8003500 <RTC_ByteToBcd2>
 80030d0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	78db      	ldrb	r3, [r3, #3]
 80030da:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e018      	b.n	8003114 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003102:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003108:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	78db      	ldrb	r3, [r3, #3]
 800310e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	22ca      	movs	r2, #202	@ 0xca
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2253      	movs	r2, #83	@ 0x53
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f98f 	bl	8003448 <RTC_EnterInitMode>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d120      	bne.n	8003176 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800313e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003142:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003152:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	431a      	orrs	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f9a2 	bl	80034b6 <RTC_ExitInitMode>
 8003172:	4603      	mov	r3, r0
 8003174:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	22ff      	movs	r2, #255	@ 0xff
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]

  return status;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
}
 8003192:	4618      	mov	r0, r3
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}

0800319a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80031cc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80031d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	0d9b      	lsrs	r3, r3, #22
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11a      	bne.n	800324c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f98e 	bl	800353c <RTC_Bcd2ToByte>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f985 	bl	800353c <RTC_Bcd2ToByte>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	789b      	ldrb	r3, [r3, #2]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f97c 	bl	800353c <RTC_Bcd2ToByte>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003256:	b590      	push	{r4, r7, lr}
 8003258:	b087      	sub	sp, #28
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	7f1b      	ldrb	r3, [r3, #28]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_RTC_SetDate+0x1c>
 800326e:	2302      	movs	r3, #2
 8003270:	e071      	b.n	8003356 <HAL_RTC_SetDate+0x100>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2202      	movs	r2, #2
 800327c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10e      	bne.n	80032a2 <HAL_RTC_SetDate+0x4c>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	f023 0310 	bic.w	r3, r3, #16
 8003298:	b2db      	uxtb	r3, r3
 800329a:	330a      	adds	r3, #10
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11c      	bne.n	80032e2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	78db      	ldrb	r3, [r3, #3]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f927 	bl	8003500 <RTC_ByteToBcd2>
 80032b2:	4603      	mov	r3, r0
 80032b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f920 	bl	8003500 <RTC_ByteToBcd2>
 80032c0:	4603      	mov	r3, r0
 80032c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	789b      	ldrb	r3, [r3, #2]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f918 	bl	8003500 <RTC_ByteToBcd2>
 80032d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e00e      	b.n	8003300 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	78db      	ldrb	r3, [r3, #3]
 80032e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80032ee:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80032f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	22ca      	movs	r2, #202	@ 0xca
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2253      	movs	r2, #83	@ 0x53
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f899 	bl	8003448 <RTC_EnterInitMode>
 8003316:	4603      	mov	r3, r0
 8003318:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10c      	bne.n	800333a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800332a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800332e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f8c0 	bl	80034b6 <RTC_ExitInitMode>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	22ff      	movs	r2, #255	@ 0xff
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]

  return status;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
}
 8003356:	4618      	mov	r0, r3
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}

0800335e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003378:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800337c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	0b5b      	lsrs	r3, r3, #13
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d11a      	bne.n	80033f2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f8bb 	bl	800353c <RTC_Bcd2ToByte>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f8b2 	bl	800353c <RTC_Bcd2ToByte>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	789b      	ldrb	r3, [r3, #2]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f8a9 	bl	800353c <RTC_Bcd2ToByte>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461a      	mov	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <HAL_RTC_WaitForSynchro+0x48>)
 800340e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003410:	f7fe fcb0 	bl	8001d74 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003416:	e009      	b.n	800342c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003418:	f7fe fcac 	bl	8001d74 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003426:	d901      	bls.n	800342c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e007      	b.n	800343c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ee      	beq.n	8003418 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	00013f5f 	.word	0x00013f5f

08003448 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d122      	bne.n	80034ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003474:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003476:	f7fe fc7d 	bl	8001d74 <HAL_GetTick>
 800347a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800347c:	e00c      	b.n	8003498 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800347e:	f7fe fc79 	bl	8001d74 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800348c:	d904      	bls.n	8003498 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2204      	movs	r2, #4
 8003492:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <RTC_EnterInitMode+0x64>
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d1e8      	bne.n	800347e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff8b 	bl	80033fc <HAL_RTC_WaitForSynchro>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2204      	movs	r2, #4
 80034f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800350e:	e005      	b.n	800351c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	3b0a      	subs	r3, #10
 800351a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b09      	cmp	r3, #9
 8003520:	d8f6      	bhi.n	8003510 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	b2da      	uxtb	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	4313      	orrs	r3, r2
 800352e:	b2db      	uxtb	r3, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4413      	add	r3, r2
 800356a:	b2db      	uxtb	r3, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe f860 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 f8e2 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e041      	b.n	80036ac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f839 	bl	80036b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 f893 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e048      	b.n	8003778 <HAL_TIM_OC_ConfigChannel+0xb0>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	d839      	bhi.n	8003768 <HAL_TIM_OC_ConfigChannel+0xa0>
 80036f4:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003769 	.word	0x08003769
 8003704:	08003769 	.word	0x08003769
 8003708:	08003769 	.word	0x08003769
 800370c:	0800373f 	.word	0x0800373f
 8003710:	08003769 	.word	0x08003769
 8003714:	08003769 	.word	0x08003769
 8003718:	08003769 	.word	0x08003769
 800371c:	0800374d 	.word	0x0800374d
 8003720:	08003769 	.word	0x08003769
 8003724:	08003769 	.word	0x08003769
 8003728:	08003769 	.word	0x08003769
 800372c:	0800375b 	.word	0x0800375b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f8a8 	bl	800388c <TIM_OC1_SetConfig>
      break;
 800373c:	e017      	b.n	800376e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f907 	bl	8003958 <TIM_OC2_SetConfig>
      break;
 800374a:	e010      	b.n	800376e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f96c 	bl	8003a30 <TIM_OC3_SetConfig>
      break;
 8003758:	e009      	b.n	800376e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f9cf 	bl	8003b04 <TIM_OC4_SetConfig>
      break;
 8003766:	e002      	b.n	800376e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a37      	ldr	r2, [pc, #220]	@ (8003870 <TIM_Base_SetConfig+0xf0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00f      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379e:	d00b      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a34      	ldr	r2, [pc, #208]	@ (8003874 <TIM_Base_SetConfig+0xf4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a33      	ldr	r2, [pc, #204]	@ (8003878 <TIM_Base_SetConfig+0xf8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a32      	ldr	r2, [pc, #200]	@ (800387c <TIM_Base_SetConfig+0xfc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <TIM_Base_SetConfig+0xf0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01b      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d8:	d017      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a25      	ldr	r2, [pc, #148]	@ (8003874 <TIM_Base_SetConfig+0xf4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a24      	ldr	r2, [pc, #144]	@ (8003878 <TIM_Base_SetConfig+0xf8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00f      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a23      	ldr	r2, [pc, #140]	@ (800387c <TIM_Base_SetConfig+0xfc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <TIM_Base_SetConfig+0x100>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <TIM_Base_SetConfig+0x104>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x8a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <TIM_Base_SetConfig+0x108>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a0c      	ldr	r2, [pc, #48]	@ (8003870 <TIM_Base_SetConfig+0xf0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d103      	bne.n	800384a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40000c00 	.word	0x40000c00
 8003880:	40014000 	.word	0x40014000
 8003884:	40014400 	.word	0x40014400
 8003888:	40014800 	.word	0x40014800

0800388c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 0201 	bic.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <TIM_OC1_SetConfig+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0308 	bic.w	r3, r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <TIM_OC1_SetConfig+0xc8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d111      	bne.n	800392e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40010000 	.word	0x40010000

08003958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 0210 	bic.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0320 	bic.w	r3, r3, #32
 80039a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <TIM_OC2_SetConfig+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <TIM_OC2_SetConfig+0xd4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000

08003a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <TIM_OC3_SetConfig+0xd0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a14      	ldr	r2, [pc, #80]	@ (8003b00 <TIM_OC3_SetConfig+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d113      	bne.n	8003ada <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40010000 	.word	0x40010000

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ba0 <TIM_OC4_SetConfig+0x9c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000

08003ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e042      	b.n	8003c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fd6c 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	@ 0x24
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fdd3 	bl	8004794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d175      	bne.n	8003d50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_UART_Transmit+0x2c>
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e06e      	b.n	8003d52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	@ 0x21
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c82:	f7fe f877 	bl	8001d74 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9c:	d108      	bne.n	8003cb0 <HAL_UART_Transmit+0x6c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e003      	b.n	8003cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb8:	e02e      	b.n	8003d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2180      	movs	r1, #128	@ 0x80
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fb37 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e03a      	b.n	8003d52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e007      	b.n	8003d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	3301      	adds	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1cb      	bne.n	8003cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2140      	movs	r1, #64	@ 0x40
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb03 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d112      	bne.n	8003d9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Receive_IT+0x26>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e00b      	b.n	8003d9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fb2a 	bl	80043ea <UART_Start_Receive_IT>
 8003d96:	4603      	mov	r3, r0
 8003d98:	e000      	b.n	8003d9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
  }
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b0ba      	sub	sp, #232	@ 0xe8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_UART_IRQHandler+0x66>
 8003df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fc07 	bl	8004616 <UART_Receive_IT>
      return;
 8003e08:	e273      	b.n	80042f2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80de 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x22c>
 8003e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80d1 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_UART_IRQHandler+0xae>
 8003e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	f043 0201 	orr.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_UART_IRQHandler+0xd2>
 8003e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f043 0202 	orr.w	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_UART_IRQHandler+0xf6>
 8003e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0204 	orr.w	r2, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d011      	beq.n	8003eca <HAL_UART_IRQHandler+0x126>
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f043 0208 	orr.w	r2, r3, #8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 820a 	beq.w	80042e8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x14e>
 8003ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fb92 	bl	8004616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b40      	cmp	r3, #64	@ 0x40
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <HAL_UART_IRQHandler+0x17a>
 8003f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d04f      	beq.n	8003fbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa9d 	bl	800445e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d141      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3314      	adds	r3, #20
 8003f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1d9      	bne.n	8003f32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d013      	beq.n	8003fae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8a:	4a8a      	ldr	r2, [pc, #552]	@ (80041b4 <HAL_UART_IRQHandler+0x410>)
 8003f8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe f89f 	bl	80020d6 <HAL_DMA_Abort_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	e00e      	b.n	8003fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9ac 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	e00a      	b.n	8003fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9a8 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	e006      	b.n	8003fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9a4 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fca:	e18d      	b.n	80042e8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fcc:	bf00      	nop
    return;
 8003fce:	e18b      	b.n	80042e8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	f040 8167 	bne.w	80042a8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8160 	beq.w	80042a8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8159 	beq.w	80042a8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	f040 80ce 	bne.w	80041b8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004028:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a9 	beq.w	8004184 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800403a:	429a      	cmp	r2, r3
 800403c:	f080 80a2 	bcs.w	8004184 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004046:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004052:	f000 8088 	beq.w	8004166 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800406c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800408e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800409a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1d9      	bne.n	8004056 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e1      	bne.n	80040a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004108:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e3      	bne.n	80040de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004136:	f023 0310 	bic.w	r3, r3, #16
 800413a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004148:	65ba      	str	r2, [r7, #88]	@ 0x58
 800414a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800414e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e3      	bne.n	8004124 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd ff48 	bl	8001ff6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	b29b      	uxth	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8cf 	bl	8004320 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004182:	e0b3      	b.n	80042ec <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800418c:	429a      	cmp	r2, r3
 800418e:	f040 80ad 	bne.w	80042ec <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800419c:	f040 80a6 	bne.w	80042ec <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8b7 	bl	8004320 <HAL_UARTEx_RxEventCallback>
      return;
 80041b2:	e09b      	b.n	80042ec <HAL_UART_IRQHandler+0x548>
 80041b4:	08004525 	.word	0x08004525
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 808e 	beq.w	80042f0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80041d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8089 	beq.w	80042f0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004202:	647a      	str	r2, [r7, #68]	@ 0x44
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e3      	bne.n	80041de <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3314      	adds	r3, #20
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	623b      	str	r3, [r7, #32]
   return(result);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800423a:	633a      	str	r2, [r7, #48]	@ 0x30
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e3      	bne.n	8004216 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004280:	61fa      	str	r2, [r7, #28]
 8004282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	617b      	str	r3, [r7, #20]
   return(result);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e3      	bne.n	800425c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800429a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f83d 	bl	8004320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a6:	e023      	b.n	80042f0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_UART_IRQHandler+0x524>
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f940 	bl	8004546 <UART_Transmit_IT>
    return;
 80042c6:	e014      	b.n	80042f2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_UART_IRQHandler+0x54e>
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f980 	bl	80045e6 <UART_EndTransmit_IT>
    return;
 80042e6:	e004      	b.n	80042f2 <HAL_UART_IRQHandler+0x54e>
    return;
 80042e8:	bf00      	nop
 80042ea:	e002      	b.n	80042f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80042f0:	bf00      	nop
  }
}
 80042f2:	37e8      	adds	r7, #232	@ 0xe8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e03b      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d037      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fd fd0f 	bl	8001d74 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e03a      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d020      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d01d      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d116      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f857 	bl	800445e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2208      	movs	r2, #8
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e00f      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d0b4      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2222      	movs	r2, #34	@ 0x22
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800442e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0220 	orr.w	r2, r2, #32
 800444e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b095      	sub	sp, #84	@ 0x54
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004486:	643a      	str	r2, [r7, #64]	@ 0x40
 8004488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800448c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0310 	bic.w	r3, r3, #16
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f6:	61ba      	str	r2, [r7, #24]
 80044f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	613b      	str	r3, [r7, #16]
   return(result);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004518:	bf00      	nop
 800451a:	3754      	adds	r7, #84	@ 0x54
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fee7 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b21      	cmp	r3, #33	@ 0x21
 8004558:	d13e      	bne.n	80045d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d114      	bne.n	800458e <UART_Transmit_IT+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d110      	bne.n	800458e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]
 800458c:	e008      	b.n	80045a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6211      	str	r1, [r2, #32]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fe76 	bl	80042f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b08c      	sub	sp, #48	@ 0x30
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b22      	cmp	r3, #34	@ 0x22
 8004630:	f040 80aa 	bne.w	8004788 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463c:	d115      	bne.n	800466a <UART_Receive_IT+0x54>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d111      	bne.n	800466a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	b29a      	uxth	r2, r3
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	629a      	str	r2, [r3, #40]	@ 0x28
 8004668:	e024      	b.n	80046b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004678:	d007      	beq.n	800468a <UART_Receive_IT+0x74>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <UART_Receive_IT+0x82>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e008      	b.n	80046aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4619      	mov	r1, r3
 80046c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d15d      	bne.n	8004784 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0220 	bic.w	r2, r2, #32
 80046d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	2b01      	cmp	r3, #1
 800470c:	d135      	bne.n	800477a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	613b      	str	r3, [r7, #16]
   return(result);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f023 0310 	bic.w	r3, r3, #16
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004734:	623a      	str	r2, [r7, #32]
 8004736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	69f9      	ldr	r1, [r7, #28]
 800473a:	6a3a      	ldr	r2, [r7, #32]
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	61bb      	str	r3, [r7, #24]
   return(result);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b10      	cmp	r3, #16
 8004754:	d10a      	bne.n	800476c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fdd4 	bl	8004320 <HAL_UARTEx_RxEventCallback>
 8004778:	e002      	b.n	8004780 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd f866 	bl	800184c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e002      	b.n	800478a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3730      	adds	r7, #48	@ 0x30
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b0c0      	sub	sp, #256	@ 0x100
 800479a:	af00      	add	r7, sp, #0
 800479c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	ea40 0301 	orr.w	r3, r0, r1
 80047bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047ec:	f021 010c 	bic.w	r1, r1, #12
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047fa:	430b      	orrs	r3, r1
 80047fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	6999      	ldr	r1, [r3, #24]
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	ea40 0301 	orr.w	r3, r0, r1
 800481a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b8f      	ldr	r3, [pc, #572]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004824:	429a      	cmp	r2, r3
 8004826:	d005      	beq.n	8004834 <UART_SetConfig+0xa0>
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a64 <UART_SetConfig+0x2d0>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d104      	bne.n	800483e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004834:	f7fe fa94 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8004838:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800483c:	e003      	b.n	8004846 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800483e:	f7fe fa7b 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8004842:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004850:	f040 810c 	bne.w	8004a6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004858:	2200      	movs	r2, #0
 800485a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800485e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004862:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004866:	4622      	mov	r2, r4
 8004868:	462b      	mov	r3, r5
 800486a:	1891      	adds	r1, r2, r2
 800486c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800486e:	415b      	adcs	r3, r3
 8004870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004876:	4621      	mov	r1, r4
 8004878:	eb12 0801 	adds.w	r8, r2, r1
 800487c:	4629      	mov	r1, r5
 800487e:	eb43 0901 	adc.w	r9, r3, r1
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800488e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004896:	4690      	mov	r8, r2
 8004898:	4699      	mov	r9, r3
 800489a:	4623      	mov	r3, r4
 800489c:	eb18 0303 	adds.w	r3, r8, r3
 80048a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048a4:	462b      	mov	r3, r5
 80048a6:	eb49 0303 	adc.w	r3, r9, r3
 80048aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048c2:	460b      	mov	r3, r1
 80048c4:	18db      	adds	r3, r3, r3
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c8:	4613      	mov	r3, r2
 80048ca:	eb42 0303 	adc.w	r3, r2, r3
 80048ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80048d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048d8:	f7fb fcda 	bl	8000290 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4b61      	ldr	r3, [pc, #388]	@ (8004a68 <UART_SetConfig+0x2d4>)
 80048e2:	fba3 2302 	umull	r2, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	011c      	lsls	r4, r3, #4
 80048ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004904:	415b      	adcs	r3, r3
 8004906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800490c:	4641      	mov	r1, r8
 800490e:	eb12 0a01 	adds.w	sl, r2, r1
 8004912:	4649      	mov	r1, r9
 8004914:	eb43 0b01 	adc.w	fp, r3, r1
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004924:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492c:	4692      	mov	sl, r2
 800492e:	469b      	mov	fp, r3
 8004930:	4643      	mov	r3, r8
 8004932:	eb1a 0303 	adds.w	r3, sl, r3
 8004936:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800493a:	464b      	mov	r3, r9
 800493c:	eb4b 0303 	adc.w	r3, fp, r3
 8004940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004950:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	643b      	str	r3, [r7, #64]	@ 0x40
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	647b      	str	r3, [r7, #68]	@ 0x44
 8004966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800496a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800496e:	f7fb fc8f 	bl	8000290 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4611      	mov	r1, r2
 8004978:	4b3b      	ldr	r3, [pc, #236]	@ (8004a68 <UART_SetConfig+0x2d4>)
 800497a:	fba3 2301 	umull	r2, r3, r3, r1
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2264      	movs	r2, #100	@ 0x64
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	1acb      	subs	r3, r1, r3
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800498e:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <UART_SetConfig+0x2d4>)
 8004990:	fba3 2302 	umull	r2, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800499c:	441c      	add	r4, r3
 800499e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049b8:	415b      	adcs	r3, r3
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049c0:	4641      	mov	r1, r8
 80049c2:	1851      	adds	r1, r2, r1
 80049c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80049c6:	4649      	mov	r1, r9
 80049c8:	414b      	adcs	r3, r1
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049d8:	4659      	mov	r1, fp
 80049da:	00cb      	lsls	r3, r1, #3
 80049dc:	4651      	mov	r1, sl
 80049de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049e2:	4651      	mov	r1, sl
 80049e4:	00ca      	lsls	r2, r1, #3
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	4642      	mov	r2, r8
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049f4:	464b      	mov	r3, r9
 80049f6:	460a      	mov	r2, r1
 80049f8:	eb42 0303 	adc.w	r3, r2, r3
 80049fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a14:	460b      	mov	r3, r1
 8004a16:	18db      	adds	r3, r3, r3
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a2a:	f7fb fc31 	bl	8000290 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <UART_SetConfig+0x2d4>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	@ 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	3332      	adds	r3, #50	@ 0x32
 8004a46:	4a08      	ldr	r2, [pc, #32]	@ (8004a68 <UART_SetConfig+0x2d4>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	f003 0207 	and.w	r2, r3, #7
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4422      	add	r2, r4
 8004a5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a5c:	e106      	b.n	8004c6c <UART_SetConfig+0x4d8>
 8004a5e:	bf00      	nop
 8004a60:	40011000 	.word	0x40011000
 8004a64:	40011400 	.word	0x40011400
 8004a68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a7e:	4642      	mov	r2, r8
 8004a80:	464b      	mov	r3, r9
 8004a82:	1891      	adds	r1, r2, r2
 8004a84:	6239      	str	r1, [r7, #32]
 8004a86:	415b      	adcs	r3, r3
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a8e:	4641      	mov	r1, r8
 8004a90:	1854      	adds	r4, r2, r1
 8004a92:	4649      	mov	r1, r9
 8004a94:	eb43 0501 	adc.w	r5, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	00eb      	lsls	r3, r5, #3
 8004aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa6:	00e2      	lsls	r2, r4, #3
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	461d      	mov	r5, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	18e3      	adds	r3, r4, r3
 8004ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	eb45 0303 	adc.w	r3, r5, r3
 8004aba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ada:	4629      	mov	r1, r5
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	4621      	mov	r1, r4
 8004ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	008a      	lsls	r2, r1, #2
 8004ae8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aec:	f7fb fbd0 	bl	8000290 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b60      	ldr	r3, [pc, #384]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004af6:	fba3 2302 	umull	r2, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	011c      	lsls	r4, r3, #4
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	61b9      	str	r1, [r7, #24]
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b20:	4641      	mov	r1, r8
 8004b22:	1851      	adds	r1, r2, r1
 8004b24:	6139      	str	r1, [r7, #16]
 8004b26:	4649      	mov	r1, r9
 8004b28:	414b      	adcs	r3, r1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b38:	4659      	mov	r1, fp
 8004b3a:	00cb      	lsls	r3, r1, #3
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b42:	4651      	mov	r1, sl
 8004b44:	00ca      	lsls	r2, r1, #3
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b54:	464b      	mov	r3, r9
 8004b56:	460a      	mov	r2, r1
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b78:	4649      	mov	r1, r9
 8004b7a:	008b      	lsls	r3, r1, #2
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b82:	4641      	mov	r1, r8
 8004b84:	008a      	lsls	r2, r1, #2
 8004b86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b8a:	f7fb fb81 	bl	8000290 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	4b38      	ldr	r3, [pc, #224]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004b96:	fba3 2301 	umull	r2, r3, r3, r1
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2264      	movs	r2, #100	@ 0x64
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	1acb      	subs	r3, r1, r3
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	3332      	adds	r3, #50	@ 0x32
 8004ba8:	4a33      	ldr	r2, [pc, #204]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb4:	441c      	add	r4, r3
 8004bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bba:	2200      	movs	r2, #0
 8004bbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	1851      	adds	r1, r2, r1
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	4649      	mov	r1, r9
 8004bdc:	414b      	adcs	r3, r1
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bec:	4659      	mov	r1, fp
 8004bee:	00cb      	lsls	r3, r1, #3
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	00ca      	lsls	r2, r1, #3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4642      	mov	r2, r8
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c06:	464b      	mov	r3, r9
 8004c08:	460a      	mov	r2, r1
 8004c0a:	eb42 0303 	adc.w	r3, r2, r3
 8004c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c28:	4649      	mov	r1, r9
 8004c2a:	008b      	lsls	r3, r1, #2
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c32:	4641      	mov	r1, r8
 8004c34:	008a      	lsls	r2, r1, #2
 8004c36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c3a:	f7fb fb29 	bl	8000290 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004c44:	fba3 1302 	umull	r1, r3, r3, r2
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	2164      	movs	r1, #100	@ 0x64
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	3332      	adds	r3, #50	@ 0x32
 8004c56:	4a08      	ldr	r2, [pc, #32]	@ (8004c78 <UART_SetConfig+0x4e4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	f003 020f 	and.w	r2, r3, #15
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4422      	add	r2, r4
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c72:	46bd      	mov	sp, r7
 8004c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c78:	51eb851f 	.word	0x51eb851f

08004c7c <siprintf>:
 8004c7c:	b40e      	push	{r1, r2, r3}
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	b09d      	sub	sp, #116	@ 0x74
 8004c82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c84:	9002      	str	r0, [sp, #8]
 8004c86:	9006      	str	r0, [sp, #24]
 8004c88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c8c:	480a      	ldr	r0, [pc, #40]	@ (8004cb8 <siprintf+0x3c>)
 8004c8e:	9107      	str	r1, [sp, #28]
 8004c90:	9104      	str	r1, [sp, #16]
 8004c92:	490a      	ldr	r1, [pc, #40]	@ (8004cbc <siprintf+0x40>)
 8004c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c98:	9105      	str	r1, [sp, #20]
 8004c9a:	2400      	movs	r4, #0
 8004c9c:	a902      	add	r1, sp, #8
 8004c9e:	6800      	ldr	r0, [r0, #0]
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ca4:	f000 f994 	bl	8004fd0 <_svfiprintf_r>
 8004ca8:	9b02      	ldr	r3, [sp, #8]
 8004caa:	701c      	strb	r4, [r3, #0]
 8004cac:	b01d      	add	sp, #116	@ 0x74
 8004cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb2:	b003      	add	sp, #12
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000074 	.word	0x20000074
 8004cbc:	ffff0208 	.word	0xffff0208

08004cc0 <memset>:
 8004cc0:	4402      	add	r2, r0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d100      	bne.n	8004cca <memset+0xa>
 8004cc8:	4770      	bx	lr
 8004cca:	f803 1b01 	strb.w	r1, [r3], #1
 8004cce:	e7f9      	b.n	8004cc4 <memset+0x4>

08004cd0 <__errno>:
 8004cd0:	4b01      	ldr	r3, [pc, #4]	@ (8004cd8 <__errno+0x8>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000074 	.word	0x20000074

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4d0d      	ldr	r5, [pc, #52]	@ (8004d14 <__libc_init_array+0x38>)
 8004ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8004d18 <__libc_init_array+0x3c>)
 8004ce2:	1b64      	subs	r4, r4, r5
 8004ce4:	10a4      	asrs	r4, r4, #2
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	42a6      	cmp	r6, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	4d0b      	ldr	r5, [pc, #44]	@ (8004d1c <__libc_init_array+0x40>)
 8004cee:	4c0c      	ldr	r4, [pc, #48]	@ (8004d20 <__libc_init_array+0x44>)
 8004cf0:	f000 fc64 	bl	80055bc <_init>
 8004cf4:	1b64      	subs	r4, r4, r5
 8004cf6:	10a4      	asrs	r4, r4, #2
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	42a6      	cmp	r6, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d04:	4798      	blx	r3
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0e:	4798      	blx	r3
 8004d10:	3601      	adds	r6, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	08005ce8 	.word	0x08005ce8
 8004d18:	08005ce8 	.word	0x08005ce8
 8004d1c:	08005ce8 	.word	0x08005ce8
 8004d20:	08005cec 	.word	0x08005cec

08004d24 <__retarget_lock_acquire_recursive>:
 8004d24:	4770      	bx	lr

08004d26 <__retarget_lock_release_recursive>:
 8004d26:	4770      	bx	lr

08004d28 <_free_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	d041      	beq.n	8004db4 <_free_r+0x8c>
 8004d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d34:	1f0c      	subs	r4, r1, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfb8      	it	lt
 8004d3a:	18e4      	addlt	r4, r4, r3
 8004d3c:	f000 f8e0 	bl	8004f00 <__malloc_lock>
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <_free_r+0x90>)
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	b933      	cbnz	r3, 8004d54 <_free_r+0x2c>
 8004d46:	6063      	str	r3, [r4, #4]
 8004d48:	6014      	str	r4, [r2, #0]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d50:	f000 b8dc 	b.w	8004f0c <__malloc_unlock>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d908      	bls.n	8004d6a <_free_r+0x42>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	1821      	adds	r1, r4, r0
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf01      	itttt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	1809      	addeq	r1, r1, r0
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	e7ed      	b.n	8004d46 <_free_r+0x1e>
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b10b      	cbz	r3, 8004d74 <_free_r+0x4c>
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d9fa      	bls.n	8004d6a <_free_r+0x42>
 8004d74:	6811      	ldr	r1, [r2, #0]
 8004d76:	1850      	adds	r0, r2, r1
 8004d78:	42a0      	cmp	r0, r4
 8004d7a:	d10b      	bne.n	8004d94 <_free_r+0x6c>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	4401      	add	r1, r0
 8004d80:	1850      	adds	r0, r2, r1
 8004d82:	4283      	cmp	r3, r0
 8004d84:	6011      	str	r1, [r2, #0]
 8004d86:	d1e0      	bne.n	8004d4a <_free_r+0x22>
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	6053      	str	r3, [r2, #4]
 8004d8e:	4408      	add	r0, r1
 8004d90:	6010      	str	r0, [r2, #0]
 8004d92:	e7da      	b.n	8004d4a <_free_r+0x22>
 8004d94:	d902      	bls.n	8004d9c <_free_r+0x74>
 8004d96:	230c      	movs	r3, #12
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	e7d6      	b.n	8004d4a <_free_r+0x22>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	1821      	adds	r1, r4, r0
 8004da0:	428b      	cmp	r3, r1
 8004da2:	bf04      	itt	eq
 8004da4:	6819      	ldreq	r1, [r3, #0]
 8004da6:	685b      	ldreq	r3, [r3, #4]
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	bf04      	itt	eq
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	6054      	str	r4, [r2, #4]
 8004db2:	e7ca      	b.n	8004d4a <_free_r+0x22>
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
 8004db6:	bf00      	nop
 8004db8:	20001bf0 	.word	0x20001bf0

08004dbc <sbrk_aligned>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8004dfc <sbrk_aligned+0x40>)
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	6831      	ldr	r1, [r6, #0]
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	b911      	cbnz	r1, 8004dce <sbrk_aligned+0x12>
 8004dc8:	f000 fba4 	bl	8005514 <_sbrk_r>
 8004dcc:	6030      	str	r0, [r6, #0]
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 fb9f 	bl	8005514 <_sbrk_r>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	d103      	bne.n	8004de2 <sbrk_aligned+0x26>
 8004dda:	f04f 34ff 	mov.w	r4, #4294967295
 8004dde:	4620      	mov	r0, r4
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
 8004de2:	1cc4      	adds	r4, r0, #3
 8004de4:	f024 0403 	bic.w	r4, r4, #3
 8004de8:	42a0      	cmp	r0, r4
 8004dea:	d0f8      	beq.n	8004dde <sbrk_aligned+0x22>
 8004dec:	1a21      	subs	r1, r4, r0
 8004dee:	4628      	mov	r0, r5
 8004df0:	f000 fb90 	bl	8005514 <_sbrk_r>
 8004df4:	3001      	adds	r0, #1
 8004df6:	d1f2      	bne.n	8004dde <sbrk_aligned+0x22>
 8004df8:	e7ef      	b.n	8004dda <sbrk_aligned+0x1e>
 8004dfa:	bf00      	nop
 8004dfc:	20001bec 	.word	0x20001bec

08004e00 <_malloc_r>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	1ccd      	adds	r5, r1, #3
 8004e06:	f025 0503 	bic.w	r5, r5, #3
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	2d0c      	cmp	r5, #12
 8004e0e:	bf38      	it	cc
 8004e10:	250c      	movcc	r5, #12
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	4606      	mov	r6, r0
 8004e16:	db01      	blt.n	8004e1c <_malloc_r+0x1c>
 8004e18:	42a9      	cmp	r1, r5
 8004e1a:	d904      	bls.n	8004e26 <_malloc_r+0x26>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	2000      	movs	r0, #0
 8004e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004efc <_malloc_r+0xfc>
 8004e2a:	f000 f869 	bl	8004f00 <__malloc_lock>
 8004e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e32:	461c      	mov	r4, r3
 8004e34:	bb44      	cbnz	r4, 8004e88 <_malloc_r+0x88>
 8004e36:	4629      	mov	r1, r5
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff ffbf 	bl	8004dbc <sbrk_aligned>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	4604      	mov	r4, r0
 8004e42:	d158      	bne.n	8004ef6 <_malloc_r+0xf6>
 8004e44:	f8d8 4000 	ldr.w	r4, [r8]
 8004e48:	4627      	mov	r7, r4
 8004e4a:	2f00      	cmp	r7, #0
 8004e4c:	d143      	bne.n	8004ed6 <_malloc_r+0xd6>
 8004e4e:	2c00      	cmp	r4, #0
 8004e50:	d04b      	beq.n	8004eea <_malloc_r+0xea>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	4639      	mov	r1, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	eb04 0903 	add.w	r9, r4, r3
 8004e5c:	f000 fb5a 	bl	8005514 <_sbrk_r>
 8004e60:	4581      	cmp	r9, r0
 8004e62:	d142      	bne.n	8004eea <_malloc_r+0xea>
 8004e64:	6821      	ldr	r1, [r4, #0]
 8004e66:	1a6d      	subs	r5, r5, r1
 8004e68:	4629      	mov	r1, r5
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7ff ffa6 	bl	8004dbc <sbrk_aligned>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d03a      	beq.n	8004eea <_malloc_r+0xea>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	442b      	add	r3, r5
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	bb62      	cbnz	r2, 8004edc <_malloc_r+0xdc>
 8004e82:	f8c8 7000 	str.w	r7, [r8]
 8004e86:	e00f      	b.n	8004ea8 <_malloc_r+0xa8>
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	1b52      	subs	r2, r2, r5
 8004e8c:	d420      	bmi.n	8004ed0 <_malloc_r+0xd0>
 8004e8e:	2a0b      	cmp	r2, #11
 8004e90:	d917      	bls.n	8004ec2 <_malloc_r+0xc2>
 8004e92:	1961      	adds	r1, r4, r5
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	6025      	str	r5, [r4, #0]
 8004e98:	bf18      	it	ne
 8004e9a:	6059      	strne	r1, [r3, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	bf08      	it	eq
 8004ea0:	f8c8 1000 	streq.w	r1, [r8]
 8004ea4:	5162      	str	r2, [r4, r5]
 8004ea6:	604b      	str	r3, [r1, #4]
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f000 f82f 	bl	8004f0c <__malloc_unlock>
 8004eae:	f104 000b 	add.w	r0, r4, #11
 8004eb2:	1d23      	adds	r3, r4, #4
 8004eb4:	f020 0007 	bic.w	r0, r0, #7
 8004eb8:	1ac2      	subs	r2, r0, r3
 8004eba:	bf1c      	itt	ne
 8004ebc:	1a1b      	subne	r3, r3, r0
 8004ebe:	50a3      	strne	r3, [r4, r2]
 8004ec0:	e7af      	b.n	8004e22 <_malloc_r+0x22>
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	bf0c      	ite	eq
 8004ec8:	f8c8 2000 	streq.w	r2, [r8]
 8004ecc:	605a      	strne	r2, [r3, #4]
 8004ece:	e7eb      	b.n	8004ea8 <_malloc_r+0xa8>
 8004ed0:	4623      	mov	r3, r4
 8004ed2:	6864      	ldr	r4, [r4, #4]
 8004ed4:	e7ae      	b.n	8004e34 <_malloc_r+0x34>
 8004ed6:	463c      	mov	r4, r7
 8004ed8:	687f      	ldr	r7, [r7, #4]
 8004eda:	e7b6      	b.n	8004e4a <_malloc_r+0x4a>
 8004edc:	461a      	mov	r2, r3
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	d1fb      	bne.n	8004edc <_malloc_r+0xdc>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6053      	str	r3, [r2, #4]
 8004ee8:	e7de      	b.n	8004ea8 <_malloc_r+0xa8>
 8004eea:	230c      	movs	r3, #12
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f000 f80c 	bl	8004f0c <__malloc_unlock>
 8004ef4:	e794      	b.n	8004e20 <_malloc_r+0x20>
 8004ef6:	6005      	str	r5, [r0, #0]
 8004ef8:	e7d6      	b.n	8004ea8 <_malloc_r+0xa8>
 8004efa:	bf00      	nop
 8004efc:	20001bf0 	.word	0x20001bf0

08004f00 <__malloc_lock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__malloc_lock+0x8>)
 8004f02:	f7ff bf0f 	b.w	8004d24 <__retarget_lock_acquire_recursive>
 8004f06:	bf00      	nop
 8004f08:	20001be8 	.word	0x20001be8

08004f0c <__malloc_unlock>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	@ (8004f14 <__malloc_unlock+0x8>)
 8004f0e:	f7ff bf0a 	b.w	8004d26 <__retarget_lock_release_recursive>
 8004f12:	bf00      	nop
 8004f14:	20001be8 	.word	0x20001be8

08004f18 <__ssputs_r>:
 8004f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	688e      	ldr	r6, [r1, #8]
 8004f1e:	461f      	mov	r7, r3
 8004f20:	42be      	cmp	r6, r7
 8004f22:	680b      	ldr	r3, [r1, #0]
 8004f24:	4682      	mov	sl, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	4690      	mov	r8, r2
 8004f2a:	d82d      	bhi.n	8004f88 <__ssputs_r+0x70>
 8004f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f34:	d026      	beq.n	8004f84 <__ssputs_r+0x6c>
 8004f36:	6965      	ldr	r5, [r4, #20]
 8004f38:	6909      	ldr	r1, [r1, #16]
 8004f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f3e:	eba3 0901 	sub.w	r9, r3, r1
 8004f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f46:	1c7b      	adds	r3, r7, #1
 8004f48:	444b      	add	r3, r9
 8004f4a:	106d      	asrs	r5, r5, #1
 8004f4c:	429d      	cmp	r5, r3
 8004f4e:	bf38      	it	cc
 8004f50:	461d      	movcc	r5, r3
 8004f52:	0553      	lsls	r3, r2, #21
 8004f54:	d527      	bpl.n	8004fa6 <__ssputs_r+0x8e>
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7ff ff52 	bl	8004e00 <_malloc_r>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	b360      	cbz	r0, 8004fba <__ssputs_r+0xa2>
 8004f60:	6921      	ldr	r1, [r4, #16]
 8004f62:	464a      	mov	r2, r9
 8004f64:	f000 fae6 	bl	8005534 <memcpy>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	6126      	str	r6, [r4, #16]
 8004f76:	6165      	str	r5, [r4, #20]
 8004f78:	444e      	add	r6, r9
 8004f7a:	eba5 0509 	sub.w	r5, r5, r9
 8004f7e:	6026      	str	r6, [r4, #0]
 8004f80:	60a5      	str	r5, [r4, #8]
 8004f82:	463e      	mov	r6, r7
 8004f84:	42be      	cmp	r6, r7
 8004f86:	d900      	bls.n	8004f8a <__ssputs_r+0x72>
 8004f88:	463e      	mov	r6, r7
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4641      	mov	r1, r8
 8004f90:	f000 faa6 	bl	80054e0 <memmove>
 8004f94:	68a3      	ldr	r3, [r4, #8]
 8004f96:	1b9b      	subs	r3, r3, r6
 8004f98:	60a3      	str	r3, [r4, #8]
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	4433      	add	r3, r6
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa6:	462a      	mov	r2, r5
 8004fa8:	f000 fad2 	bl	8005550 <_realloc_r>
 8004fac:	4606      	mov	r6, r0
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d1e0      	bne.n	8004f74 <__ssputs_r+0x5c>
 8004fb2:	6921      	ldr	r1, [r4, #16]
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	f7ff feb7 	bl	8004d28 <_free_r>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	f8ca 3000 	str.w	r3, [sl]
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e7e9      	b.n	8004fa2 <__ssputs_r+0x8a>
	...

08004fd0 <_svfiprintf_r>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	4698      	mov	r8, r3
 8004fd6:	898b      	ldrh	r3, [r1, #12]
 8004fd8:	061b      	lsls	r3, r3, #24
 8004fda:	b09d      	sub	sp, #116	@ 0x74
 8004fdc:	4607      	mov	r7, r0
 8004fde:	460d      	mov	r5, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	d510      	bpl.n	8005006 <_svfiprintf_r+0x36>
 8004fe4:	690b      	ldr	r3, [r1, #16]
 8004fe6:	b973      	cbnz	r3, 8005006 <_svfiprintf_r+0x36>
 8004fe8:	2140      	movs	r1, #64	@ 0x40
 8004fea:	f7ff ff09 	bl	8004e00 <_malloc_r>
 8004fee:	6028      	str	r0, [r5, #0]
 8004ff0:	6128      	str	r0, [r5, #16]
 8004ff2:	b930      	cbnz	r0, 8005002 <_svfiprintf_r+0x32>
 8004ff4:	230c      	movs	r3, #12
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	b01d      	add	sp, #116	@ 0x74
 8004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005002:	2340      	movs	r3, #64	@ 0x40
 8005004:	616b      	str	r3, [r5, #20]
 8005006:	2300      	movs	r3, #0
 8005008:	9309      	str	r3, [sp, #36]	@ 0x24
 800500a:	2320      	movs	r3, #32
 800500c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005010:	f8cd 800c 	str.w	r8, [sp, #12]
 8005014:	2330      	movs	r3, #48	@ 0x30
 8005016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051b4 <_svfiprintf_r+0x1e4>
 800501a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800501e:	f04f 0901 	mov.w	r9, #1
 8005022:	4623      	mov	r3, r4
 8005024:	469a      	mov	sl, r3
 8005026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800502a:	b10a      	cbz	r2, 8005030 <_svfiprintf_r+0x60>
 800502c:	2a25      	cmp	r2, #37	@ 0x25
 800502e:	d1f9      	bne.n	8005024 <_svfiprintf_r+0x54>
 8005030:	ebba 0b04 	subs.w	fp, sl, r4
 8005034:	d00b      	beq.n	800504e <_svfiprintf_r+0x7e>
 8005036:	465b      	mov	r3, fp
 8005038:	4622      	mov	r2, r4
 800503a:	4629      	mov	r1, r5
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff ff6b 	bl	8004f18 <__ssputs_r>
 8005042:	3001      	adds	r0, #1
 8005044:	f000 80a7 	beq.w	8005196 <_svfiprintf_r+0x1c6>
 8005048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800504a:	445a      	add	r2, fp
 800504c:	9209      	str	r2, [sp, #36]	@ 0x24
 800504e:	f89a 3000 	ldrb.w	r3, [sl]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 809f 	beq.w	8005196 <_svfiprintf_r+0x1c6>
 8005058:	2300      	movs	r3, #0
 800505a:	f04f 32ff 	mov.w	r2, #4294967295
 800505e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005062:	f10a 0a01 	add.w	sl, sl, #1
 8005066:	9304      	str	r3, [sp, #16]
 8005068:	9307      	str	r3, [sp, #28]
 800506a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800506e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005070:	4654      	mov	r4, sl
 8005072:	2205      	movs	r2, #5
 8005074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005078:	484e      	ldr	r0, [pc, #312]	@ (80051b4 <_svfiprintf_r+0x1e4>)
 800507a:	f7fb f8b9 	bl	80001f0 <memchr>
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	b9d8      	cbnz	r0, 80050ba <_svfiprintf_r+0xea>
 8005082:	06d0      	lsls	r0, r2, #27
 8005084:	bf44      	itt	mi
 8005086:	2320      	movmi	r3, #32
 8005088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508c:	0711      	lsls	r1, r2, #28
 800508e:	bf44      	itt	mi
 8005090:	232b      	movmi	r3, #43	@ 0x2b
 8005092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005096:	f89a 3000 	ldrb.w	r3, [sl]
 800509a:	2b2a      	cmp	r3, #42	@ 0x2a
 800509c:	d015      	beq.n	80050ca <_svfiprintf_r+0xfa>
 800509e:	9a07      	ldr	r2, [sp, #28]
 80050a0:	4654      	mov	r4, sl
 80050a2:	2000      	movs	r0, #0
 80050a4:	f04f 0c0a 	mov.w	ip, #10
 80050a8:	4621      	mov	r1, r4
 80050aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ae:	3b30      	subs	r3, #48	@ 0x30
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	d94b      	bls.n	800514c <_svfiprintf_r+0x17c>
 80050b4:	b1b0      	cbz	r0, 80050e4 <_svfiprintf_r+0x114>
 80050b6:	9207      	str	r2, [sp, #28]
 80050b8:	e014      	b.n	80050e4 <_svfiprintf_r+0x114>
 80050ba:	eba0 0308 	sub.w	r3, r0, r8
 80050be:	fa09 f303 	lsl.w	r3, r9, r3
 80050c2:	4313      	orrs	r3, r2
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	46a2      	mov	sl, r4
 80050c8:	e7d2      	b.n	8005070 <_svfiprintf_r+0xa0>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	1d19      	adds	r1, r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	9103      	str	r1, [sp, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfbb      	ittet	lt
 80050d6:	425b      	neglt	r3, r3
 80050d8:	f042 0202 	orrlt.w	r2, r2, #2
 80050dc:	9307      	strge	r3, [sp, #28]
 80050de:	9307      	strlt	r3, [sp, #28]
 80050e0:	bfb8      	it	lt
 80050e2:	9204      	strlt	r2, [sp, #16]
 80050e4:	7823      	ldrb	r3, [r4, #0]
 80050e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e8:	d10a      	bne.n	8005100 <_svfiprintf_r+0x130>
 80050ea:	7863      	ldrb	r3, [r4, #1]
 80050ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ee:	d132      	bne.n	8005156 <_svfiprintf_r+0x186>
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	9203      	str	r2, [sp, #12]
 80050f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050fc:	3402      	adds	r4, #2
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051c4 <_svfiprintf_r+0x1f4>
 8005104:	7821      	ldrb	r1, [r4, #0]
 8005106:	2203      	movs	r2, #3
 8005108:	4650      	mov	r0, sl
 800510a:	f7fb f871 	bl	80001f0 <memchr>
 800510e:	b138      	cbz	r0, 8005120 <_svfiprintf_r+0x150>
 8005110:	9b04      	ldr	r3, [sp, #16]
 8005112:	eba0 000a 	sub.w	r0, r0, sl
 8005116:	2240      	movs	r2, #64	@ 0x40
 8005118:	4082      	lsls	r2, r0
 800511a:	4313      	orrs	r3, r2
 800511c:	3401      	adds	r4, #1
 800511e:	9304      	str	r3, [sp, #16]
 8005120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005124:	4824      	ldr	r0, [pc, #144]	@ (80051b8 <_svfiprintf_r+0x1e8>)
 8005126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800512a:	2206      	movs	r2, #6
 800512c:	f7fb f860 	bl	80001f0 <memchr>
 8005130:	2800      	cmp	r0, #0
 8005132:	d036      	beq.n	80051a2 <_svfiprintf_r+0x1d2>
 8005134:	4b21      	ldr	r3, [pc, #132]	@ (80051bc <_svfiprintf_r+0x1ec>)
 8005136:	bb1b      	cbnz	r3, 8005180 <_svfiprintf_r+0x1b0>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	3307      	adds	r3, #7
 800513c:	f023 0307 	bic.w	r3, r3, #7
 8005140:	3308      	adds	r3, #8
 8005142:	9303      	str	r3, [sp, #12]
 8005144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005146:	4433      	add	r3, r6
 8005148:	9309      	str	r3, [sp, #36]	@ 0x24
 800514a:	e76a      	b.n	8005022 <_svfiprintf_r+0x52>
 800514c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005150:	460c      	mov	r4, r1
 8005152:	2001      	movs	r0, #1
 8005154:	e7a8      	b.n	80050a8 <_svfiprintf_r+0xd8>
 8005156:	2300      	movs	r3, #0
 8005158:	3401      	adds	r4, #1
 800515a:	9305      	str	r3, [sp, #20]
 800515c:	4619      	mov	r1, r3
 800515e:	f04f 0c0a 	mov.w	ip, #10
 8005162:	4620      	mov	r0, r4
 8005164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005168:	3a30      	subs	r2, #48	@ 0x30
 800516a:	2a09      	cmp	r2, #9
 800516c:	d903      	bls.n	8005176 <_svfiprintf_r+0x1a6>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0c6      	beq.n	8005100 <_svfiprintf_r+0x130>
 8005172:	9105      	str	r1, [sp, #20]
 8005174:	e7c4      	b.n	8005100 <_svfiprintf_r+0x130>
 8005176:	fb0c 2101 	mla	r1, ip, r1, r2
 800517a:	4604      	mov	r4, r0
 800517c:	2301      	movs	r3, #1
 800517e:	e7f0      	b.n	8005162 <_svfiprintf_r+0x192>
 8005180:	ab03      	add	r3, sp, #12
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	462a      	mov	r2, r5
 8005186:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <_svfiprintf_r+0x1f0>)
 8005188:	a904      	add	r1, sp, #16
 800518a:	4638      	mov	r0, r7
 800518c:	f3af 8000 	nop.w
 8005190:	1c42      	adds	r2, r0, #1
 8005192:	4606      	mov	r6, r0
 8005194:	d1d6      	bne.n	8005144 <_svfiprintf_r+0x174>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	065b      	lsls	r3, r3, #25
 800519a:	f53f af2d 	bmi.w	8004ff8 <_svfiprintf_r+0x28>
 800519e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051a0:	e72c      	b.n	8004ffc <_svfiprintf_r+0x2c>
 80051a2:	ab03      	add	r3, sp, #12
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	462a      	mov	r2, r5
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <_svfiprintf_r+0x1f0>)
 80051aa:	a904      	add	r1, sp, #16
 80051ac:	4638      	mov	r0, r7
 80051ae:	f000 f879 	bl	80052a4 <_printf_i>
 80051b2:	e7ed      	b.n	8005190 <_svfiprintf_r+0x1c0>
 80051b4:	08005cac 	.word	0x08005cac
 80051b8:	08005cb6 	.word	0x08005cb6
 80051bc:	00000000 	.word	0x00000000
 80051c0:	08004f19 	.word	0x08004f19
 80051c4:	08005cb2 	.word	0x08005cb2

080051c8 <_printf_common>:
 80051c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	4616      	mov	r6, r2
 80051ce:	4698      	mov	r8, r3
 80051d0:	688a      	ldr	r2, [r1, #8]
 80051d2:	690b      	ldr	r3, [r1, #16]
 80051d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051d8:	4293      	cmp	r3, r2
 80051da:	bfb8      	it	lt
 80051dc:	4613      	movlt	r3, r2
 80051de:	6033      	str	r3, [r6, #0]
 80051e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051e4:	4607      	mov	r7, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	b10a      	cbz	r2, 80051ee <_printf_common+0x26>
 80051ea:	3301      	adds	r3, #1
 80051ec:	6033      	str	r3, [r6, #0]
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	0699      	lsls	r1, r3, #26
 80051f2:	bf42      	ittt	mi
 80051f4:	6833      	ldrmi	r3, [r6, #0]
 80051f6:	3302      	addmi	r3, #2
 80051f8:	6033      	strmi	r3, [r6, #0]
 80051fa:	6825      	ldr	r5, [r4, #0]
 80051fc:	f015 0506 	ands.w	r5, r5, #6
 8005200:	d106      	bne.n	8005210 <_printf_common+0x48>
 8005202:	f104 0a19 	add.w	sl, r4, #25
 8005206:	68e3      	ldr	r3, [r4, #12]
 8005208:	6832      	ldr	r2, [r6, #0]
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	42ab      	cmp	r3, r5
 800520e:	dc26      	bgt.n	800525e <_printf_common+0x96>
 8005210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	3b00      	subs	r3, #0
 8005218:	bf18      	it	ne
 800521a:	2301      	movne	r3, #1
 800521c:	0692      	lsls	r2, r2, #26
 800521e:	d42b      	bmi.n	8005278 <_printf_common+0xb0>
 8005220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005224:	4641      	mov	r1, r8
 8005226:	4638      	mov	r0, r7
 8005228:	47c8      	blx	r9
 800522a:	3001      	adds	r0, #1
 800522c:	d01e      	beq.n	800526c <_printf_common+0xa4>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	6922      	ldr	r2, [r4, #16]
 8005232:	f003 0306 	and.w	r3, r3, #6
 8005236:	2b04      	cmp	r3, #4
 8005238:	bf02      	ittt	eq
 800523a:	68e5      	ldreq	r5, [r4, #12]
 800523c:	6833      	ldreq	r3, [r6, #0]
 800523e:	1aed      	subeq	r5, r5, r3
 8005240:	68a3      	ldr	r3, [r4, #8]
 8005242:	bf0c      	ite	eq
 8005244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005248:	2500      	movne	r5, #0
 800524a:	4293      	cmp	r3, r2
 800524c:	bfc4      	itt	gt
 800524e:	1a9b      	subgt	r3, r3, r2
 8005250:	18ed      	addgt	r5, r5, r3
 8005252:	2600      	movs	r6, #0
 8005254:	341a      	adds	r4, #26
 8005256:	42b5      	cmp	r5, r6
 8005258:	d11a      	bne.n	8005290 <_printf_common+0xc8>
 800525a:	2000      	movs	r0, #0
 800525c:	e008      	b.n	8005270 <_printf_common+0xa8>
 800525e:	2301      	movs	r3, #1
 8005260:	4652      	mov	r2, sl
 8005262:	4641      	mov	r1, r8
 8005264:	4638      	mov	r0, r7
 8005266:	47c8      	blx	r9
 8005268:	3001      	adds	r0, #1
 800526a:	d103      	bne.n	8005274 <_printf_common+0xac>
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
 8005270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005274:	3501      	adds	r5, #1
 8005276:	e7c6      	b.n	8005206 <_printf_common+0x3e>
 8005278:	18e1      	adds	r1, r4, r3
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	2030      	movs	r0, #48	@ 0x30
 800527e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005282:	4422      	add	r2, r4
 8005284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800528c:	3302      	adds	r3, #2
 800528e:	e7c7      	b.n	8005220 <_printf_common+0x58>
 8005290:	2301      	movs	r3, #1
 8005292:	4622      	mov	r2, r4
 8005294:	4641      	mov	r1, r8
 8005296:	4638      	mov	r0, r7
 8005298:	47c8      	blx	r9
 800529a:	3001      	adds	r0, #1
 800529c:	d0e6      	beq.n	800526c <_printf_common+0xa4>
 800529e:	3601      	adds	r6, #1
 80052a0:	e7d9      	b.n	8005256 <_printf_common+0x8e>
	...

080052a4 <_printf_i>:
 80052a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	7e0f      	ldrb	r7, [r1, #24]
 80052aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052ac:	2f78      	cmp	r7, #120	@ 0x78
 80052ae:	4691      	mov	r9, r2
 80052b0:	4680      	mov	r8, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	469a      	mov	sl, r3
 80052b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052ba:	d807      	bhi.n	80052cc <_printf_i+0x28>
 80052bc:	2f62      	cmp	r7, #98	@ 0x62
 80052be:	d80a      	bhi.n	80052d6 <_printf_i+0x32>
 80052c0:	2f00      	cmp	r7, #0
 80052c2:	f000 80d1 	beq.w	8005468 <_printf_i+0x1c4>
 80052c6:	2f58      	cmp	r7, #88	@ 0x58
 80052c8:	f000 80b8 	beq.w	800543c <_printf_i+0x198>
 80052cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052d4:	e03a      	b.n	800534c <_printf_i+0xa8>
 80052d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052da:	2b15      	cmp	r3, #21
 80052dc:	d8f6      	bhi.n	80052cc <_printf_i+0x28>
 80052de:	a101      	add	r1, pc, #4	@ (adr r1, 80052e4 <_printf_i+0x40>)
 80052e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e4:	0800533d 	.word	0x0800533d
 80052e8:	08005351 	.word	0x08005351
 80052ec:	080052cd 	.word	0x080052cd
 80052f0:	080052cd 	.word	0x080052cd
 80052f4:	080052cd 	.word	0x080052cd
 80052f8:	080052cd 	.word	0x080052cd
 80052fc:	08005351 	.word	0x08005351
 8005300:	080052cd 	.word	0x080052cd
 8005304:	080052cd 	.word	0x080052cd
 8005308:	080052cd 	.word	0x080052cd
 800530c:	080052cd 	.word	0x080052cd
 8005310:	0800544f 	.word	0x0800544f
 8005314:	0800537b 	.word	0x0800537b
 8005318:	08005409 	.word	0x08005409
 800531c:	080052cd 	.word	0x080052cd
 8005320:	080052cd 	.word	0x080052cd
 8005324:	08005471 	.word	0x08005471
 8005328:	080052cd 	.word	0x080052cd
 800532c:	0800537b 	.word	0x0800537b
 8005330:	080052cd 	.word	0x080052cd
 8005334:	080052cd 	.word	0x080052cd
 8005338:	08005411 	.word	0x08005411
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6032      	str	r2, [r6, #0]
 8005344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800534c:	2301      	movs	r3, #1
 800534e:	e09c      	b.n	800548a <_printf_i+0x1e6>
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	6820      	ldr	r0, [r4, #0]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	6031      	str	r1, [r6, #0]
 8005358:	0606      	lsls	r6, r0, #24
 800535a:	d501      	bpl.n	8005360 <_printf_i+0xbc>
 800535c:	681d      	ldr	r5, [r3, #0]
 800535e:	e003      	b.n	8005368 <_printf_i+0xc4>
 8005360:	0645      	lsls	r5, r0, #25
 8005362:	d5fb      	bpl.n	800535c <_printf_i+0xb8>
 8005364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005368:	2d00      	cmp	r5, #0
 800536a:	da03      	bge.n	8005374 <_printf_i+0xd0>
 800536c:	232d      	movs	r3, #45	@ 0x2d
 800536e:	426d      	negs	r5, r5
 8005370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005374:	4858      	ldr	r0, [pc, #352]	@ (80054d8 <_printf_i+0x234>)
 8005376:	230a      	movs	r3, #10
 8005378:	e011      	b.n	800539e <_printf_i+0xfa>
 800537a:	6821      	ldr	r1, [r4, #0]
 800537c:	6833      	ldr	r3, [r6, #0]
 800537e:	0608      	lsls	r0, r1, #24
 8005380:	f853 5b04 	ldr.w	r5, [r3], #4
 8005384:	d402      	bmi.n	800538c <_printf_i+0xe8>
 8005386:	0649      	lsls	r1, r1, #25
 8005388:	bf48      	it	mi
 800538a:	b2ad      	uxthmi	r5, r5
 800538c:	2f6f      	cmp	r7, #111	@ 0x6f
 800538e:	4852      	ldr	r0, [pc, #328]	@ (80054d8 <_printf_i+0x234>)
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	bf14      	ite	ne
 8005394:	230a      	movne	r3, #10
 8005396:	2308      	moveq	r3, #8
 8005398:	2100      	movs	r1, #0
 800539a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800539e:	6866      	ldr	r6, [r4, #4]
 80053a0:	60a6      	str	r6, [r4, #8]
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	db05      	blt.n	80053b2 <_printf_i+0x10e>
 80053a6:	6821      	ldr	r1, [r4, #0]
 80053a8:	432e      	orrs	r6, r5
 80053aa:	f021 0104 	bic.w	r1, r1, #4
 80053ae:	6021      	str	r1, [r4, #0]
 80053b0:	d04b      	beq.n	800544a <_printf_i+0x1a6>
 80053b2:	4616      	mov	r6, r2
 80053b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80053b8:	fb03 5711 	mls	r7, r3, r1, r5
 80053bc:	5dc7      	ldrb	r7, [r0, r7]
 80053be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053c2:	462f      	mov	r7, r5
 80053c4:	42bb      	cmp	r3, r7
 80053c6:	460d      	mov	r5, r1
 80053c8:	d9f4      	bls.n	80053b4 <_printf_i+0x110>
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d10b      	bne.n	80053e6 <_printf_i+0x142>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	07df      	lsls	r7, r3, #31
 80053d2:	d508      	bpl.n	80053e6 <_printf_i+0x142>
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	6861      	ldr	r1, [r4, #4]
 80053d8:	4299      	cmp	r1, r3
 80053da:	bfde      	ittt	le
 80053dc:	2330      	movle	r3, #48	@ 0x30
 80053de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053e6:	1b92      	subs	r2, r2, r6
 80053e8:	6122      	str	r2, [r4, #16]
 80053ea:	f8cd a000 	str.w	sl, [sp]
 80053ee:	464b      	mov	r3, r9
 80053f0:	aa03      	add	r2, sp, #12
 80053f2:	4621      	mov	r1, r4
 80053f4:	4640      	mov	r0, r8
 80053f6:	f7ff fee7 	bl	80051c8 <_printf_common>
 80053fa:	3001      	adds	r0, #1
 80053fc:	d14a      	bne.n	8005494 <_printf_i+0x1f0>
 80053fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005402:	b004      	add	sp, #16
 8005404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f043 0320 	orr.w	r3, r3, #32
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	4832      	ldr	r0, [pc, #200]	@ (80054dc <_printf_i+0x238>)
 8005412:	2778      	movs	r7, #120	@ 0x78
 8005414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	6831      	ldr	r1, [r6, #0]
 800541c:	061f      	lsls	r7, r3, #24
 800541e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005422:	d402      	bmi.n	800542a <_printf_i+0x186>
 8005424:	065f      	lsls	r7, r3, #25
 8005426:	bf48      	it	mi
 8005428:	b2ad      	uxthmi	r5, r5
 800542a:	6031      	str	r1, [r6, #0]
 800542c:	07d9      	lsls	r1, r3, #31
 800542e:	bf44      	itt	mi
 8005430:	f043 0320 	orrmi.w	r3, r3, #32
 8005434:	6023      	strmi	r3, [r4, #0]
 8005436:	b11d      	cbz	r5, 8005440 <_printf_i+0x19c>
 8005438:	2310      	movs	r3, #16
 800543a:	e7ad      	b.n	8005398 <_printf_i+0xf4>
 800543c:	4826      	ldr	r0, [pc, #152]	@ (80054d8 <_printf_i+0x234>)
 800543e:	e7e9      	b.n	8005414 <_printf_i+0x170>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	f023 0320 	bic.w	r3, r3, #32
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	e7f6      	b.n	8005438 <_printf_i+0x194>
 800544a:	4616      	mov	r6, r2
 800544c:	e7bd      	b.n	80053ca <_printf_i+0x126>
 800544e:	6833      	ldr	r3, [r6, #0]
 8005450:	6825      	ldr	r5, [r4, #0]
 8005452:	6961      	ldr	r1, [r4, #20]
 8005454:	1d18      	adds	r0, r3, #4
 8005456:	6030      	str	r0, [r6, #0]
 8005458:	062e      	lsls	r6, r5, #24
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	d501      	bpl.n	8005462 <_printf_i+0x1be>
 800545e:	6019      	str	r1, [r3, #0]
 8005460:	e002      	b.n	8005468 <_printf_i+0x1c4>
 8005462:	0668      	lsls	r0, r5, #25
 8005464:	d5fb      	bpl.n	800545e <_printf_i+0x1ba>
 8005466:	8019      	strh	r1, [r3, #0]
 8005468:	2300      	movs	r3, #0
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	4616      	mov	r6, r2
 800546e:	e7bc      	b.n	80053ea <_printf_i+0x146>
 8005470:	6833      	ldr	r3, [r6, #0]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	6032      	str	r2, [r6, #0]
 8005476:	681e      	ldr	r6, [r3, #0]
 8005478:	6862      	ldr	r2, [r4, #4]
 800547a:	2100      	movs	r1, #0
 800547c:	4630      	mov	r0, r6
 800547e:	f7fa feb7 	bl	80001f0 <memchr>
 8005482:	b108      	cbz	r0, 8005488 <_printf_i+0x1e4>
 8005484:	1b80      	subs	r0, r0, r6
 8005486:	6060      	str	r0, [r4, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	2300      	movs	r3, #0
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005492:	e7aa      	b.n	80053ea <_printf_i+0x146>
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	4632      	mov	r2, r6
 8005498:	4649      	mov	r1, r9
 800549a:	4640      	mov	r0, r8
 800549c:	47d0      	blx	sl
 800549e:	3001      	adds	r0, #1
 80054a0:	d0ad      	beq.n	80053fe <_printf_i+0x15a>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	079b      	lsls	r3, r3, #30
 80054a6:	d413      	bmi.n	80054d0 <_printf_i+0x22c>
 80054a8:	68e0      	ldr	r0, [r4, #12]
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	4298      	cmp	r0, r3
 80054ae:	bfb8      	it	lt
 80054b0:	4618      	movlt	r0, r3
 80054b2:	e7a6      	b.n	8005402 <_printf_i+0x15e>
 80054b4:	2301      	movs	r3, #1
 80054b6:	4632      	mov	r2, r6
 80054b8:	4649      	mov	r1, r9
 80054ba:	4640      	mov	r0, r8
 80054bc:	47d0      	blx	sl
 80054be:	3001      	adds	r0, #1
 80054c0:	d09d      	beq.n	80053fe <_printf_i+0x15a>
 80054c2:	3501      	adds	r5, #1
 80054c4:	68e3      	ldr	r3, [r4, #12]
 80054c6:	9903      	ldr	r1, [sp, #12]
 80054c8:	1a5b      	subs	r3, r3, r1
 80054ca:	42ab      	cmp	r3, r5
 80054cc:	dcf2      	bgt.n	80054b4 <_printf_i+0x210>
 80054ce:	e7eb      	b.n	80054a8 <_printf_i+0x204>
 80054d0:	2500      	movs	r5, #0
 80054d2:	f104 0619 	add.w	r6, r4, #25
 80054d6:	e7f5      	b.n	80054c4 <_printf_i+0x220>
 80054d8:	08005cbd 	.word	0x08005cbd
 80054dc:	08005cce 	.word	0x08005cce

080054e0 <memmove>:
 80054e0:	4288      	cmp	r0, r1
 80054e2:	b510      	push	{r4, lr}
 80054e4:	eb01 0402 	add.w	r4, r1, r2
 80054e8:	d902      	bls.n	80054f0 <memmove+0x10>
 80054ea:	4284      	cmp	r4, r0
 80054ec:	4623      	mov	r3, r4
 80054ee:	d807      	bhi.n	8005500 <memmove+0x20>
 80054f0:	1e43      	subs	r3, r0, #1
 80054f2:	42a1      	cmp	r1, r4
 80054f4:	d008      	beq.n	8005508 <memmove+0x28>
 80054f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054fe:	e7f8      	b.n	80054f2 <memmove+0x12>
 8005500:	4402      	add	r2, r0
 8005502:	4601      	mov	r1, r0
 8005504:	428a      	cmp	r2, r1
 8005506:	d100      	bne.n	800550a <memmove+0x2a>
 8005508:	bd10      	pop	{r4, pc}
 800550a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800550e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005512:	e7f7      	b.n	8005504 <memmove+0x24>

08005514 <_sbrk_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d06      	ldr	r5, [pc, #24]	@ (8005530 <_sbrk_r+0x1c>)
 8005518:	2300      	movs	r3, #0
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	f7fc f94c 	bl	80017bc <_sbrk>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_sbrk_r+0x1a>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_sbrk_r+0x1a>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	20001be4 	.word	0x20001be4

08005534 <memcpy>:
 8005534:	440a      	add	r2, r1
 8005536:	4291      	cmp	r1, r2
 8005538:	f100 33ff 	add.w	r3, r0, #4294967295
 800553c:	d100      	bne.n	8005540 <memcpy+0xc>
 800553e:	4770      	bx	lr
 8005540:	b510      	push	{r4, lr}
 8005542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005546:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554a:	4291      	cmp	r1, r2
 800554c:	d1f9      	bne.n	8005542 <memcpy+0xe>
 800554e:	bd10      	pop	{r4, pc}

08005550 <_realloc_r>:
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	4607      	mov	r7, r0
 8005556:	4614      	mov	r4, r2
 8005558:	460d      	mov	r5, r1
 800555a:	b921      	cbnz	r1, 8005566 <_realloc_r+0x16>
 800555c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	4611      	mov	r1, r2
 8005562:	f7ff bc4d 	b.w	8004e00 <_malloc_r>
 8005566:	b92a      	cbnz	r2, 8005574 <_realloc_r+0x24>
 8005568:	f7ff fbde 	bl	8004d28 <_free_r>
 800556c:	4625      	mov	r5, r4
 800556e:	4628      	mov	r0, r5
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	f000 f81a 	bl	80055ac <_malloc_usable_size_r>
 8005578:	4284      	cmp	r4, r0
 800557a:	4606      	mov	r6, r0
 800557c:	d802      	bhi.n	8005584 <_realloc_r+0x34>
 800557e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005582:	d8f4      	bhi.n	800556e <_realloc_r+0x1e>
 8005584:	4621      	mov	r1, r4
 8005586:	4638      	mov	r0, r7
 8005588:	f7ff fc3a 	bl	8004e00 <_malloc_r>
 800558c:	4680      	mov	r8, r0
 800558e:	b908      	cbnz	r0, 8005594 <_realloc_r+0x44>
 8005590:	4645      	mov	r5, r8
 8005592:	e7ec      	b.n	800556e <_realloc_r+0x1e>
 8005594:	42b4      	cmp	r4, r6
 8005596:	4622      	mov	r2, r4
 8005598:	4629      	mov	r1, r5
 800559a:	bf28      	it	cs
 800559c:	4632      	movcs	r2, r6
 800559e:	f7ff ffc9 	bl	8005534 <memcpy>
 80055a2:	4629      	mov	r1, r5
 80055a4:	4638      	mov	r0, r7
 80055a6:	f7ff fbbf 	bl	8004d28 <_free_r>
 80055aa:	e7f1      	b.n	8005590 <_realloc_r+0x40>

080055ac <_malloc_usable_size_r>:
 80055ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b0:	1f18      	subs	r0, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfbc      	itt	lt
 80055b6:	580b      	ldrlt	r3, [r1, r0]
 80055b8:	18c0      	addlt	r0, r0, r3
 80055ba:	4770      	bx	lr

080055bc <_init>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr

080055c8 <_fini>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr
