
DMA_ledmatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008210  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  080083b0  080083b0  000093b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086b4  080086b4  000096b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086bc  080086bc  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000096bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086c0  080086c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080086c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a94  20000064  08008728  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014af8  08008728  0000aaf8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001119b  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b79  00000000  00000000  0001b229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  0001ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003210  00000000  00000000  0001f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014549  00000000  00000000  00022b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f11  00000000  00000000  00037083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbf94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000cbfd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d096c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008398 	.word	0x08008398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08008398 	.word	0x08008398

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_frsub>:
 80005f8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005fc:	e002      	b.n	8000604 <__addsf3>
 80005fe:	bf00      	nop

08000600 <__aeabi_fsub>:
 8000600:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000604 <__addsf3>:
 8000604:	0042      	lsls	r2, r0, #1
 8000606:	bf1f      	itttt	ne
 8000608:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800060c:	ea92 0f03 	teqne	r2, r3
 8000610:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000614:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000618:	d06a      	beq.n	80006f0 <__addsf3+0xec>
 800061a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000622:	bfc1      	itttt	gt
 8000624:	18d2      	addgt	r2, r2, r3
 8000626:	4041      	eorgt	r1, r0
 8000628:	4048      	eorgt	r0, r1
 800062a:	4041      	eorgt	r1, r0
 800062c:	bfb8      	it	lt
 800062e:	425b      	neglt	r3, r3
 8000630:	2b19      	cmp	r3, #25
 8000632:	bf88      	it	hi
 8000634:	4770      	bxhi	lr
 8000636:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800063e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800064a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800064e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000652:	bf18      	it	ne
 8000654:	4249      	negne	r1, r1
 8000656:	ea92 0f03 	teq	r2, r3
 800065a:	d03f      	beq.n	80006dc <__addsf3+0xd8>
 800065c:	f1a2 0201 	sub.w	r2, r2, #1
 8000660:	fa41 fc03 	asr.w	ip, r1, r3
 8000664:	eb10 000c 	adds.w	r0, r0, ip
 8000668:	f1c3 0320 	rsb	r3, r3, #32
 800066c:	fa01 f103 	lsl.w	r1, r1, r3
 8000670:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000674:	d502      	bpl.n	800067c <__addsf3+0x78>
 8000676:	4249      	negs	r1, r1
 8000678:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800067c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000680:	d313      	bcc.n	80006aa <__addsf3+0xa6>
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000686:	d306      	bcc.n	8000696 <__addsf3+0x92>
 8000688:	0840      	lsrs	r0, r0, #1
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	f102 0201 	add.w	r2, r2, #1
 8000692:	2afe      	cmp	r2, #254	@ 0xfe
 8000694:	d251      	bcs.n	800073a <__addsf3+0x136>
 8000696:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800069a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800069e:	bf08      	it	eq
 80006a0:	f020 0001 	biceq.w	r0, r0, #1
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	4770      	bx	lr
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	eb40 0000 	adc.w	r0, r0, r0
 80006b0:	3a01      	subs	r2, #1
 80006b2:	bf28      	it	cs
 80006b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006b8:	d2ed      	bcs.n	8000696 <__addsf3+0x92>
 80006ba:	fab0 fc80 	clz	ip, r0
 80006be:	f1ac 0c08 	sub.w	ip, ip, #8
 80006c2:	ebb2 020c 	subs.w	r2, r2, ip
 80006c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ca:	bfaa      	itet	ge
 80006cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d0:	4252      	neglt	r2, r2
 80006d2:	4318      	orrge	r0, r3
 80006d4:	bfbc      	itt	lt
 80006d6:	40d0      	lsrlt	r0, r2
 80006d8:	4318      	orrlt	r0, r3
 80006da:	4770      	bx	lr
 80006dc:	f092 0f00 	teq	r2, #0
 80006e0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006e4:	bf06      	itte	eq
 80006e6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ea:	3201      	addeq	r2, #1
 80006ec:	3b01      	subne	r3, #1
 80006ee:	e7b5      	b.n	800065c <__addsf3+0x58>
 80006f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f8:	bf18      	it	ne
 80006fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006fe:	d021      	beq.n	8000744 <__addsf3+0x140>
 8000700:	ea92 0f03 	teq	r2, r3
 8000704:	d004      	beq.n	8000710 <__addsf3+0x10c>
 8000706:	f092 0f00 	teq	r2, #0
 800070a:	bf08      	it	eq
 800070c:	4608      	moveq	r0, r1
 800070e:	4770      	bx	lr
 8000710:	ea90 0f01 	teq	r0, r1
 8000714:	bf1c      	itt	ne
 8000716:	2000      	movne	r0, #0
 8000718:	4770      	bxne	lr
 800071a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800071e:	d104      	bne.n	800072a <__addsf3+0x126>
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	bf28      	it	cs
 8000724:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000728:	4770      	bx	lr
 800072a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800072e:	bf3c      	itt	cc
 8000730:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000734:	4770      	bxcc	lr
 8000736:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800073a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800073e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000742:	4770      	bx	lr
 8000744:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000748:	bf16      	itet	ne
 800074a:	4608      	movne	r0, r1
 800074c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000750:	4601      	movne	r1, r0
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	bf06      	itte	eq
 8000756:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800075a:	ea90 0f01 	teqeq	r0, r1
 800075e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000762:	4770      	bx	lr

08000764 <__aeabi_ui2f>:
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e004      	b.n	8000774 <__aeabi_i2f+0x8>
 800076a:	bf00      	nop

0800076c <__aeabi_i2f>:
 800076c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000770:	bf48      	it	mi
 8000772:	4240      	negmi	r0, r0
 8000774:	ea5f 0c00 	movs.w	ip, r0
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000780:	4601      	mov	r1, r0
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	e01c      	b.n	80007c2 <__aeabi_l2f+0x2a>

08000788 <__aeabi_ul2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	e00a      	b.n	80007ac <__aeabi_l2f+0x14>
 8000796:	bf00      	nop

08000798 <__aeabi_l2f>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__aeabi_l2f+0x14>
 80007a6:	4240      	negs	r0, r0
 80007a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ac:	ea5f 0c01 	movs.w	ip, r1
 80007b0:	bf02      	ittt	eq
 80007b2:	4684      	moveq	ip, r0
 80007b4:	4601      	moveq	r1, r0
 80007b6:	2000      	moveq	r0, #0
 80007b8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80007bc:	bf08      	it	eq
 80007be:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007c6:	fabc f28c 	clz	r2, ip
 80007ca:	3a08      	subs	r2, #8
 80007cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d0:	db10      	blt.n	80007f4 <__aeabi_l2f+0x5c>
 80007d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d6:	4463      	add	r3, ip
 80007d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007e4:	fa20 f202 	lsr.w	r2, r0, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	f020 0001 	biceq.w	r0, r0, #1
 80007f2:	4770      	bx	lr
 80007f4:	f102 0220 	add.w	r2, r2, #32
 80007f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007fc:	f1c2 0220 	rsb	r2, r2, #32
 8000800:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000804:	fa21 f202 	lsr.w	r2, r1, r2
 8000808:	eb43 0002 	adc.w	r0, r3, r2
 800080c:	bf08      	it	eq
 800080e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000812:	4770      	bx	lr

08000814 <__aeabi_fmul>:
 8000814:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000818:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800081c:	bf1e      	ittt	ne
 800081e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000822:	ea92 0f0c 	teqne	r2, ip
 8000826:	ea93 0f0c 	teqne	r3, ip
 800082a:	d06f      	beq.n	800090c <__aeabi_fmul+0xf8>
 800082c:	441a      	add	r2, r3
 800082e:	ea80 0c01 	eor.w	ip, r0, r1
 8000832:	0240      	lsls	r0, r0, #9
 8000834:	bf18      	it	ne
 8000836:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800083a:	d01e      	beq.n	800087a <__aeabi_fmul+0x66>
 800083c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000840:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000844:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000848:	fba0 3101 	umull	r3, r1, r0, r1
 800084c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000850:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000854:	bf3e      	ittt	cc
 8000856:	0049      	lslcc	r1, r1, #1
 8000858:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800085c:	005b      	lslcc	r3, r3, #1
 800085e:	ea40 0001 	orr.w	r0, r0, r1
 8000862:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000866:	2afd      	cmp	r2, #253	@ 0xfd
 8000868:	d81d      	bhi.n	80008a6 <__aeabi_fmul+0x92>
 800086a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	4770      	bx	lr
 800087a:	f090 0f00 	teq	r0, #0
 800087e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000882:	bf08      	it	eq
 8000884:	0249      	lsleq	r1, r1, #9
 8000886:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800088a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800088e:	3a7f      	subs	r2, #127	@ 0x7f
 8000890:	bfc2      	ittt	gt
 8000892:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000896:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800089a:	4770      	bxgt	lr
 800089c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	3a01      	subs	r2, #1
 80008a6:	dc5d      	bgt.n	8000964 <__aeabi_fmul+0x150>
 80008a8:	f112 0f19 	cmn.w	r2, #25
 80008ac:	bfdc      	itt	le
 80008ae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80008b2:	4770      	bxle	lr
 80008b4:	f1c2 0200 	rsb	r2, r2, #0
 80008b8:	0041      	lsls	r1, r0, #1
 80008ba:	fa21 f102 	lsr.w	r1, r1, r2
 80008be:	f1c2 0220 	rsb	r2, r2, #32
 80008c2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008c6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008ca:	f140 0000 	adc.w	r0, r0, #0
 80008ce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008d2:	bf08      	it	eq
 80008d4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008d8:	4770      	bx	lr
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008e2:	bf02      	ittt	eq
 80008e4:	0040      	lsleq	r0, r0, #1
 80008e6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ea:	3a01      	subeq	r2, #1
 80008ec:	d0f9      	beq.n	80008e2 <__aeabi_fmul+0xce>
 80008ee:	ea40 000c 	orr.w	r0, r0, ip
 80008f2:	f093 0f00 	teq	r3, #0
 80008f6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008fa:	bf02      	ittt	eq
 80008fc:	0049      	lsleq	r1, r1, #1
 80008fe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000902:	3b01      	subeq	r3, #1
 8000904:	d0f9      	beq.n	80008fa <__aeabi_fmul+0xe6>
 8000906:	ea41 010c 	orr.w	r1, r1, ip
 800090a:	e78f      	b.n	800082c <__aeabi_fmul+0x18>
 800090c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000910:	ea92 0f0c 	teq	r2, ip
 8000914:	bf18      	it	ne
 8000916:	ea93 0f0c 	teqne	r3, ip
 800091a:	d00a      	beq.n	8000932 <__aeabi_fmul+0x11e>
 800091c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000920:	bf18      	it	ne
 8000922:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000926:	d1d8      	bne.n	80008da <__aeabi_fmul+0xc6>
 8000928:	ea80 0001 	eor.w	r0, r0, r1
 800092c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000930:	4770      	bx	lr
 8000932:	f090 0f00 	teq	r0, #0
 8000936:	bf17      	itett	ne
 8000938:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800093c:	4608      	moveq	r0, r1
 800093e:	f091 0f00 	teqne	r1, #0
 8000942:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000946:	d014      	beq.n	8000972 <__aeabi_fmul+0x15e>
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d101      	bne.n	8000952 <__aeabi_fmul+0x13e>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	d10f      	bne.n	8000972 <__aeabi_fmul+0x15e>
 8000952:	ea93 0f0c 	teq	r3, ip
 8000956:	d103      	bne.n	8000960 <__aeabi_fmul+0x14c>
 8000958:	024b      	lsls	r3, r1, #9
 800095a:	bf18      	it	ne
 800095c:	4608      	movne	r0, r1
 800095e:	d108      	bne.n	8000972 <__aeabi_fmul+0x15e>
 8000960:	ea80 0001 	eor.w	r0, r0, r1
 8000964:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000968:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800096c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000970:	4770      	bx	lr
 8000972:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bx	lr

0800097c <__aeabi_fdiv>:
 800097c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000980:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000984:	bf1e      	ittt	ne
 8000986:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800098a:	ea92 0f0c 	teqne	r2, ip
 800098e:	ea93 0f0c 	teqne	r3, ip
 8000992:	d069      	beq.n	8000a68 <__aeabi_fdiv+0xec>
 8000994:	eba2 0203 	sub.w	r2, r2, r3
 8000998:	ea80 0c01 	eor.w	ip, r0, r1
 800099c:	0249      	lsls	r1, r1, #9
 800099e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009a2:	d037      	beq.n	8000a14 <__aeabi_fdiv+0x98>
 80009a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009a8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009ac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009b4:	428b      	cmp	r3, r1
 80009b6:	bf38      	it	cc
 80009b8:	005b      	lslcc	r3, r3, #1
 80009ba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80009be:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009c2:	428b      	cmp	r3, r1
 80009c4:	bf24      	itt	cs
 80009c6:	1a5b      	subcs	r3, r3, r1
 80009c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009cc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009d0:	bf24      	itt	cs
 80009d2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009d6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009da:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009de:	bf24      	itt	cs
 80009e0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009ec:	bf24      	itt	cs
 80009ee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009f2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009fe:	d1e0      	bne.n	80009c2 <__aeabi_fdiv+0x46>
 8000a00:	2afd      	cmp	r2, #253	@ 0xfd
 8000a02:	f63f af50 	bhi.w	80008a6 <__aeabi_fmul+0x92>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a1c:	327f      	adds	r2, #127	@ 0x7f
 8000a1e:	bfc2      	ittt	gt
 8000a20:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a28:	4770      	bxgt	lr
 8000a2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	3a01      	subs	r2, #1
 8000a34:	e737      	b.n	80008a6 <__aeabi_fmul+0x92>
 8000a36:	f092 0f00 	teq	r2, #0
 8000a3a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a3e:	bf02      	ittt	eq
 8000a40:	0040      	lsleq	r0, r0, #1
 8000a42:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a46:	3a01      	subeq	r2, #1
 8000a48:	d0f9      	beq.n	8000a3e <__aeabi_fdiv+0xc2>
 8000a4a:	ea40 000c 	orr.w	r0, r0, ip
 8000a4e:	f093 0f00 	teq	r3, #0
 8000a52:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0049      	lsleq	r1, r1, #1
 8000a5a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a5e:	3b01      	subeq	r3, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fdiv+0xda>
 8000a62:	ea41 010c 	orr.w	r1, r1, ip
 8000a66:	e795      	b.n	8000994 <__aeabi_fdiv+0x18>
 8000a68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a6c:	ea92 0f0c 	teq	r2, ip
 8000a70:	d108      	bne.n	8000a84 <__aeabi_fdiv+0x108>
 8000a72:	0242      	lsls	r2, r0, #9
 8000a74:	f47f af7d 	bne.w	8000972 <__aeabi_fmul+0x15e>
 8000a78:	ea93 0f0c 	teq	r3, ip
 8000a7c:	f47f af70 	bne.w	8000960 <__aeabi_fmul+0x14c>
 8000a80:	4608      	mov	r0, r1
 8000a82:	e776      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000a84:	ea93 0f0c 	teq	r3, ip
 8000a88:	d104      	bne.n	8000a94 <__aeabi_fdiv+0x118>
 8000a8a:	024b      	lsls	r3, r1, #9
 8000a8c:	f43f af4c 	beq.w	8000928 <__aeabi_fmul+0x114>
 8000a90:	4608      	mov	r0, r1
 8000a92:	e76e      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9e:	d1ca      	bne.n	8000a36 <__aeabi_fdiv+0xba>
 8000aa0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000aa4:	f47f af5c 	bne.w	8000960 <__aeabi_fmul+0x14c>
 8000aa8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000aac:	f47f af3c 	bne.w	8000928 <__aeabi_fmul+0x114>
 8000ab0:	e75f      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000ab2:	bf00      	nop

08000ab4 <__gesf2>:
 8000ab4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ab8:	e006      	b.n	8000ac8 <__cmpsf2+0x4>
 8000aba:	bf00      	nop

08000abc <__lesf2>:
 8000abc:	f04f 0c01 	mov.w	ip, #1
 8000ac0:	e002      	b.n	8000ac8 <__cmpsf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__cmpsf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000acc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d011      	beq.n	8000b04 <__cmpsf2+0x40>
 8000ae0:	b001      	add	sp, #4
 8000ae2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ae6:	bf18      	it	ne
 8000ae8:	ea90 0f01 	teqne	r0, r1
 8000aec:	bf58      	it	pl
 8000aee:	ebb2 0003 	subspl.w	r0, r2, r3
 8000af2:	bf88      	it	hi
 8000af4:	17c8      	asrhi	r0, r1, #31
 8000af6:	bf38      	it	cc
 8000af8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000afc:	bf18      	it	ne
 8000afe:	f040 0001 	orrne.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b08:	d102      	bne.n	8000b10 <__cmpsf2+0x4c>
 8000b0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b0e:	d105      	bne.n	8000b1c <__cmpsf2+0x58>
 8000b10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b14:	d1e4      	bne.n	8000ae0 <__cmpsf2+0x1c>
 8000b16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b1a:	d0e1      	beq.n	8000ae0 <__cmpsf2+0x1c>
 8000b1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_cfrcmple>:
 8000b24:	4684      	mov	ip, r0
 8000b26:	4608      	mov	r0, r1
 8000b28:	4661      	mov	r1, ip
 8000b2a:	e7ff      	b.n	8000b2c <__aeabi_cfcmpeq>

08000b2c <__aeabi_cfcmpeq>:
 8000b2c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b2e:	f7ff ffc9 	bl	8000ac4 <__cmpsf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf48      	it	mi
 8000b36:	f110 0f00 	cmnmi.w	r0, #0
 8000b3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b3c <__aeabi_fcmpeq>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff fff4 	bl	8000b2c <__aeabi_cfcmpeq>
 8000b44:	bf0c      	ite	eq
 8000b46:	2001      	moveq	r0, #1
 8000b48:	2000      	movne	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fcmplt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffea 	bl	8000b2c <__aeabi_cfcmpeq>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_fcmple>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffe0 	bl	8000b2c <__aeabi_cfcmpeq>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_fcmpge>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffd2 	bl	8000b24 <__aeabi_cfrcmple>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fcmpgt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffc8 	bl	8000b24 <__aeabi_cfrcmple>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fcmpun>:
 8000ba0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_fcmpun+0x14>
 8000bae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bb2:	d108      	bne.n	8000bc6 <__aeabi_fcmpun+0x26>
 8000bb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bb8:	d102      	bne.n	8000bc0 <__aeabi_fcmpun+0x20>
 8000bba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_fcmpun+0x26>
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0001 	mov.w	r0, #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_f2iz>:
 8000bcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bd4:	d30f      	bcc.n	8000bf6 <__aeabi_f2iz+0x2a>
 8000bd6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_f2iz+0x30>
 8000be0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000be4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bec:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf0:	bf18      	it	ne
 8000bf2:	4240      	negne	r0, r0
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr
 8000bfc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c00:	d101      	bne.n	8000c06 <__aeabi_f2iz+0x3a>
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	d105      	bne.n	8000c12 <__aeabi_f2iz+0x46>
 8000c06:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c0a:	bf08      	it	eq
 8000c0c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b988 	b.w	8000f40 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	468e      	mov	lr, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d962      	bls.n	8000d24 <__udivmoddi4+0xdc>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	b14e      	cbz	r6, 8000c78 <__udivmoddi4+0x30>
 8000c64:	f1c6 0320 	rsb	r3, r6, #32
 8000c68:	fa01 f806 	lsl.w	r8, r1, r6
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	ea43 0808 	orr.w	r8, r3, r8
 8000c76:	40b4      	lsls	r4, r6
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9c:	f080 80ea 	bcs.w	8000e74 <__udivmoddi4+0x22c>
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f240 80e7 	bls.w	8000e74 <__udivmoddi4+0x22c>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	b2a3      	uxth	r3, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cba:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbe:	459c      	cmp	ip, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x8e>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	f080 80d6 	bcs.w	8000e78 <__udivmoddi4+0x230>
 8000ccc:	459c      	cmp	ip, r3
 8000cce:	f240 80d3 	bls.w	8000e78 <__udivmoddi4+0x230>
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cda:	eba3 030c 	sub.w	r3, r3, ip
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11d      	cbz	r5, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40f3      	lsrs	r3, r6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d905      	bls.n	8000cfe <__udivmoddi4+0xb6>
 8000cf2:	b10d      	cbz	r5, 8000cf8 <__udivmoddi4+0xb0>
 8000cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e7f5      	b.n	8000cea <__udivmoddi4+0xa2>
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d146      	bne.n	8000d94 <__udivmoddi4+0x14c>
 8000d06:	4573      	cmp	r3, lr
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xc8>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 8105 	bhi.w	8000f1a <__udivmoddi4+0x2d2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e5      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d1e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d22:	e7e2      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f000 8090 	beq.w	8000e4a <__udivmoddi4+0x202>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f040 80a4 	bne.w	8000e7c <__udivmoddi4+0x234>
 8000d34:	1a8a      	subs	r2, r1, r2
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	b2bc      	uxth	r4, r7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d46:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x11e>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x11c>
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f200 80e0 	bhi.w	8000f24 <__udivmoddi4+0x2dc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d74:	fb02 f404 	mul.w	r4, r2, r4
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x144>
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x142>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f200 80ca 	bhi.w	8000f1e <__udivmoddi4+0x2d6>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d94:	f1c1 0620 	rsb	r6, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	fa0e f401 	lsl.w	r4, lr, r1
 8000da4:	fa20 f306 	lsr.w	r3, r0, r6
 8000da8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	fa1f fc87 	uxth.w	ip, r7
 8000dba:	fbbe f0f9 	udiv	r0, lr, r9
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x1a0>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dda:	f080 809c 	bcs.w	8000f16 <__udivmoddi4+0x2ce>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8099 	bls.w	8000f16 <__udivmoddi4+0x2ce>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	fa1f fe83 	uxth.w	lr, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1ce>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0a:	f080 8082 	bcs.w	8000f12 <__udivmoddi4+0x2ca>
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d97f      	bls.n	8000f12 <__udivmoddi4+0x2ca>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	443c      	add	r4, r7
 8000e16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e22:	4564      	cmp	r4, ip
 8000e24:	4673      	mov	r3, lr
 8000e26:	46e1      	mov	r9, ip
 8000e28:	d362      	bcc.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e2a:	d05f      	beq.n	8000eec <__udivmoddi4+0x2a4>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x1fe>
 8000e2e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e32:	eb64 0409 	sbc.w	r4, r4, r9
 8000e36:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	40cc      	lsrs	r4, r1
 8000e42:	e9c5 6400 	strd	r6, r4, [r5]
 8000e46:	2100      	movs	r1, #0
 8000e48:	e74f      	b.n	8000cea <__udivmoddi4+0xa2>
 8000e4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e4e:	0c01      	lsrs	r1, r0, #16
 8000e50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e54:	b280      	uxth	r0, r0
 8000e56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	463c      	mov	r4, r7
 8000e60:	46b8      	mov	r8, r7
 8000e62:	46be      	mov	lr, r7
 8000e64:	2620      	movs	r6, #32
 8000e66:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6a:	eba2 0208 	sub.w	r2, r2, r8
 8000e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e72:	e766      	b.n	8000d42 <__udivmoddi4+0xfa>
 8000e74:	4601      	mov	r1, r0
 8000e76:	e718      	b.n	8000caa <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e72c      	b.n	8000cd6 <__udivmoddi4+0x8e>
 8000e7c:	f1c6 0220 	rsb	r2, r6, #32
 8000e80:	fa2e f302 	lsr.w	r3, lr, r2
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	40b1      	lsls	r1, r6
 8000e88:	fa20 f202 	lsr.w	r2, r0, r2
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e96:	b2bc      	uxth	r4, r7
 8000e98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb08 f904 	mul.w	r9, r8, r4
 8000ea6:	40b0      	lsls	r0, r6
 8000ea8:	4589      	cmp	r9, r1
 8000eaa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eae:	b280      	uxth	r0, r0
 8000eb0:	d93e      	bls.n	8000f30 <__udivmoddi4+0x2e8>
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eb8:	d201      	bcs.n	8000ebe <__udivmoddi4+0x276>
 8000eba:	4589      	cmp	r9, r1
 8000ebc:	d81f      	bhi.n	8000efe <__udivmoddi4+0x2b6>
 8000ebe:	eba1 0109 	sub.w	r1, r1, r9
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d229      	bcs.n	8000f2c <__udivmoddi4+0x2e4>
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ede:	d2c4      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee0:	4542      	cmp	r2, r8
 8000ee2:	d2c2      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee8:	443a      	add	r2, r7
 8000eea:	e7be      	b.n	8000e6a <__udivmoddi4+0x222>
 8000eec:	45f0      	cmp	r8, lr
 8000eee:	d29d      	bcs.n	8000e2c <__udivmoddi4+0x1e4>
 8000ef0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef8:	3801      	subs	r0, #1
 8000efa:	46e1      	mov	r9, ip
 8000efc:	e796      	b.n	8000e2c <__udivmoddi4+0x1e4>
 8000efe:	eba7 0909 	sub.w	r9, r7, r9
 8000f02:	4449      	add	r1, r9
 8000f04:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f08:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0c:	fb09 f804 	mul.w	r8, r9, r4
 8000f10:	e7db      	b.n	8000eca <__udivmoddi4+0x282>
 8000f12:	4673      	mov	r3, lr
 8000f14:	e77f      	b.n	8000e16 <__udivmoddi4+0x1ce>
 8000f16:	4650      	mov	r0, sl
 8000f18:	e766      	b.n	8000de8 <__udivmoddi4+0x1a0>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e6fd      	b.n	8000d1a <__udivmoddi4+0xd2>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3a02      	subs	r2, #2
 8000f22:	e733      	b.n	8000d8c <__udivmoddi4+0x144>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	443b      	add	r3, r7
 8000f2a:	e71c      	b.n	8000d66 <__udivmoddi4+0x11e>
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	e79c      	b.n	8000e6a <__udivmoddi4+0x222>
 8000f30:	eba1 0109 	sub.w	r1, r1, r9
 8000f34:	46c4      	mov	ip, r8
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fb09 f804 	mul.w	r8, r9, r4
 8000f3e:	e7c4      	b.n	8000eca <__udivmoddi4+0x282>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <color_u8_to_u5>:
    if (g < 0.1f) g = 0.1f;
    if (g > 5.0f) g = 5.0f;
    s_gamma = g;
}

uint8_t color_u8_to_u5(uint8_t v8) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
    if (s_gamma == 1.0f) {
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <color_u8_to_u5+0x90>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fdf0 	bl	8000b3c <__aeabi_fcmpeq>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00d      	beq.n	8000f7e <color_u8_to_u5+0x3a>
        // 선형: 0..255 -> 0..31
        // 반올림: (v*31 + 127)/255
        return (uint8_t)((v8 * 31 + 127) / 255);
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	015b      	lsls	r3, r3, #5
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	337f      	adds	r3, #127	@ 0x7f
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <color_u8_to_u5+0x94>)
 8000f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f72:	441a      	add	r2, r3
 8000f74:	11d2      	asrs	r2, r2, #7
 8000f76:	17db      	asrs	r3, r3, #31
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	e026      	b.n	8000fcc <color_u8_to_u5+0x88>
    } else {
        float vf = (float)v8 / 255.0f;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbef 	bl	8000764 <__aeabi_ui2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4914      	ldr	r1, [pc, #80]	@ (8000fdc <color_u8_to_u5+0x98>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fcf6 	bl	800097c <__aeabi_fdiv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	613b      	str	r3, [r7, #16]
        float vg = powf(vf, s_gamma);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <color_u8_to_u5+0x90>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6938      	ldr	r0, [r7, #16]
 8000f9c:	f006 fd3c 	bl	8007a18 <powf>
 8000fa0:	60f8      	str	r0, [r7, #12]
        int v5 = (int)lroundf(vg * 31.0f);
 8000fa2:	490f      	ldr	r1, [pc, #60]	@ (8000fe0 <color_u8_to_u5+0x9c>)
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff fc35 	bl	8000814 <__aeabi_fmul>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fd88 	bl	8007ac2 <lroundf>
 8000fb2:	6178      	str	r0, [r7, #20]
        if (v5 < 0) v5 = 0;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da01      	bge.n	8000fbe <color_u8_to_u5+0x7a>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
        if (v5 > 31) v5 = 31;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b1f      	cmp	r3, #31
 8000fc2:	dd01      	ble.n	8000fc8 <color_u8_to_u5+0x84>
 8000fc4:	231f      	movs	r3, #31
 8000fc6:	617b      	str	r3, [r7, #20]
        return (uint8_t)v5;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	b2db      	uxtb	r3, r3
    }
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	80808081 	.word	0x80808081
 8000fdc:	437f0000 	.word	0x437f0000
 8000fe0:	41f80000 	.word	0x41f80000

08000fe4 <debug_uart_init>:
#include <stdio.h>
#include <string.h>

static UART_HandleTypeDef *s_uart = NULL;

void debug_uart_init(UART_HandleTypeDef *huart) { s_uart = huart; }
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	4a03      	ldr	r2, [pc, #12]	@ (8000ffc <debug_uart_init+0x18>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000080 	.word	0x20000080

08001000 <debug_printf>:

void debug_printf(const char *fmt, ...)
{
 8001000:	b40f      	push	{r0, r1, r2, r3}
 8001002:	b580      	push	{r7, lr}
 8001004:	b0aa      	sub	sp, #168	@ 0xa8
 8001006:	af00      	add	r7, sp, #0
    if (!s_uart) return;
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <debug_printf+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d020      	beq.n	8001052 <debug_printf+0x52>
    char buf[160];
    va_list ap;
    va_start(ap, fmt);
 8001010:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001014:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(buf, sizeof(buf), fmt, ap);
 8001016:	1d38      	adds	r0, r7, #4
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800101e:	21a0      	movs	r1, #160	@ 0xa0
 8001020:	f006 f86e 	bl	8007100 <vsniprintf>
 8001024:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    va_end(ap);
    if (n < 0) return;
 8001028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800102c:	2b00      	cmp	r3, #0
 800102e:	db12      	blt.n	8001056 <debug_printf+0x56>
    if (n > (int)sizeof(buf)) n = sizeof(buf);
 8001030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001034:	2ba0      	cmp	r3, #160	@ 0xa0
 8001036:	dd02      	ble.n	800103e <debug_printf+0x3e>
 8001038:	23a0      	movs	r3, #160	@ 0xa0
 800103a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_UART_Transmit(s_uart, (uint8_t*)buf, (uint16_t)n, 10); // 블로킹이지만 매우 짧게, 루프에서만 호출
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <debug_printf+0x64>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001046:	b29a      	uxth	r2, r3
 8001048:	1d39      	adds	r1, r7, #4
 800104a:	230a      	movs	r3, #10
 800104c:	f005 f860 	bl	8006110 <HAL_UART_Transmit>
 8001050:	e002      	b.n	8001058 <debug_printf+0x58>
    if (!s_uart) return;
 8001052:	bf00      	nop
 8001054:	e000      	b.n	8001058 <debug_printf+0x58>
    if (n < 0) return;
 8001056:	bf00      	nop
}
 8001058:	37a8      	adds	r7, #168	@ 0xa8
 800105a:	46bd      	mov	sp, r7
 800105c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001060:	b004      	add	sp, #16
 8001062:	4770      	bx	lr
 8001064:	20000080 	.word	0x20000080

08001068 <debug_tim1_update_hz>:

float debug_tim1_update_hz(TIM_HandleTypeDef *htim)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08d      	sub	sp, #52	@ 0x34
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    RCC_ClkInitTypeDef clk; uint32_t flashLat;
    HAL_RCC_GetClockConfig(&clk, &flashLat);
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f004 f8b6 	bl	80051ec <HAL_RCC_GetClockConfig>

    uint32_t pclk2  = HAL_RCC_GetPCLK2Freq();
 8001080:	f004 f8a0 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8001084:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint32_t timclk = (clk.APB2CLKDivider == RCC_HCLK_DIV1) ? pclk2 : (pclk2 * 2U);
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <debug_tim1_update_hz+0x2a>
 800108c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	e000      	b.n	8001094 <debug_tim1_update_hz+0x2c>
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t psc = htim->Instance->PSC;   // __HAL_TIM_GET_PRESCALER(htim) 대체
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t arr = htim->Instance->ARR;   // __HAL_TIM_GET_AUTORELOAD(htim) 대체
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a4:	623b      	str	r3, [r7, #32]
    if ((psc + 1U) == 0 || (arr + 1U) == 0) return 0.0f;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d003      	beq.n	80010b6 <debug_tim1_update_hz+0x4e>
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d102      	bne.n	80010bc <debug_tim1_update_hz+0x54>
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	e012      	b.n	80010e2 <debug_tim1_update_hz+0x7a>

    return (float)timclk / (float)((psc + 1U) * (arr + 1U));
 80010bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010be:	f7ff fb51 	bl	8000764 <__aeabi_ui2f>
 80010c2:	4604      	mov	r4, r0
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	3301      	adds	r3, #1
 80010c8:	6a3a      	ldr	r2, [r7, #32]
 80010ca:	3201      	adds	r2, #1
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fb47 	bl	8000764 <__aeabi_ui2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fc4e 	bl	800097c <__aeabi_fdiv>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3734      	adds	r7, #52	@ 0x34
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <debug_tim1_fps>:

float debug_tim1_fps(TIM_HandleTypeDef *htim, uint32_t words_per_frame)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
    float fupd = debug_tim1_update_hz(htim);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffb7 	bl	8001068 <debug_tim1_update_hz>
 80010fa:	60f8      	str	r0, [r7, #12]
    return words_per_frame ? (fupd / (float)words_per_frame) : 0.0f;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d009      	beq.n	8001116 <debug_tim1_fps+0x2c>
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f7ff fb2e 	bl	8000764 <__aeabi_ui2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff fc35 	bl	800097c <__aeabi_fdiv>
 8001112:	4603      	mov	r3, r0
 8001114:	e001      	b.n	800111a <debug_tim1_fps+0x30>
 8001116:	f04f 0300 	mov.w	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <debug_check_pins>:

// 핀 매핑 간단 점검: 모두 GPIOB인지, 데이터 vs 제어 비트가 겹치지 않는지
void debug_check_pins(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
    bool allB =
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
        (R2_GPIO_Port==GPIOB) && (G2_GPIO_Port==GPIOB) && (B2_GPIO_Port==GPIOB) &&
        (A_GPIO_Port==GPIOB)  && (B_GPIO_Port==GPIOB)  && (C_GPIO_Port==GPIOB)  &&
        (D_GPIO_Port==GPIOB)  && (CLK_GPIO_Port==GPIOB)&& (LAT_GPIO_Port==GPIOB)&&
        (OE_GPIO_Port==GPIOB);

    uint32_t dataMask = R1_Pin|G1_Pin|B1_Pin|R2_Pin|G2_Pin|B2_Pin;
 800112e:	233f      	movs	r3, #63	@ 0x3f
 8001130:	60bb      	str	r3, [r7, #8]
    uint32_t ctrlMask = A_Pin|B_Pin|C_Pin|D_Pin|CLK_Pin|LAT_Pin|OE_Pin;
 8001132:	f24f 3340 	movw	r3, #62272	@ 0xf340
 8001136:	607b      	str	r3, [r7, #4]

    debug_printf("[PIN] all on GPIOB: %s\r\n", allB ? "YES":"NO");
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <debug_check_pins+0x1e>
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <debug_check_pins+0x64>)
 8001140:	e000      	b.n	8001144 <debug_check_pins+0x20>
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <debug_check_pins+0x68>)
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <debug_check_pins+0x6c>)
 8001148:	f7ff ff5a 	bl	8001000 <debug_printf>
    if (!allB) {
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	f083 0301 	eor.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <debug_check_pins+0x3a>
        debug_printf(" - CHECK: some pins are not on GPIOB → DMA(BSRR) 미적용\r\n");
 8001158:	480e      	ldr	r0, [pc, #56]	@ (8001194 <debug_check_pins+0x70>)
 800115a:	f7ff ff51 	bl	8001000 <debug_printf>
    }
    if (dataMask & ctrlMask) {
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <debug_check_pins+0x54>
        debug_printf("[PIN] ERROR: DATA and CTRL pins overlap! mask=0x%08lX\r\n",
                     (unsigned long)(dataMask & ctrlMask));
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4013      	ands	r3, r2
        debug_printf("[PIN] ERROR: DATA and CTRL pins overlap! mask=0x%08lX\r\n",
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <debug_check_pins+0x74>)
 8001172:	f7ff ff45 	bl	8001000 <debug_printf>
    } else {
        debug_printf("[PIN] data/ctrl overlap: none\r\n");
    }
}
 8001176:	e002      	b.n	800117e <debug_check_pins+0x5a>
        debug_printf("[PIN] data/ctrl overlap: none\r\n");
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <debug_check_pins+0x78>)
 800117a:	f7ff ff41 	bl	8001000 <debug_printf>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	080083b0 	.word	0x080083b0
 800118c:	080083b4 	.word	0x080083b4
 8001190:	080083b8 	.word	0x080083b8
 8001194:	080083d4 	.word	0x080083d4
 8001198:	08008414 	.word	0x08008414
 800119c:	0800844c 	.word	0x0800844c

080011a0 <led_dma_init>:

volatile uint32_t led_dma_frame_count = 0;
static volatile bool s_vsync = false;

void led_dma_init(DMA_HandleTypeDef *hdma, GPIO_TypeDef *gpio_bsrr_port)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    s_hdma = hdma;
 80011aa:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <led_dma_init+0x64>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]
    s_gpio = gpio_bsrr_port;
 80011b0:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <led_dma_init+0x68>)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	6013      	str	r3, [r2, #0]

    // 콜백 등록
    HAL_DMA_RegisterCallback(s_hdma, HAL_DMA_XFER_CPLT_CB_ID,       cb_tc);
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <led_dma_init+0x64>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a14      	ldr	r2, [pc, #80]	@ (800120c <led_dma_init+0x6c>)
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ff62 	bl	8003088 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(s_hdma, HAL_DMA_XFER_HALFCPLT_CB_ID,   cb_ht);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <led_dma_init+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <led_dma_init+0x70>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 ff5b 	bl	8003088 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(s_hdma, HAL_DMA_XFER_M1CPLT_CB_ID,     cb_m1tc);
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <led_dma_init+0x64>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <led_dma_init+0x74>)
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 ff54 	bl	8003088 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(s_hdma, HAL_DMA_XFER_M1HALFCPLT_CB_ID, cb_m1ht);
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <led_dma_init+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <led_dma_init+0x78>)
 80011e6:	2103      	movs	r1, #3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 ff4d 	bl	8003088 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(s_hdma, HAL_DMA_XFER_ERROR_CB_ID,      cb_err);
 80011ee:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <led_dma_init+0x64>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <led_dma_init+0x7c>)
 80011f4:	2104      	movs	r1, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ff46 	bl	8003088 <HAL_DMA_RegisterCallback>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000084 	.word	0x20000084
 8001208:	20000088 	.word	0x20000088
 800120c:	080012fd 	.word	0x080012fd
 8001210:	08001331 	.word	0x08001331
 8001214:	08001345 	.word	0x08001345
 8001218:	08001379 	.word	0x08001379
 800121c:	0800138d 	.word	0x0800138d

08001220 <led_dma_start>:

HAL_StatusTypeDef led_dma_start(uint32_t *fb0, uint32_t *fb1, uint32_t words_per_frame)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    s_mem0_free = false;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <led_dma_start+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
    s_mem1_free = false;
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <led_dma_start+0x44>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]

    // 더블버퍼 + 인터럽트 시작 (목적지는 항상 BSRR)
    return HAL_DMAEx_MultiBufferStart_IT(
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <led_dma_start+0x48>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	68f9      	ldr	r1, [r7, #12]
        s_hdma,
        (uint32_t)fb0,                       // M0
        (uint32_t)&s_gpio->BSRR,             // PERIPH
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <led_dma_start+0x4c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3318      	adds	r3, #24
    return HAL_DMAEx_MultiBufferStart_IT(
 8001244:	461c      	mov	r4, r3
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4613      	mov	r3, r2
 800124e:	4622      	mov	r2, r4
 8001250:	f002 f828 	bl	80032a4 <HAL_DMAEx_MultiBufferStart_IT>
 8001254:	4603      	mov	r3, r0
		(uint32_t)fb1,                       // ✅ SecondMemAddress (M1)
		words_per_frame                      // ✅ DataLength (NDTR)
    );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	2000008c 	.word	0x2000008c
 8001264:	2000008d 	.word	0x2000008d
 8001268:	20000084 	.word	0x20000084
 800126c:	20000088 	.word	0x20000088

08001270 <led_dma_is_mem_free>:

bool led_dma_is_mem_free(led_dma_mem_t m)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    return (m == LED_MEM0) ? s_mem0_free : s_mem1_free;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d108      	bne.n	8001292 <led_dma_is_mem_free+0x22>
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <led_dma_is_mem_free+0x3c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf14      	ite	ne
 800128a:	2301      	movne	r3, #1
 800128c:	2300      	moveq	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	e007      	b.n	80012a2 <led_dma_is_mem_free+0x32>
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <led_dma_is_mem_free+0x40>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	2000008c 	.word	0x2000008c
 80012b0:	2000008d 	.word	0x2000008d

080012b4 <led_dma_mark_filled>:

void led_dma_mark_filled(led_dma_mem_t m)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    if (m == LED_MEM0) s_mem0_free = false;
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <led_dma_mark_filled+0x18>
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <led_dma_mark_filled+0x28>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
    else                  s_mem1_free = false;
}
 80012ca:	e002      	b.n	80012d2 <led_dma_mark_filled+0x1e>
    else                  s_mem1_free = false;
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <led_dma_mark_filled+0x2c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	2000008c 	.word	0x2000008c
 80012e0:	2000008d 	.word	0x2000008d

080012e4 <led_dma_irq_handler>:
{
    return HAL_DMA_GetError(s_hdma);
}

void led_dma_irq_handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(s_hdma);
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <led_dma_irq_handler+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fd41 	bl	8002d74 <HAL_DMA_IRQHandler>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000084 	.word	0x20000084

080012fc <cb_tc>:
    return s_hdma;
}

/* ================== 내부 콜백 구현 ================== */
static void cb_tc(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    (void)hdma;
    // 필요시 후처리 훅
    s_mem0_free = true;        // M0 채워도 됨
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <cb_tc+0x28>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
    led_dma_frame_count++;     // 프레임 카운트++
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <cb_tc+0x2c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <cb_tc+0x2c>)
 8001312:	6013      	str	r3, [r2, #0]
	s_vsync = true;            // 프레임 경계 플래그
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <cb_tc+0x30>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	2000008c 	.word	0x2000008c
 8001328:	20000090 	.word	0x20000090
 800132c:	20000094 	.word	0x20000094

08001330 <cb_ht>:
static void cb_ht(DMA_HandleTypeDef *hdma) { (void)hdma; }
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
	...

08001344 <cb_m1tc>:
static void cb_m1tc(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    (void)hdma;
    // M1 소비 완료 -> CPU가 M1을 다시 채워도 됨
    s_mem1_free = true;
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <cb_m1tc+0x28>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    led_dma_frame_count++;
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <cb_m1tc+0x2c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <cb_m1tc+0x2c>)
 800135a:	6013      	str	r3, [r2, #0]
	s_vsync = true;
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <cb_m1tc+0x30>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	2000008d 	.word	0x2000008d
 8001370:	20000090 	.word	0x20000090
 8001374:	20000094 	.word	0x20000094

08001378 <cb_m1ht>:
static void cb_m1ht(DMA_HandleTypeDef *hdma) { (void)hdma; }
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
	...

0800138c <cb_err>:
static void cb_err(DMA_HandleTypeDef *hdma)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    (void)hdma;
    // HAL_DMA_GetError(hdma) 로 디버그 가능
    (void)hdma;
	uint32_t e = HAL_DMA_GetError(hdma);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f001 fecb 	bl	8003130 <HAL_DMA_GetError>
 800139a:	60f8      	str	r0, [r7, #12]
	debug_printf("[DMA] error=0x%08lX\r\n", (unsigned long)e);
 800139c:	68f9      	ldr	r1, [r7, #12]
 800139e:	4803      	ldr	r0, [pc, #12]	@ (80013ac <cb_err+0x20>)
 80013a0:	f7ff fe2e 	bl	8001000 <debug_printf>

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0800846c 	.word	0x0800846c

080013b0 <led_dma_take_vsync>:

// vsync 플래그 소비 함수 추가
bool led_dma_take_vsync(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
    bool f = s_vsync;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <led_dma_take_vsync+0x20>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
    s_vsync = false;
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <led_dma_take_vsync+0x20>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
    return f;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000094 	.word	0x20000094

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f001 fa0f 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f923 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 facb 	bl	800197c <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f000 faa9 	bl	800193c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fa7d 	bl	80018e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013ee:	f000 f9e3 	bl	80017b8 <MX_TIM1_Init>
  MX_RTC_Init();
 80013f2:	f000 f985 	bl	8001700 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  debug_uart_init(&huart2);
 80013f6:	4883      	ldr	r0, [pc, #524]	@ (8001604 <main+0x230>)
 80013f8:	f7ff fdf4 	bl	8000fe4 <debug_uart_init>
  debug_check_pins();
 80013fc:	f7ff fe92 	bl	8001124 <debug_check_pins>

  float fupd = debug_tim1_update_hz(&htim1);
 8001400:	4881      	ldr	r0, [pc, #516]	@ (8001608 <main+0x234>)
 8001402:	f7ff fe31 	bl	8001068 <debug_tim1_update_hz>
 8001406:	6178      	str	r0, [r7, #20]
  float fps  = debug_tim1_fps(&htim1, LED_WORDS_PER_FRAME);
 8001408:	f642 01f0 	movw	r1, #10480	@ 0x28f0
 800140c:	487e      	ldr	r0, [pc, #504]	@ (8001608 <main+0x234>)
 800140e:	f7ff fe6c 	bl	80010ea <debug_tim1_fps>
 8001412:	6138      	str	r0, [r7, #16]
  debug_printf("[BOOT] WORDS/FRAME=%lu, TIM1 upd=%.3f MHz, FPS≈%.1f\r\n",
               (unsigned long)LED_WORDS_PER_FRAME, fupd/1e6f, fps);
 8001414:	497d      	ldr	r1, [pc, #500]	@ (800160c <main+0x238>)
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff fab0 	bl	800097c <__aeabi_fdiv>
 800141c:	4603      	mov	r3, r0
  debug_printf("[BOOT] WORDS/FRAME=%lu, TIM1 upd=%.3f MHz, FPS≈%.1f\r\n",
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f892 	bl	8000548 <__aeabi_f2d>
 8001424:	4604      	mov	r4, r0
 8001426:	460d      	mov	r5, r1
 8001428:	6938      	ldr	r0, [r7, #16]
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9cd 2300 	strd	r2, r3, [sp]
 8001436:	4622      	mov	r2, r4
 8001438:	462b      	mov	r3, r5
 800143a:	f642 01f0 	movw	r1, #10480	@ 0x28f0
 800143e:	4874      	ldr	r0, [pc, #464]	@ (8001610 <main+0x23c>)
 8001440:	f7ff fdde 	bl	8001000 <debug_printf>
  //anim_init_rainbow(2048, 1, fb0, fb1);


  // RTC에서 시각 읽기
  uint8_t hh, mm, ss; bool is_am;
  rtc_get_hms_ampm(&hh, &mm, &ss, &is_am);
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	1d7a      	adds	r2, r7, #5
 8001448:	1db9      	adds	r1, r7, #6
 800144a:	1df8      	adds	r0, r7, #7
 800144c:	f000 fb20 	bl	8001a90 <rtc_get_hms_ampm>

  // 필요 시 12시간제로 정규화 (RTC가 이미 12h면 생략 가능)
  uint8_t hh12 = (hh == 0) ? 12 : ((hh > 12) ? (hh - 12) : hh);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <main+0x94>
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d903      	bls.n	8001464 <main+0x90>
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	3b0c      	subs	r3, #12
 8001460:	b2db      	uxtb	r3, r3
 8001462:	e002      	b.n	800146a <main+0x96>
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	e000      	b.n	800146a <main+0x96>
 8001468:	230c      	movs	r3, #12
 800146a:	73fb      	strb	r3, [r7, #15]
  // 색상 선택 (AM=하늘색, PM=주황색)
  uint8_t fr = is_am ? 135 : 255;
 800146c:	793b      	ldrb	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <main+0xa2>
 8001472:	2387      	movs	r3, #135	@ 0x87
 8001474:	e000      	b.n	8001478 <main+0xa4>
 8001476:	23ff      	movs	r3, #255	@ 0xff
 8001478:	73bb      	strb	r3, [r7, #14]
  uint8_t fg = is_am ? 206 : 165;
 800147a:	793b      	ldrb	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <main+0xb0>
 8001480:	23ce      	movs	r3, #206	@ 0xce
 8001482:	e000      	b.n	8001486 <main+0xb2>
 8001484:	23a5      	movs	r3, #165	@ 0xa5
 8001486:	737b      	strb	r3, [r7, #13]
  uint8_t fb = is_am ? 235 :   0;
 8001488:	793b      	ldrb	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <main+0xbe>
 800148e:	23eb      	movs	r3, #235	@ 0xeb
 8001490:	e000      	b.n	8001494 <main+0xc0>
 8001492:	2300      	movs	r3, #0
 8001494:	733b      	strb	r3, [r7, #12]

  paint_time_frame(fb0, hh12, mm, is_am, fr, fg, fb,   0, 0, 0);
 8001496:	7bf9      	ldrb	r1, [r7, #15]
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	793a      	ldrb	r2, [r7, #4]
 800149e:	2300      	movs	r3, #0
 80014a0:	9305      	str	r3, [sp, #20]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9304      	str	r3, [sp, #16]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	7b3b      	ldrb	r3, [r7, #12]
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	4602      	mov	r2, r0
 80014ba:	4856      	ldr	r0, [pc, #344]	@ (8001614 <main+0x240>)
 80014bc:	f000 ffa4 	bl	8002408 <paint_time_frame>
  paint_time_frame(fb1, hh12, mm, is_am, fr, fg, fb,   0, 0, 0);
 80014c0:	7bf9      	ldrb	r1, [r7, #15]
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	4618      	mov	r0, r3
 80014c6:	793a      	ldrb	r2, [r7, #4]
 80014c8:	2300      	movs	r3, #0
 80014ca:	9305      	str	r3, [sp, #20]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9304      	str	r3, [sp, #16]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9303      	str	r3, [sp, #12]
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	4602      	mov	r2, r0
 80014e4:	484c      	ldr	r0, [pc, #304]	@ (8001618 <main+0x244>)
 80014e6:	f000 ff8f 	bl	8002408 <paint_time_frame>

  led_dma_init(&hdma_tim1_up, GPIOB);
 80014ea:	494c      	ldr	r1, [pc, #304]	@ (800161c <main+0x248>)
 80014ec:	484c      	ldr	r0, [pc, #304]	@ (8001620 <main+0x24c>)
 80014ee:	f7ff fe57 	bl	80011a0 <led_dma_init>
  if (led_dma_start(fb0, fb1, LED_WORDS_PER_FRAME) != HAL_OK) Error_Handler();
 80014f2:	f642 02f0 	movw	r2, #10480	@ 0x28f0
 80014f6:	4948      	ldr	r1, [pc, #288]	@ (8001618 <main+0x244>)
 80014f8:	4846      	ldr	r0, [pc, #280]	@ (8001614 <main+0x240>)
 80014fa:	f7ff fe91 	bl	8001220 <led_dma_start>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <main+0x134>
 8001504:	f000 fafc 	bl	8001b00 <Error_Handler>

  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001508:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <main+0x234>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <main+0x234>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001516:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim1);
 8001518:	483b      	ldr	r0, [pc, #236]	@ (8001608 <main+0x234>)
 800151a:	f004 fadd 	bl	8005ad8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  static uint8_t last_mm = 255;
	  if (led_dma_take_vsync()) {
 800151e:	f7ff ff47 	bl	80013b0 <led_dma_take_vsync>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0fa      	beq.n	800151e <main+0x14a>
	      rtc_get_hms_ampm(&hh, &mm, &ss, &is_am);
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	1d7a      	adds	r2, r7, #5
 800152c:	1db9      	adds	r1, r7, #6
 800152e:	1df8      	adds	r0, r7, #7
 8001530:	f000 faae 	bl	8001a90 <rtc_get_hms_ampm>

	      if (mm != last_mm) {
 8001534:	79ba      	ldrb	r2, [r7, #6]
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <main+0x250>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d0ef      	beq.n	800151e <main+0x14a>
	          last_mm = mm;
 800153e:	79ba      	ldrb	r2, [r7, #6]
 8001540:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <main+0x250>)
 8001542:	701a      	strb	r2, [r3, #0]
	          // 시/전경색 다시 계산
			  uint8_t hh12 = (hh == 0) ? 12 : ((hh > 12) ? (hh - 12) : hh);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <main+0x188>
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d903      	bls.n	8001558 <main+0x184>
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	3b0c      	subs	r3, #12
 8001554:	b2db      	uxtb	r3, r3
 8001556:	e002      	b.n	800155e <main+0x18a>
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	e000      	b.n	800155e <main+0x18a>
 800155c:	230c      	movs	r3, #12
 800155e:	72fb      	strb	r3, [r7, #11]
			  uint8_t fr = is_am ? 135 : 255;
 8001560:	793b      	ldrb	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <main+0x196>
 8001566:	2387      	movs	r3, #135	@ 0x87
 8001568:	e000      	b.n	800156c <main+0x198>
 800156a:	23ff      	movs	r3, #255	@ 0xff
 800156c:	72bb      	strb	r3, [r7, #10]
			  uint8_t fg = is_am ? 206 : 165;
 800156e:	793b      	ldrb	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <main+0x1a4>
 8001574:	23ce      	movs	r3, #206	@ 0xce
 8001576:	e000      	b.n	800157a <main+0x1a6>
 8001578:	23a5      	movs	r3, #165	@ 0xa5
 800157a:	727b      	strb	r3, [r7, #9]
			  uint8_t fb = is_am ? 235 :   0;
 800157c:	793b      	ldrb	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <main+0x1b2>
 8001582:	23eb      	movs	r3, #235	@ 0xeb
 8001584:	e000      	b.n	8001588 <main+0x1b4>
 8001586:	2300      	movs	r3, #0
 8001588:	723b      	strb	r3, [r7, #8]

			  if (led_dma_is_mem_free(LED_MEM0)) {
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fe70 	bl	8001270 <led_dma_is_mem_free>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d017      	beq.n	80015c6 <main+0x1f2>
			              paint_time_frame(fb0, hh12, mm, is_am, fr, fg, fb,  0,0,0);
 8001596:	7af9      	ldrb	r1, [r7, #11]
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	4618      	mov	r0, r3
 800159c:	793a      	ldrb	r2, [r7, #4]
 800159e:	2300      	movs	r3, #0
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	2300      	movs	r3, #0
 80015a4:	9304      	str	r3, [sp, #16]
 80015a6:	2300      	movs	r3, #0
 80015a8:	9303      	str	r3, [sp, #12]
 80015aa:	7a3b      	ldrb	r3, [r7, #8]
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	7a7b      	ldrb	r3, [r7, #9]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	7abb      	ldrb	r3, [r7, #10]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4613      	mov	r3, r2
 80015b8:	4602      	mov	r2, r0
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <main+0x240>)
 80015bc:	f000 ff24 	bl	8002408 <paint_time_frame>
			              led_dma_mark_filled(LED_MEM0);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fe77 	bl	80012b4 <led_dma_mark_filled>
			  }
			  if (led_dma_is_mem_free(LED_MEM1)) {
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fe52 	bl	8001270 <led_dma_is_mem_free>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0a5      	beq.n	800151e <main+0x14a>
				  paint_time_frame(fb1, hh12, mm, is_am, fr, fg, fb,  0,0,0);
 80015d2:	7af9      	ldrb	r1, [r7, #11]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	793a      	ldrb	r2, [r7, #4]
 80015da:	2300      	movs	r3, #0
 80015dc:	9305      	str	r3, [sp, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	9304      	str	r3, [sp, #16]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	7a3b      	ldrb	r3, [r7, #8]
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	7a7b      	ldrb	r3, [r7, #9]
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	7abb      	ldrb	r3, [r7, #10]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4613      	mov	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	4808      	ldr	r0, [pc, #32]	@ (8001618 <main+0x244>)
 80015f8:	f000 ff06 	bl	8002408 <paint_time_frame>
				  led_dma_mark_filled(LED_MEM1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fe59 	bl	80012b4 <led_dma_mark_filled>
  {
 8001602:	e78c      	b.n	800151e <main+0x14a>
 8001604:	20000160 	.word	0x20000160
 8001608:	200000b8 	.word	0x200000b8
 800160c:	49742400 	.word	0x49742400
 8001610:	08008484 	.word	0x08008484
 8001614:	200001a8 	.word	0x200001a8
 8001618:	2000a568 	.word	0x2000a568
 800161c:	40020400 	.word	0x40020400
 8001620:	20000100 	.word	0x20000100
 8001624:	20000004 	.word	0x20000004

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	@ 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2230      	movs	r2, #48	@ 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f005 fd70 	bl	800711c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <SystemClock_Config+0xd0>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a28      	ldr	r2, [pc, #160]	@ (80016f8 <SystemClock_Config+0xd0>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <SystemClock_Config+0xd0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <SystemClock_Config+0xd4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001674:	4a21      	ldr	r2, [pc, #132]	@ (80016fc <SystemClock_Config+0xd4>)
 8001676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <SystemClock_Config+0xd4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001688:	2309      	movs	r3, #9
 800168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800168c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001692:	2301      	movs	r3, #1
 8001694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80016a4:	2354      	movs	r3, #84	@ 0x54
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ac:	2307      	movs	r3, #7
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f8fd 	bl	80048b4 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016c0:	f000 fa1e 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2102      	movs	r1, #2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fb5f 	bl	8004da4 <HAL_RCC_ClockConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80016ec:	f000 fa08 	bl	8001b00 <Error_Handler>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3750      	adds	r7, #80	@ 0x50
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000

08001700 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001718:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <MX_RTC_Init+0xb0>)
 800171a:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <MX_RTC_Init+0xb4>)
 800171c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001720:	2240      	movs	r2, #64	@ 0x40
 8001722:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001726:	227f      	movs	r2, #127	@ 0x7f
 8001728:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <MX_RTC_Init+0xb0>)
 800172c:	22ff      	movs	r2, #255	@ 0xff
 800172e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001736:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <MX_RTC_Init+0xb0>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001742:	481b      	ldr	r0, [pc, #108]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001744:	f003 fe70 	bl	8005428 <HAL_RTC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 f9d7 	bl	8001b00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 11;
 8001752:	230b      	movs	r3, #11
 8001754:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8001756:	233b      	movs	r3, #59	@ 0x3b
 8001758:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 40;
 800175a:	2328      	movs	r3, #40	@ 0x28
 800175c:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	480f      	ldr	r0, [pc, #60]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001772:	f003 feda 	bl	800552a <HAL_RTC_SetTime>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800177c:	f000 f9c0 	bl	8001b00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001780:	2301      	movs	r3, #1
 8001782:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001784:	2309      	movs	r3, #9
 8001786:	707b      	strb	r3, [r7, #1]
  sDate.Date = 29;
 8001788:	231d      	movs	r3, #29
 800178a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 25;
 800178c:	2319      	movs	r3, #25
 800178e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <MX_RTC_Init+0xb0>)
 8001798:	f003 ffbf 	bl	800571a <HAL_RTC_SetDate>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80017a2:	f000 f9ad 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000098 	.word	0x20000098
 80017b4:	40002800 	.word	0x40002800

080017b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d4:	4b41      	ldr	r3, [pc, #260]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017d6:	4a42      	ldr	r2, [pc, #264]	@ (80018e0 <MX_TIM1_Init+0x128>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017da:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 26;
 80017e6:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017e8:	221a      	movs	r2, #26
 80017ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f2:	4b3a      	ldr	r3, [pc, #232]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <MX_TIM1_Init+0x124>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017fe:	4837      	ldr	r0, [pc, #220]	@ (80018dc <MX_TIM1_Init+0x124>)
 8001800:	f004 f91a 	bl	8005a38 <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800180a:	f000 f979 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4619      	mov	r1, r3
 800181a:	4830      	ldr	r0, [pc, #192]	@ (80018dc <MX_TIM1_Init+0x124>)
 800181c:	f004 f9da 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001826:	f000 f96b 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800182a:	2320      	movs	r3, #32
 800182c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4619      	mov	r1, r3
 8001836:	4829      	ldr	r0, [pc, #164]	@ (80018dc <MX_TIM1_Init+0x124>)
 8001838:	f004 fbae 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001842:	f000 f95d 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  {
    // TIM1 실제 클럭(84e6 또는 168e6) 확인 후 필요한 fps로 ARR 계산
    const uint32_t tim1_clk_hz = 84000000u;   // APB2=84MHz일 때
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <MX_TIM1_Init+0x12c>)
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint32_t fps_target  = 150u;        // 원하는 프레임률
 800184a:	2396      	movs	r3, #150	@ 0x96
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint32_t words       = LED_WORDS_PER_FRAME; // 10480
 800184e:	f642 03f0 	movw	r3, #10480	@ 0x28f0
 8001852:	623b      	str	r3, [r7, #32]
    const uint32_t f_update    = fps_target * words;  // 필요 업데이트 주파수
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	6a3a      	ldr	r2, [r7, #32]
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

    // PSC=0 고정, ARR = round(tim1_clk / f_update) - 1
    uint32_t arr_plus_1 = (tim1_clk_hz + f_update/2) / f_update;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	085a      	lsrs	r2, r3, #1
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	441a      	add	r2, r3
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (arr_plus_1 < 1) arr_plus_1 = 1;
 800186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <MX_TIM1_Init+0xc0>
 8001874:	2301      	movs	r3, #1
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t arr = arr_plus_1 - 1;
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	3b01      	subs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]

    __HAL_TIM_DISABLE(&htim1);
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_TIM1_Init+0x124>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <MX_TIM1_Init+0xf6>
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <MX_TIM1_Init+0x124>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	f240 4344 	movw	r3, #1092	@ 0x444
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <MX_TIM1_Init+0xf6>
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_PRESCALER(&htim1, 0);
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018be:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_GenerateEvent(&htim1, TIM_EVENTSOURCE_UPDATE);
 80018cc:	2101      	movs	r1, #1
 80018ce:	4803      	ldr	r0, [pc, #12]	@ (80018dc <MX_TIM1_Init+0x124>)
 80018d0:	f004 f95a 	bl	8005b88 <HAL_TIM_GenerateEvent>
  }

  /* USER CODE END TIM1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3730      	adds	r7, #48	@ 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000b8 	.word	0x200000b8
 80018e0:	40010000 	.word	0x40010000
 80018e4:	0501bd00 	.word	0x0501bd00

080018e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <MX_USART2_UART_Init+0x50>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_USART2_UART_Init+0x4c>)
 8001920:	f004 fba6 	bl	8006070 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192a:	f000 f8e9 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000160 	.word	0x20000160
 8001938:	40004400 	.word	0x40004400

0800193c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_DMA_Init+0x3c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <MX_DMA_Init+0x3c>)
 800194c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_DMA_Init+0x3c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2044      	movs	r0, #68	@ 0x44
 8001964:	f001 f88f 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001968:	2044      	movs	r0, #68	@ 0x44
 800196a:	f001 f8a8 	bl	8002abe <HAL_NVIC_EnableIRQ>

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b3b      	ldr	r3, [pc, #236]	@ (8001a84 <MX_GPIO_Init+0x108>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a84 <MX_GPIO_Init+0x108>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a33      	ldr	r2, [pc, #204]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a25      	ldr	r2, [pc, #148]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <MX_GPIO_Init+0x108>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2120      	movs	r1, #32
 8001a06:	4820      	ldr	r0, [pc, #128]	@ (8001a88 <MX_GPIO_Init+0x10c>)
 8001a08:	f002 ff3c 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|G1_Pin|B1_Pin|A_Pin
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f24f 217f 	movw	r1, #62079	@ 0xf27f
 8001a12:	481e      	ldr	r0, [pc, #120]	@ (8001a8c <MX_GPIO_Init+0x110>)
 8001a14:	f002 ff36 	bl	8004884 <HAL_GPIO_WritePin>
                          |B_Pin|C_Pin|D_Pin|R2_Pin
                          |G2_Pin|B2_Pin|CLK_Pin|LAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a1e:	481b      	ldr	r0, [pc, #108]	@ (8001a8c <MX_GPIO_Init+0x110>)
 8001a20:	f002 ff30 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a24:	2320      	movs	r3, #32
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4813      	ldr	r0, [pc, #76]	@ (8001a88 <MX_GPIO_Init+0x10c>)
 8001a3c:	f002 fda0 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin G1_Pin B1_Pin A_Pin
                           B_Pin C_Pin D_Pin R2_Pin
                           G2_Pin B2_Pin CLK_Pin */
  GPIO_InitStruct.Pin = R1_Pin|G1_Pin|B1_Pin|A_Pin
 8001a40:	f24f 037f 	movw	r3, #61567	@ 0xf07f
 8001a44:	617b      	str	r3, [r7, #20]
                          |B_Pin|C_Pin|D_Pin|R2_Pin
                          |G2_Pin|B2_Pin|CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_GPIO_Init+0x110>)
 8001a5a:	f002 fd91 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : OE_Pin LAT_Pin */
  GPIO_InitStruct.Pin = OE_Pin|LAT_Pin;
 8001a5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_GPIO_Init+0x110>)
 8001a78:	f002 fd82 	bl	8004580 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400

08001a90 <rtc_get_hms_ampm>:

/* USER CODE BEGIN 4 */

void rtc_get_hms_ampm(uint8_t *hh12, uint8_t *mm, uint8_t *ss, bool *is_am)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef t; RTC_DateTypeDef d;

  HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4815      	ldr	r0, [pc, #84]	@ (8001afc <rtc_get_hms_ampm+0x6c>)
 8001aa8:	f003 fdd9 	bl	800565e <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN); // 반드시 함께 호출
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4811      	ldr	r0, [pc, #68]	@ (8001afc <rtc_get_hms_ampm+0x6c>)
 8001ab6:	f003 feb4 	bl	8005822 <HAL_RTC_GetDate>

  *mm = t.Minutes;
 8001aba:	7e7a      	ldrb	r2, [r7, #25]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	701a      	strb	r2, [r3, #0]
  *ss = t.Seconds;
 8001ac0:	7eba      	ldrb	r2, [r7, #26]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	701a      	strb	r2, [r3, #0]
  *is_am = (t.TimeFormat == RTC_HOURFORMAT12_AM);
 8001ac6:	7efb      	ldrb	r3, [r7, #27]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	701a      	strb	r2, [r3, #0]

  uint8_t h = t.Hours; if (h == 0) h = 12; // 12h 보호
 8001ad6:	7e3b      	ldrb	r3, [r7, #24]
 8001ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <rtc_get_hms_ampm+0x5a>
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *hh12 = h;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	3730      	adds	r7, #48	@ 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000098 	.word	0x20000098

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <Error_Handler+0x8>

08001b0c <addr_word_from_row>:
#include "color.h"   // color_u8_to_u5 or color_u8_to_bits
#include "anim.h"
#include "font.h"

// --- 내부 유틸: 행 주소(A/B/C/D) 비트 세팅 ---
static inline uint32_t addr_word_from_row(int row) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    uint32_t w = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
    w |= (row & 0x1) ? LED_BSRR_A_SET : LED_BSRR_A_CLR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <addr_word_from_row+0x1c>
 8001b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b26:	e001      	b.n	8001b2c <addr_word_from_row+0x20>
 8001b28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    w |= (row & 0x2) ? LED_BSRR_B_SET : LED_BSRR_B_CLR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <addr_word_from_row+0x36>
 8001b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b40:	e001      	b.n	8001b46 <addr_word_from_row+0x3a>
 8001b42:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    w |= (row & 0x4) ? LED_BSRR_C_SET : LED_BSRR_C_CLR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <addr_word_from_row+0x50>
 8001b56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b5a:	e001      	b.n	8001b60 <addr_word_from_row+0x54>
 8001b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
    w |= (row & 0x8) ? LED_BSRR_D_SET : LED_BSRR_D_CLR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <addr_word_from_row+0x6a>
 8001b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b74:	e001      	b.n	8001b7a <addr_word_from_row+0x6e>
 8001b76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
    return w;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <cw_from_bits>:

// --- 내부 유틸: 한 픽셀의 RGB 비트(상/하 동일) -> BSRR 워드 ---
// -- 상하 분리 09/29
static inline uint32_t cw_from_bits(bool r1, bool g1, bool b1, bool r2, bool g2, bool b2 ) {
 8001b8c:	b490      	push	{r4, r7}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71bb      	strb	r3, [r7, #6]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	717b      	strb	r3, [r7, #5]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	713b      	strb	r3, [r7, #4]
    uint32_t w = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
    w |= r1 ? LED_BSRR_R1_SET : LED_BSRR_R1_CLR;
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <cw_from_bits+0x2c>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e001      	b.n	8001bbc <cw_from_bits+0x30>
 8001bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    w |= g1 ? LED_BSRR_G1_SET : LED_BSRR_G1_CLR;
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <cw_from_bits+0x40>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e001      	b.n	8001bd0 <cw_from_bits+0x44>
 8001bcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    w |= b1 ? LED_BSRR_B1_SET : LED_BSRR_B1_CLR;
 8001bd6:	797b      	ldrb	r3, [r7, #5]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <cw_from_bits+0x54>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e001      	b.n	8001be4 <cw_from_bits+0x58>
 8001be0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
    w |= r2 ? LED_BSRR_R2_SET : LED_BSRR_R2_CLR;
 8001bea:	793b      	ldrb	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <cw_from_bits+0x68>
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	e001      	b.n	8001bf8 <cw_from_bits+0x6c>
 8001bf4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    w |= g2 ? LED_BSRR_G2_SET : LED_BSRR_G2_CLR;
 8001bfe:	7e3b      	ldrb	r3, [r7, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <cw_from_bits+0x7c>
 8001c04:	2310      	movs	r3, #16
 8001c06:	e001      	b.n	8001c0c <cw_from_bits+0x80>
 8001c08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    w |= b2 ? LED_BSRR_B2_SET : LED_BSRR_B2_CLR;
 8001c12:	7f3b      	ldrb	r3, [r7, #28]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <cw_from_bits+0x90>
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e001      	b.n	8001c20 <cw_from_bits+0x94>
 8001c1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    return w;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc90      	pop	{r4, r7}
 8001c30:	4770      	bx	lr

08001c32 <u8_to_plane>:

// --- 내부 유틸: 8비트 -> 5비트(LED_BITPLANES에 자동 적응 버전 쓰려면 color_u8_to_bits 사용) ---
static inline uint8_t u8_to_plane(uint8_t v8) {
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
    return color_u8_to_u5(v8);   // BP=5 전제. 자동적응 버전이면 color_u8_to_bits(v8)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f980 	bl	8000f44 <color_u8_to_u5>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <build_from_pixel_fn>:

// --- 내부 공통 빌더: per-pixel 데이터 출력 ---
// 흐름: [OE High+행주소 클리어] → (각 픽셀: 데이터+CLK L, CLK H) → LAT H → LAT L + OE L
static void build_from_pixel_fn(uint32_t *fb,
                                void (*pixel_rgb)(int x,int y,uint8_t* r,uint8_t* g,uint8_t* b))
{
 8001c4e:	b590      	push	{r4, r7, lr}
 8001c50:	b091      	sub	sp, #68	@ 0x44
 8001c52:	af02      	add	r7, sp, #8
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
    uint32_t *p = fb;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	637b      	str	r3, [r7, #52]	@ 0x34

    // 상/하 절반(행수=H/2)만 스캔, 각 행은 상/하 페어
    for (int bp = 0; bp < LED_BITPLANES; ++bp) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c60:	e0d1      	b.n	8001e06 <build_from_pixel_fn+0x1b8>

        for (int row = 0; row < (LED_PANEL_H/2); ++row) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	e0c7      	b.n	8001df8 <build_from_pixel_fn+0x1aa>

            // 1) 프리셋: OE=High(블랭크) + 주소 세팅 + RGB 모두 클리어
            uint32_t rgb_all_clr = LED_BSRR_CLR(R1_Pin|G1_Pin|B1_Pin|R2_Pin|G2_Pin|B2_Pin);
 8001c68:	f44f 137c 	mov.w	r3, #4128768	@ 0x3f0000
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
            *p++ = LED_BSRR_OE_SET | addr_word_from_row(row) | rgb_all_clr;
 8001c6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c70:	f7ff ff4c 	bl	8001b0c <addr_word_from_row>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7c:	1d19      	adds	r1, r3, #4
 8001c7e:	6379      	str	r1, [r7, #52]	@ 0x34
 8001c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c84:	601a      	str	r2, [r3, #0]

            // 2) 픽셀 시프트: 각 픽셀마다 데이터 세팅 후 CLK 토글
            for (int x = 0; x < LED_PANEL_W; ++x) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8a:	e0a2      	b.n	8001dd2 <build_from_pixel_fn+0x184>
                // (x,row)의 색을 8비트로 얻음
            	// 상하 색 구분!
                uint8_t r1,g1,b1,r2,g2,b2;
                pixel_rgb(x, row,           &r1,&g1,&b1);          // top half
 8001c8c:	f107 0112 	add.w	r1, r7, #18
 8001c90:	f107 0213 	add.w	r2, r7, #19
 8001c94:	f107 0311 	add.w	r3, r7, #17
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	683c      	ldr	r4, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ca2:	47a0      	blx	r4
                pixel_rgb(x, row+LED_ROWS,  &r2,&g2,&b2);          // bottom half
 8001ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca6:	f103 0110 	add.w	r1, r3, #16
 8001caa:	f107 000f 	add.w	r0, r7, #15
 8001cae:	f107 0210 	add.w	r2, r7, #16
 8001cb2:	f107 030e 	add.w	r3, r7, #14
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	683c      	ldr	r4, [r7, #0]
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cbe:	47a0      	blx	r4

                // 8→5비트 → 현재 비트플레인의 bit 추출
                uint8_t rN1 = u8_to_plane(r1);
 8001cc0:	7cfb      	ldrb	r3, [r7, #19]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffb5 	bl	8001c32 <u8_to_plane>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                uint8_t gN1 = u8_to_plane(g1);
 8001cce:	7cbb      	ldrb	r3, [r7, #18]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ffae 	bl	8001c32 <u8_to_plane>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                uint8_t bN1 = u8_to_plane(b1);
 8001cdc:	7c7b      	ldrb	r3, [r7, #17]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffa7 	bl	8001c32 <u8_to_plane>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                uint8_t rN2 = u8_to_plane(r2);
 8001cea:	7c3b      	ldrb	r3, [r7, #16]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffa0 	bl	8001c32 <u8_to_plane>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f887 3020 	strb.w	r3, [r7, #32]
                uint8_t gN2 = u8_to_plane(g2);
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff99 	bl	8001c32 <u8_to_plane>
 8001d00:	4603      	mov	r3, r0
 8001d02:	77fb      	strb	r3, [r7, #31]
                uint8_t bN2 = u8_to_plane(b2);
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff93 	bl	8001c32 <u8_to_plane>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	77bb      	strb	r3, [r7, #30]

                // 이번 비트플레인의 on/off
                bool r1_on = (rN1 >> bp) & 1;
 8001d10:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d16:	fa42 f303 	asr.w	r3, r2, r3
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	777b      	strb	r3, [r7, #29]
                bool g1_on = (gN1 >> bp) & 1;
 8001d28:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2e:	fa42 f303 	asr.w	r3, r2, r3
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	773b      	strb	r3, [r7, #28]
                bool b1_on = (bN1 >> bp) & 1;
 8001d40:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d46:	fa42 f303 	asr.w	r3, r2, r3
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	76fb      	strb	r3, [r7, #27]
                bool r2_on = (rN2 >> bp) & 1;
 8001d58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5e:	fa42 f303 	asr.w	r3, r2, r3
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	76bb      	strb	r3, [r7, #26]
                bool g2_on = (gN2 >> bp) & 1;
 8001d70:	7ffa      	ldrb	r2, [r7, #31]
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	fa42 f303 	asr.w	r3, r2, r3
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	767b      	strb	r3, [r7, #25]
                bool b2_on = (bN2 >> bp) & 1;
 8001d86:	7fba      	ldrb	r2, [r7, #30]
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	fa42 f303 	asr.w	r3, r2, r3
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	763b      	strb	r3, [r7, #24]

                //uint32_t cw = cw_from_bits(r_on, g_on, b_on);
                //cw_from_bits 사용!
                uint32_t cw = cw_from_bits(r1_on,g1_on,b1_on, r2_on,g2_on,b2_on);
 8001d9c:	7ebc      	ldrb	r4, [r7, #26]
 8001d9e:	7efa      	ldrb	r2, [r7, #27]
 8001da0:	7f39      	ldrb	r1, [r7, #28]
 8001da2:	7f78      	ldrb	r0, [r7, #29]
 8001da4:	7e3b      	ldrb	r3, [r7, #24]
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	7e7b      	ldrb	r3, [r7, #25]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	4623      	mov	r3, r4
 8001dae:	f7ff feed 	bl	8001b8c <cw_from_bits>
 8001db2:	6178      	str	r0, [r7, #20]

                // 데이터 세팅 + CLK Low
                *p++ = cw | LED_BSRR_CLK_CLR;
 8001db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db6:	1d1a      	adds	r2, r3, #4
 8001db8:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001dc0:	601a      	str	r2, [r3, #0]
                // CLK High (래치-into-shift)
                *p++ = LED_BSRR_CLK_SET;
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc4:	1d1a      	adds	r2, r3, #4
 8001dc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dc8:	2240      	movs	r2, #64	@ 0x40
 8001dca:	601a      	str	r2, [r3, #0]
            for (int x = 0; x < LED_PANEL_W; ++x) {
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dce:	3301      	adds	r3, #1
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dd6:	f77f af59 	ble.w	8001c8c <build_from_pixel_fn+0x3e>
            }

            // 3) LATCH → 표시 시작(OE Low)
            *p++ = LED_BSRR_LAT_SET;
 8001dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ddc:	1d1a      	adds	r2, r3, #4
 8001dde:	637a      	str	r2, [r7, #52]	@ 0x34
 8001de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de4:	601a      	str	r2, [r3, #0]
            *p++ = (LED_BSRR_LAT_CLR | LED_BSRR_OE_CLR);
 8001de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de8:	1d1a      	adds	r2, r3, #4
 8001dea:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dec:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8001df0:	601a      	str	r2, [r3, #0]
        for (int row = 0; row < (LED_PANEL_H/2); ++row) {
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	3301      	adds	r3, #1
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f77f af34 	ble.w	8001c68 <build_from_pixel_fn+0x1a>
    for (int bp = 0; bp < LED_BITPLANES; ++bp) {
 8001e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e02:	3301      	adds	r3, #1
 8001e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	f77f af2a 	ble.w	8001c62 <build_from_pixel_fn+0x14>
        }
    }
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	373c      	adds	r7, #60	@ 0x3c
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}

08001e18 <small_get_px>:
    build_from_pixel_fn(fb, rainbow_px);
}


// ---- 내부: 비트 읽기 헬퍼 ----
static inline bool small_get_px(const uint8_t bmp[SMALL_FONT_HEIGHT][1], int x, int y) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
    if ((unsigned)y >= SMALL_FONT_HEIGHT || (unsigned)x >= SMALL_FONT_WIDTH) return false;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b0b      	cmp	r3, #11
 8001e28:	d802      	bhi.n	8001e30 <small_get_px+0x18>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d901      	bls.n	8001e34 <small_get_px+0x1c>
 8001e30:	2300      	movs	r3, #0
 8001e32:	e011      	b.n	8001e58 <small_get_px+0x40>
    uint8_t byte = bmp[y][0];
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	75fb      	strb	r3, [r7, #23]
    return (byte >> (7 - x)) & 1;
 8001e3e:	7dfa      	ldrb	r2, [r7, #23]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	fa42 f303 	asr.w	r3, r2, r3
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <big_get_px>:
static inline bool big_get_px(const uint8_t bmp[BIG_FONT_HEIGHT][2], int x, int y) {
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
    if ((unsigned)y >= BIG_FONT_HEIGHT || (unsigned)x >= BIG_FONT_WIDTH) return false;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d802      	bhi.n	8001e7a <big_get_px+0x18>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d901      	bls.n	8001e7e <big_get_px+0x1c>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e019      	b.n	8001eb2 <big_get_px+0x50>
    const uint8_t byte = bmp[y][x >> 3];          // 0 or 1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	441a      	add	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	10db      	asrs	r3, r3, #3
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	75fb      	strb	r3, [r7, #23]
    const uint8_t bit  = 7 - (x & 7);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	75bb      	strb	r3, [r7, #22]
    return (byte >> bit) & 1;
 8001e9c:	7dfa      	ldrb	r2, [r7, #23]
 8001e9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ea0:	fa42 f303 	asr.w	r3, r2, r3
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <big_digit>:

// ---- 내부: 숫자/콜론 포인터 선택 ----
static const uint8_t (*big_digit(int d))[2] {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    switch (d) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	d82a      	bhi.n	8001f20 <big_digit+0x64>
 8001eca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <big_digit+0x14>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ef9 	.word	0x08001ef9
 8001ed4:	08001efd 	.word	0x08001efd
 8001ed8:	08001f01 	.word	0x08001f01
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	08001f0d 	.word	0x08001f0d
 8001ee8:	08001f11 	.word	0x08001f11
 8001eec:	08001f15 	.word	0x08001f15
 8001ef0:	08001f19 	.word	0x08001f19
 8001ef4:	08001f1d 	.word	0x08001f1d
        case 0: return big_bitmap_0;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <big_digit+0x70>)
 8001efa:	e012      	b.n	8001f22 <big_digit+0x66>
        case 1: return big_bitmap_1;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <big_digit+0x74>)
 8001efe:	e010      	b.n	8001f22 <big_digit+0x66>
        case 2: return big_bitmap_2;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <big_digit+0x78>)
 8001f02:	e00e      	b.n	8001f22 <big_digit+0x66>
        case 3: return big_bitmap_3;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <big_digit+0x7c>)
 8001f06:	e00c      	b.n	8001f22 <big_digit+0x66>
        case 4: return big_bitmap_4;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <big_digit+0x80>)
 8001f0a:	e00a      	b.n	8001f22 <big_digit+0x66>
        case 5: return big_bitmap_5;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <big_digit+0x84>)
 8001f0e:	e008      	b.n	8001f22 <big_digit+0x66>
        case 6: return big_bitmap_6;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <big_digit+0x88>)
 8001f12:	e006      	b.n	8001f22 <big_digit+0x66>
        case 7: return big_bitmap_7;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <big_digit+0x8c>)
 8001f16:	e004      	b.n	8001f22 <big_digit+0x66>
        case 8: return big_bitmap_8;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <big_digit+0x90>)
 8001f1a:	e002      	b.n	8001f22 <big_digit+0x66>
        case 9: return big_bitmap_9;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <big_digit+0x94>)
 8001f1e:	e000      	b.n	8001f22 <big_digit+0x66>
        default: return NULL;
 8001f20:	2300      	movs	r3, #0
    }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	080084e0 	.word	0x080084e0
 8001f30:	08008500 	.word	0x08008500
 8001f34:	08008520 	.word	0x08008520
 8001f38:	08008540 	.word	0x08008540
 8001f3c:	08008560 	.word	0x08008560
 8001f40:	08008580 	.word	0x08008580
 8001f44:	080085a0 	.word	0x080085a0
 8001f48:	080085c0 	.word	0x080085c0
 8001f4c:	080085e0 	.word	0x080085e0
 8001f50:	08008600 	.word	0x08008600

08001f54 <make_layout>:
    int cx,  cy;    // 콜론
    int mx0, my0;   // 분(ten)
    int mx1, my1;   // 분(one)
} layout_t;

static layout_t make_layout(void) {
 8001f54:	b4b0      	push	{r4, r5, r7}
 8001f56:	b08f      	sub	sp, #60	@ 0x3c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    layout_t L;
    L.ax = 25; L.ay = 2;
 8001f5c:	2319      	movs	r3, #25
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	2302      	movs	r3, #2
 8001f62:	60fb      	str	r3, [r7, #12]

    // 가독성 위해 약간 좌우 간격을 조정한 배치
    L.hy0 = 16; L.hx0 =  2;                 // 시 10의 자리
 8001f64:	2310      	movs	r3, #16
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
    L.hy1 = 16; L.hx1 =  2 + BIG_FONT_WIDTH + 2; // 시 1의 자리
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	230f      	movs	r3, #15
 8001f72:	61bb      	str	r3, [r7, #24]

    L.cy  = 16; L.cx  =  L.hx1 + BIG_FONT_WIDTH + 3;  // 콜론 x
 8001f74:	2310      	movs	r3, #16
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	330e      	adds	r3, #14
 8001f7c:	623b      	str	r3, [r7, #32]
    L.my0 = 16; L.mx0 =  L.cx + 8 + 3;           // 분 10의 자리
 8001f7e:	2310      	movs	r3, #16
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	330b      	adds	r3, #11
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    L.my1 = 16; L.mx1 =  L.mx0 + BIG_FONT_WIDTH + 2;
 8001f88:	2310      	movs	r3, #16
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8e:	330d      	adds	r3, #13
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
    return L;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	461d      	mov	r5, r3
 8001f96:	f107 0408 	add.w	r4, r7, #8
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fa6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	373c      	adds	r7, #60	@ 0x3c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bcb0      	pop	{r4, r5, r7}
 8001fb2:	4770      	bx	lr

08001fb4 <time_pixel_cb>:
    uint8_t br, bg, bb;   // background
    layout_t L;
} time_ctx_t;

static void time_pixel_cb(int x, int y, uint8_t* r, uint8_t* g, uint8_t* b)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b09c      	sub	sp, #112	@ 0x70
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
    static time_ctx_t ctx;           // build 호출 직전에 memcpy로 채워짐
    extern time_ctx_t __time_ctx_src;
    memcpy(&ctx, &__time_ctx_src, sizeof(ctx));
 8001fc2:	4a97      	ldr	r2, [pc, #604]	@ (8002220 <time_pixel_cb+0x26c>)
 8001fc4:	4b97      	ldr	r3, [pc, #604]	@ (8002224 <time_pixel_cb+0x270>)
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // 기본 배경
    *r = ctx.br; *g = ctx.bg; *b = ctx.bb;
 8001fde:	4b90      	ldr	r3, [pc, #576]	@ (8002220 <time_pixel_cb+0x26c>)
 8001fe0:	7b1a      	ldrb	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8002220 <time_pixel_cb+0x26c>)
 8001fe8:	7b5a      	ldrb	r2, [r3, #13]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <time_pixel_cb+0x26c>)
 8001ff0:	7b9a      	ldrb	r2, [r3, #14]
 8001ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ff6:	701a      	strb	r2, [r3, #0]

    // ===== 상단 am/pm =====
    if (x >= ctx.L.ax && x < ctx.L.ax + SMALL_FONT_WIDTH &&
 8001ff8:	4b89      	ldr	r3, [pc, #548]	@ (8002220 <time_pixel_cb+0x26c>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	db49      	blt.n	8002096 <time_pixel_cb+0xe2>
 8002002:	4b87      	ldr	r3, [pc, #540]	@ (8002220 <time_pixel_cb+0x26c>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	3306      	adds	r3, #6
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	429a      	cmp	r2, r3
 800200c:	dc43      	bgt.n	8002096 <time_pixel_cb+0xe2>
        y >= ctx.L.ay && y < ctx.L.ay + SMALL_FONT_HEIGHT) {
 800200e:	4b84      	ldr	r3, [pc, #528]	@ (8002220 <time_pixel_cb+0x26c>)
 8002010:	695b      	ldr	r3, [r3, #20]
    if (x >= ctx.L.ax && x < ctx.L.ax + SMALL_FONT_WIDTH &&
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	db3e      	blt.n	8002096 <time_pixel_cb+0xe2>
        y >= ctx.L.ay && y < ctx.L.ay + SMALL_FONT_HEIGHT) {
 8002018:	4b81      	ldr	r3, [pc, #516]	@ (8002220 <time_pixel_cb+0x26c>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	330b      	adds	r3, #11
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	dc38      	bgt.n	8002096 <time_pixel_cb+0xe2>
        int sx = x - ctx.L.ax, sy = y - ctx.L.ay;
 8002024:	4b7e      	ldr	r3, [pc, #504]	@ (8002220 <time_pixel_cb+0x26c>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800202e:	4b7c      	ldr	r3, [pc, #496]	@ (8002220 <time_pixel_cb+0x26c>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	667b      	str	r3, [r7, #100]	@ 0x64
        bool on = false;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        if (ctx.is_am) {
 800203e:	4b78      	ldr	r3, [pc, #480]	@ (8002220 <time_pixel_cb+0x26c>)
 8002040:	7a1b      	ldrb	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <time_pixel_cb+0xaa>
            if (small_get_px(bitmap_A, sx, sy)) on = true;
 8002046:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002048:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800204a:	4877      	ldr	r0, [pc, #476]	@ (8002228 <time_pixel_cb+0x274>)
 800204c:	f7ff fee4 	bl	8001e18 <small_get_px>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00e      	beq.n	8002074 <time_pixel_cb+0xc0>
 8002056:	2301      	movs	r3, #1
 8002058:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800205c:	e00a      	b.n	8002074 <time_pixel_cb+0xc0>
        } else {
            // 'cP' + 'M' (네 bitmap_cP, bitmap_M 그대로 활용)
            if (small_get_px(bitmap_cP, sx, sy)) on = true;
 800205e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002060:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002062:	4872      	ldr	r0, [pc, #456]	@ (800222c <time_pixel_cb+0x278>)
 8002064:	f7ff fed8 	bl	8001e18 <small_get_px>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <time_pixel_cb+0xc0>
 800206e:	2301      	movs	r3, #1
 8002070:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        }
        if (on) {  // 전경색 적용
 8002074:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <time_pixel_cb+0xe2>
               *r = ctx.fr; *g = ctx.fg; *b = ctx.fb;
 800207c:	4b68      	ldr	r3, [pc, #416]	@ (8002220 <time_pixel_cb+0x26c>)
 800207e:	7a5a      	ldrb	r2, [r3, #9]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <time_pixel_cb+0x26c>)
 8002086:	7a9a      	ldrb	r2, [r3, #10]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	4b64      	ldr	r3, [pc, #400]	@ (8002220 <time_pixel_cb+0x26c>)
 800208e:	7ada      	ldrb	r2, [r3, #11]
 8002090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002094:	701a      	strb	r2, [r3, #0]
        }
    }
    // M (오른쪽 8px)
	if (x >= ctx.L.ax + SMALL_FONT_WIDTH && x < ctx.L.ax + 2*SMALL_FONT_WIDTH &&
 8002096:	4b62      	ldr	r3, [pc, #392]	@ (8002220 <time_pixel_cb+0x26c>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	3306      	adds	r3, #6
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dd30      	ble.n	8002104 <time_pixel_cb+0x150>
 80020a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002220 <time_pixel_cb+0x26c>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	330d      	adds	r3, #13
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dc2a      	bgt.n	8002104 <time_pixel_cb+0x150>
		y >= ctx.L.ay && y < ctx.L.ay + SMALL_FONT_HEIGHT)
 80020ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <time_pixel_cb+0x26c>)
 80020b0:	695b      	ldr	r3, [r3, #20]
	if (x >= ctx.L.ax + SMALL_FONT_WIDTH && x < ctx.L.ax + 2*SMALL_FONT_WIDTH &&
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	db25      	blt.n	8002104 <time_pixel_cb+0x150>
		y >= ctx.L.ay && y < ctx.L.ay + SMALL_FONT_HEIGHT)
 80020b8:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <time_pixel_cb+0x26c>)
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	330b      	adds	r3, #11
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dc1f      	bgt.n	8002104 <time_pixel_cb+0x150>
	{
		int sx = x - (ctx.L.ax + SMALL_FONT_WIDTH), sy = y - ctx.L.ay;
 80020c4:	4b56      	ldr	r3, [pc, #344]	@ (8002220 <time_pixel_cb+0x26c>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	3307      	adds	r3, #7
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80020d0:	4b53      	ldr	r3, [pc, #332]	@ (8002220 <time_pixel_cb+0x26c>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (small_get_px(bitmap_M, sx, sy)) {                // (x,y) 순서
 80020da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80020dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80020de:	4854      	ldr	r0, [pc, #336]	@ (8002230 <time_pixel_cb+0x27c>)
 80020e0:	f7ff fe9a 	bl	8001e18 <small_get_px>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <time_pixel_cb+0x150>
			*r = ctx.fr; *g = ctx.fg; *b = ctx.fb;
 80020ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <time_pixel_cb+0x26c>)
 80020ec:	7a5a      	ldrb	r2, [r3, #9]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002220 <time_pixel_cb+0x26c>)
 80020f4:	7a9a      	ldrb	r2, [r3, #10]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	4b49      	ldr	r3, [pc, #292]	@ (8002220 <time_pixel_cb+0x26c>)
 80020fc:	7ada      	ldrb	r2, [r3, #11]
 80020fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002102:	701a      	strb	r2, [r3, #0]
		}
	}

    // ===== 큰 숫자/콜론 =====
    const int h10 = (ctx.hour   / 10) % 10;
 8002104:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <time_pixel_cb+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <time_pixel_cb+0x280>)
 800210a:	fb82 1203 	smull	r1, r2, r2, r3
 800210e:	1092      	asrs	r2, r2, #2
 8002110:	17db      	asrs	r3, r3, #31
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <time_pixel_cb+0x280>)
 8002116:	fb83 1302 	smull	r1, r3, r3, r2
 800211a:	1099      	asrs	r1, r3, #2
 800211c:	17d3      	asrs	r3, r2, #31
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	65bb      	str	r3, [r7, #88]	@ 0x58
    const int h01 = (ctx.hour   % 10);
 800212c:	4b3c      	ldr	r3, [pc, #240]	@ (8002220 <time_pixel_cb+0x26c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <time_pixel_cb+0x280>)
 8002132:	fb83 1302 	smull	r1, r3, r3, r2
 8002136:	1099      	asrs	r1, r3, #2
 8002138:	17d3      	asrs	r3, r2, #31
 800213a:	1ac9      	subs	r1, r1, r3
 800213c:	460b      	mov	r3, r1
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	657b      	str	r3, [r7, #84]	@ 0x54
    const int m10 = (ctx.minute / 10) % 10;
 8002148:	4b35      	ldr	r3, [pc, #212]	@ (8002220 <time_pixel_cb+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <time_pixel_cb+0x280>)
 800214e:	fb82 1203 	smull	r1, r2, r2, r3
 8002152:	1092      	asrs	r2, r2, #2
 8002154:	17db      	asrs	r3, r3, #31
 8002156:	1ad2      	subs	r2, r2, r3
 8002158:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <time_pixel_cb+0x280>)
 800215a:	fb83 1302 	smull	r1, r3, r3, r2
 800215e:	1099      	asrs	r1, r3, #2
 8002160:	17d3      	asrs	r3, r2, #31
 8002162:	1ac9      	subs	r1, r1, r3
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	653b      	str	r3, [r7, #80]	@ 0x50
    const int m01 = (ctx.minute % 10);
 8002170:	4b2b      	ldr	r3, [pc, #172]	@ (8002220 <time_pixel_cb+0x26c>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <time_pixel_cb+0x280>)
 8002176:	fb83 1302 	smull	r1, r3, r3, r2
 800217a:	1099      	asrs	r1, r3, #2
 800217c:	17d3      	asrs	r3, r2, #31
 800217e:	1ac9      	subs	r1, r1, r3
 8002180:	460b      	mov	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t (*H10)[2] = big_digit(h10);
 800218c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800218e:	f7ff fe95 	bl	8001ebc <big_digit>
 8002192:	64b8      	str	r0, [r7, #72]	@ 0x48
    const uint8_t (*H01)[2] = big_digit(h01);
 8002194:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002196:	f7ff fe91 	bl	8001ebc <big_digit>
 800219a:	6478      	str	r0, [r7, #68]	@ 0x44
    const uint8_t (*M10)[2] = big_digit(m10);
 800219c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800219e:	f7ff fe8d 	bl	8001ebc <big_digit>
 80021a2:	6438      	str	r0, [r7, #64]	@ 0x40
    const uint8_t (*M01)[2] = big_digit(m01);
 80021a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021a6:	f7ff fe89 	bl	8001ebc <big_digit>
 80021aa:	63f8      	str	r0, [r7, #60]	@ 0x3c

    // 시 10의 자리
    if (x >= ctx.L.hx0 && x < ctx.L.hx0 + BIG_FONT_WIDTH &&
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <time_pixel_cb+0x26c>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	db40      	blt.n	8002238 <time_pixel_cb+0x284>
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <time_pixel_cb+0x26c>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	330a      	adds	r3, #10
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dc3a      	bgt.n	8002238 <time_pixel_cb+0x284>
        y >= ctx.L.hy0 && y < ctx.L.hy0 + BIG_FONT_HEIGHT && H10) {
 80021c2:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <time_pixel_cb+0x26c>)
 80021c4:	69db      	ldr	r3, [r3, #28]
    if (x >= ctx.L.hx0 && x < ctx.L.hx0 + BIG_FONT_WIDTH &&
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	db35      	blt.n	8002238 <time_pixel_cb+0x284>
        y >= ctx.L.hy0 && y < ctx.L.hy0 + BIG_FONT_HEIGHT && H10) {
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <time_pixel_cb+0x26c>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	330f      	adds	r3, #15
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dc2f      	bgt.n	8002238 <time_pixel_cb+0x284>
 80021d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d02c      	beq.n	8002238 <time_pixel_cb+0x284>
        const int sx = x - ctx.L.hx0, sy = y - ctx.L.hy0;
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <time_pixel_cb+0x26c>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <time_pixel_cb+0x26c>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	637b      	str	r3, [r7, #52]	@ 0x34
        if (big_get_px(H10, sx, sy)) { *r = ctx.fr; *g = ctx.fg; *b = ctx.fb; return; }
 80021f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80021f8:	f7ff fe33 	bl	8001e62 <big_get_px>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01a      	beq.n	8002238 <time_pixel_cb+0x284>
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <time_pixel_cb+0x26c>)
 8002204:	7a5a      	ldrb	r2, [r3, #9]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <time_pixel_cb+0x26c>)
 800220c:	7a9a      	ldrb	r2, [r3, #10]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <time_pixel_cb+0x26c>)
 8002214:	7ada      	ldrb	r2, [r3, #11]
 8002216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e0ed      	b.n	80023fa <time_pixel_cb+0x446>
 800221e:	bf00      	nop
 8002220:	20014968 	.word	0x20014968
 8002224:	20014928 	.word	0x20014928
 8002228:	080084bc 	.word	0x080084bc
 800222c:	080084d4 	.word	0x080084d4
 8002230:	080084c8 	.word	0x080084c8
 8002234:	66666667 	.word	0x66666667
    }
    // 시 1의 자리
    if (x >= ctx.L.hx1 && x < ctx.L.hx1 + BIG_FONT_WIDTH &&
 8002238:	4b71      	ldr	r3, [pc, #452]	@ (8002400 <time_pixel_cb+0x44c>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	429a      	cmp	r2, r3
 8002240:	db33      	blt.n	80022aa <time_pixel_cb+0x2f6>
 8002242:	4b6f      	ldr	r3, [pc, #444]	@ (8002400 <time_pixel_cb+0x44c>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	330a      	adds	r3, #10
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	429a      	cmp	r2, r3
 800224c:	dc2d      	bgt.n	80022aa <time_pixel_cb+0x2f6>
        y >= ctx.L.hy1 && y < ctx.L.hy1 + BIG_FONT_HEIGHT && H01) {
 800224e:	4b6c      	ldr	r3, [pc, #432]	@ (8002400 <time_pixel_cb+0x44c>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if (x >= ctx.L.hx1 && x < ctx.L.hx1 + BIG_FONT_WIDTH &&
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	429a      	cmp	r2, r3
 8002256:	db28      	blt.n	80022aa <time_pixel_cb+0x2f6>
        y >= ctx.L.hy1 && y < ctx.L.hy1 + BIG_FONT_HEIGHT && H01) {
 8002258:	4b69      	ldr	r3, [pc, #420]	@ (8002400 <time_pixel_cb+0x44c>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	330f      	adds	r3, #15
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	dc22      	bgt.n	80022aa <time_pixel_cb+0x2f6>
 8002264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01f      	beq.n	80022aa <time_pixel_cb+0x2f6>
        const int sx = x - ctx.L.hx1, sy = y - ctx.L.hy1;
 800226a:	4b65      	ldr	r3, [pc, #404]	@ (8002400 <time_pixel_cb+0x44c>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
 8002274:	4b62      	ldr	r3, [pc, #392]	@ (8002400 <time_pixel_cb+0x44c>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (big_get_px(H01, sx, sy)) { *r = ctx.fr; *g = ctx.fg; *b = ctx.fb; return; }
 800227e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002282:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002284:	f7ff fded 	bl	8001e62 <big_get_px>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <time_pixel_cb+0x2f6>
 800228e:	4b5c      	ldr	r3, [pc, #368]	@ (8002400 <time_pixel_cb+0x44c>)
 8002290:	7a5a      	ldrb	r2, [r3, #9]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	4b5a      	ldr	r3, [pc, #360]	@ (8002400 <time_pixel_cb+0x44c>)
 8002298:	7a9a      	ldrb	r2, [r3, #10]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	4b58      	ldr	r3, [pc, #352]	@ (8002400 <time_pixel_cb+0x44c>)
 80022a0:	7ada      	ldrb	r2, [r3, #11]
 80022a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e0a7      	b.n	80023fa <time_pixel_cb+0x446>
    }
    // 콜론(폭 16이지만 실제 점은 중앙 근처)
    if (x >= ctx.L.cx && x < ctx.L.cx + BIG_FONT_WIDTH &&
 80022aa:	4b55      	ldr	r3, [pc, #340]	@ (8002400 <time_pixel_cb+0x44c>)
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	db30      	blt.n	8002316 <time_pixel_cb+0x362>
 80022b4:	4b52      	ldr	r3, [pc, #328]	@ (8002400 <time_pixel_cb+0x44c>)
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	330a      	adds	r3, #10
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dc2a      	bgt.n	8002316 <time_pixel_cb+0x362>
        y >= ctx.L.cy && y < ctx.L.cy + BIG_FONT_HEIGHT) {
 80022c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002400 <time_pixel_cb+0x44c>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if (x >= ctx.L.cx && x < ctx.L.cx + BIG_FONT_WIDTH &&
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	db25      	blt.n	8002316 <time_pixel_cb+0x362>
        y >= ctx.L.cy && y < ctx.L.cy + BIG_FONT_HEIGHT) {
 80022ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002400 <time_pixel_cb+0x44c>)
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	330f      	adds	r3, #15
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dc1f      	bgt.n	8002316 <time_pixel_cb+0x362>
        const int sx = x - ctx.L.cx, sy = y - ctx.L.cy;
 80022d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <time_pixel_cb+0x44c>)
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022e0:	4b47      	ldr	r3, [pc, #284]	@ (8002400 <time_pixel_cb+0x44c>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
        if (big_get_px(big_bitmap_COLON, sx, sy)) { *r = ctx.fr; *g = ctx.fg; *b = ctx.fb; return; }
 80022ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ee:	4845      	ldr	r0, [pc, #276]	@ (8002404 <time_pixel_cb+0x450>)
 80022f0:	f7ff fdb7 	bl	8001e62 <big_get_px>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <time_pixel_cb+0x362>
 80022fa:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <time_pixel_cb+0x44c>)
 80022fc:	7a5a      	ldrb	r2, [r3, #9]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	4b3f      	ldr	r3, [pc, #252]	@ (8002400 <time_pixel_cb+0x44c>)
 8002304:	7a9a      	ldrb	r2, [r3, #10]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	4b3d      	ldr	r3, [pc, #244]	@ (8002400 <time_pixel_cb+0x44c>)
 800230c:	7ada      	ldrb	r2, [r3, #11]
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e071      	b.n	80023fa <time_pixel_cb+0x446>
    }
    // 분 10의 자리
    if (x >= ctx.L.mx0 && x < ctx.L.mx0 + BIG_FONT_WIDTH &&
 8002316:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <time_pixel_cb+0x44c>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	db33      	blt.n	8002388 <time_pixel_cb+0x3d4>
 8002320:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <time_pixel_cb+0x44c>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	330a      	adds	r3, #10
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	dc2d      	bgt.n	8002388 <time_pixel_cb+0x3d4>
        y >= ctx.L.my0 && y < ctx.L.my0 + BIG_FONT_HEIGHT && M10) {
 800232c:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <time_pixel_cb+0x44c>)
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (x >= ctx.L.mx0 && x < ctx.L.mx0 + BIG_FONT_WIDTH &&
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	db28      	blt.n	8002388 <time_pixel_cb+0x3d4>
        y >= ctx.L.my0 && y < ctx.L.my0 + BIG_FONT_HEIGHT && M10) {
 8002336:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <time_pixel_cb+0x44c>)
 8002338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233a:	330f      	adds	r3, #15
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	dc22      	bgt.n	8002388 <time_pixel_cb+0x3d4>
 8002342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01f      	beq.n	8002388 <time_pixel_cb+0x3d4>
        const int sx = x - ctx.L.mx0, sy = y - ctx.L.my0;
 8002348:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <time_pixel_cb+0x44c>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	4b2b      	ldr	r3, [pc, #172]	@ (8002400 <time_pixel_cb+0x44c>)
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	61fb      	str	r3, [r7, #28]
        if (big_get_px(M10, sx, sy)) { *r = ctx.fr; *g = ctx.fg; *b = ctx.fb; return; }
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	6a39      	ldr	r1, [r7, #32]
 8002360:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002362:	f7ff fd7e 	bl	8001e62 <big_get_px>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <time_pixel_cb+0x3d4>
 800236c:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <time_pixel_cb+0x44c>)
 800236e:	7a5a      	ldrb	r2, [r3, #9]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <time_pixel_cb+0x44c>)
 8002376:	7a9a      	ldrb	r2, [r3, #10]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <time_pixel_cb+0x44c>)
 800237e:	7ada      	ldrb	r2, [r3, #11]
 8002380:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e038      	b.n	80023fa <time_pixel_cb+0x446>
    }
    // 분 1의 자리
    if (x >= ctx.L.mx1 && x < ctx.L.mx1 + BIG_FONT_WIDTH &&
 8002388:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <time_pixel_cb+0x44c>)
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	db33      	blt.n	80023fa <time_pixel_cb+0x446>
 8002392:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <time_pixel_cb+0x44c>)
 8002394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002396:	330a      	adds	r3, #10
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	429a      	cmp	r2, r3
 800239c:	dc2d      	bgt.n	80023fa <time_pixel_cb+0x446>
        y >= ctx.L.my1 && y < ctx.L.my1 + BIG_FONT_HEIGHT && M01) {
 800239e:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <time_pixel_cb+0x44c>)
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if (x >= ctx.L.mx1 && x < ctx.L.mx1 + BIG_FONT_WIDTH &&
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	db28      	blt.n	80023fa <time_pixel_cb+0x446>
        y >= ctx.L.my1 && y < ctx.L.my1 + BIG_FONT_HEIGHT && M01) {
 80023a8:	4b15      	ldr	r3, [pc, #84]	@ (8002400 <time_pixel_cb+0x44c>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	330f      	adds	r3, #15
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dc22      	bgt.n	80023fa <time_pixel_cb+0x446>
 80023b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01f      	beq.n	80023fa <time_pixel_cb+0x446>
        const int sx = x - ctx.L.mx1, sy = y - ctx.L.my1;
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <time_pixel_cb+0x44c>)
 80023bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <time_pixel_cb+0x44c>)
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
        if (big_get_px(M01, sx, sy)) { *r = ctx.fr; *g = ctx.fg; *b = ctx.fb; return; }
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	69b9      	ldr	r1, [r7, #24]
 80023d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80023d4:	f7ff fd45 	bl	8001e62 <big_get_px>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <time_pixel_cb+0x446>
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <time_pixel_cb+0x44c>)
 80023e0:	7a5a      	ldrb	r2, [r3, #9]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <time_pixel_cb+0x44c>)
 80023e8:	7a9a      	ldrb	r2, [r3, #10]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <time_pixel_cb+0x44c>)
 80023f0:	7ada      	ldrb	r2, [r3, #11]
 80023f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	bf00      	nop
    }
}
 80023fa:	3770      	adds	r7, #112	@ 0x70
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002400:	20014968 	.word	0x20014968
 8002404:	08008620 	.word	0x08008620

08002408 <paint_time_frame>:

void paint_time_frame(uint32_t *fb,
                      int hour, int minute, bool is_am,
                      uint8_t fr, uint8_t fg, uint8_t fbk,
                      uint8_t br, uint8_t bg, uint8_t bb)
{
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b0a0      	sub	sp, #128	@ 0x80
 800240c:	af00      	add	r7, sp, #0
 800240e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002410:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002412:	637a      	str	r2, [r7, #52]	@ 0x34
 8002414:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    time_ctx_t ctx;
    ctx.hour   = hour;
 8002418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241a:	643b      	str	r3, [r7, #64]	@ 0x40
    ctx.minute = minute;
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
    ctx.is_am  = is_am;
 8002420:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002424:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    ctx.fr = fr; ctx.fg = fg; ctx.fb = fbk;
 8002428:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800242c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8002430:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002434:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002438:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800243c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    ctx.br = br; ctx.bg = bg; ctx.bb = bb;
 8002440:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8002444:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002448:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800244c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002450:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8002454:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    ctx.L  = make_layout();
 8002458:	463b      	mov	r3, r7
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fd7a 	bl	8001f54 <make_layout>
 8002460:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8002464:	463d      	mov	r5, r7
 8002466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002472:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    memcpy(&__time_ctx_src, &ctx, sizeof(ctx));
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <paint_time_frame+0x9c>)
 8002478:	461d      	mov	r5, r3
 800247a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800247e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800248e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    build_from_pixel_fn(fb, time_pixel_cb);
 8002492:	4905      	ldr	r1, [pc, #20]	@ (80024a8 <paint_time_frame+0xa0>)
 8002494:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002496:	f7ff fbda 	bl	8001c4e <build_from_pixel_fn>
}
 800249a:	bf00      	nop
 800249c:	3780      	adds	r7, #128	@ 0x80
 800249e:	46bd      	mov	sp, r7
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20014928 	.word	0x20014928
 80024a8:	08001fb5 	.word	0x08001fb5

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_MspInit+0x48>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <HAL_MspInit+0x48>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_MspInit+0x48>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_MspInit+0x48>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_MspInit+0x48>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_MspInit+0x48>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <HAL_RTC_MspInit+0x50>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d111      	bne.n	800253e <HAL_RTC_MspInit+0x46>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800251a:	2302      	movs	r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800251e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002522:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4618      	mov	r0, r3
 800252a:	f002 fe8f 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002534:	f7ff fae4 	bl	8001b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <HAL_RTC_MspInit+0x54>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800253e:	bf00      	nop
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40002800 	.word	0x40002800
 800254c:	42470e3c 	.word	0x42470e3c

08002550 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a27      	ldr	r2, [pc, #156]	@ (80025fc <HAL_TIM_Base_MspInit+0xac>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d148      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0xa4>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <HAL_TIM_Base_MspInit+0xb0>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a25      	ldr	r2, [pc, #148]	@ (8002600 <HAL_TIM_Base_MspInit+0xb0>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <HAL_TIM_Base_MspInit+0xb0>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800257e:	4b21      	ldr	r3, [pc, #132]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 8002580:	4a21      	ldr	r2, [pc, #132]	@ (8002608 <HAL_TIM_Base_MspInit+0xb8>)
 8002582:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8002584:	4b1f      	ldr	r3, [pc, #124]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 8002586:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800258a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002592:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 8002594:	2200      	movs	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002598:	4b1a      	ldr	r3, [pc, #104]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 800259a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800259e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a0:	4b18      	ldr	r3, [pc, #96]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025a6:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025a8:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ae:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b6:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025b8:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025be:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025c0:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025c2:	2204      	movs	r2, #4
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025c8:	2203      	movs	r2, #3
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_SINGLE;
 80025cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80025d8:	480a      	ldr	r0, [pc, #40]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025da:	f000 fa8b 	bl	8002af4 <HAL_DMA_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_TIM_Base_MspInit+0x98>
    {
      Error_Handler();
 80025e4:	f7ff fa8c 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a06      	ldr	r2, [pc, #24]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025ec:	621a      	str	r2, [r3, #32]
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40010000 	.word	0x40010000
 8002600:	40023800 	.word	0x40023800
 8002604:	20000100 	.word	0x20000100
 8002608:	40026488 	.word	0x40026488

0800260c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1d      	ldr	r2, [pc, #116]	@ (80026a0 <HAL_UART_MspInit+0x94>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d133      	bne.n	8002696 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b1c      	ldr	r3, [pc, #112]	@ (80026a4 <HAL_UART_MspInit+0x98>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <HAL_UART_MspInit+0x98>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263c:	6413      	str	r3, [r2, #64]	@ 0x40
 800263e:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_UART_MspInit+0x98>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_UART_MspInit+0x98>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <HAL_UART_MspInit+0x98>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_UART_MspInit+0x98>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002666:	230c      	movs	r3, #12
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002676:	2307      	movs	r3, #7
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4809      	ldr	r0, [pc, #36]	@ (80026a8 <HAL_UART_MspInit+0x9c>)
 8002682:	f001 ff7d 	bl	8004580 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2026      	movs	r0, #38	@ 0x26
 800268c:	f000 f9fb 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002690:	2026      	movs	r0, #38	@ 0x26
 8002692:	f000 fa14 	bl	8002abe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	@ 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40004400 	.word	0x40004400
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <NMI_Handler+0x4>

080026b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <HardFault_Handler+0x4>

080026bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <MemManage_Handler+0x4>

080026c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026fc:	f000 f8d0 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <USART2_IRQHandler+0x10>)
 800270a:	f003 fd8d 	bl	8006228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000160 	.word	0x20000160

08002718 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800271c:	4803      	ldr	r0, [pc, #12]	@ (800272c <DMA2_Stream5_IRQHandler+0x14>)
 800271e:	f000 fb29 	bl	8002d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
  led_dma_irq_handler();
 8002722:	f7fe fddf 	bl	80012e4 <led_dma_irq_handler>

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000100 	.word	0x20000100

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	@ (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f004 fce4 	bl	800712c <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20018000 	.word	0x20018000
 8002790:	00000400 	.word	0x00000400
 8002794:	200149a8 	.word	0x200149a8
 8002798:	20014af8 	.word	0x20014af8

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <Reset_Handler>:
 80027a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027e0 <LoopFillZerobss+0xe>
 80027ac:	f7ff fff6 	bl	800279c <SystemInit>
 80027b0:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <LoopFillZerobss+0x12>)
 80027b2:	490d      	ldr	r1, [pc, #52]	@ (80027e8 <LoopFillZerobss+0x16>)
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <LoopFillZerobss+0x1a>)
 80027b6:	2300      	movs	r3, #0
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:
 80027ba:	58d4      	ldr	r4, [r2, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:
 80027c0:	18c4      	adds	r4, r0, r3
 80027c2:	428c      	cmp	r4, r1
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <LoopFillZerobss+0x1e>)
 80027c8:	4c0a      	ldr	r4, [pc, #40]	@ (80027f4 <LoopFillZerobss+0x22>)
 80027ca:	2300      	movs	r3, #0
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:
 80027d2:	42a2      	cmp	r2, r4
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>
 80027d6:	f004 fcaf 	bl	8007138 <__libc_init_array>
 80027da:	f7fe fdfb 	bl	80013d4 <main>
 80027de:	4770      	bx	lr
 80027e0:	20018000 	.word	0x20018000
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000064 	.word	0x20000064
 80027ec:	080086c4 	.word	0x080086c4
 80027f0:	20000064 	.word	0x20000064
 80027f4:	20014af8 	.word	0x20014af8

080027f8 <ADC_IRQHandler>:
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <HAL_Init+0x40>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <HAL_Init+0x40>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_Init+0x40>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 f923 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fe3c 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f93b 	bl	8002ada <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 f903 	bl	8002a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	@ (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000008 	.word	0x20000008
 8002898:	20000010 	.word	0x20000010
 800289c:	2000000c 	.word	0x2000000c

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a03      	ldr	r2, [pc, #12]	@ (80028c0 <HAL_IncTick+0x20>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000010 	.word	0x20000010
 80028c0:	200149ac 	.word	0x200149ac

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	200149ac 	.word	0x200149ac

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4906      	ldr	r1, [pc, #24]	@ (8002970 <__NVIC_EnableIRQ+0x34>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	@ (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	@ 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a3c:	d301      	bcc.n	8002a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <SysTick_Config+0x40>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f7ff ff90 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <SysTick_Config+0x40>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <SysTick_Config+0x40>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	e000e010 	.word	0xe000e010

08002a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff2d 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a98:	f7ff ff42 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff90 	bl	80029c8 <NVIC_EncodePriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff5f 	bl	8002974 <__NVIC_SetPriority>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff35 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffa2 	bl	8002a2c <SysTick_Config>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fee0 	bl	80028c4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e099      	b.n	8002c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b30:	e00f      	b.n	8002b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b32:	f7ff fec7 	bl	80028c4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d908      	bls.n	8002b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e078      	b.n	8002c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e8      	bne.n	8002b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <HAL_DMA_Init+0x158>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d117      	bne.n	8002c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fad9 	bl	80031b0 <DMA_CheckFifoParam>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c12:	2301      	movs	r3, #1
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fa92 	bl	8003148 <DMA_CalcBaseAndBitshift>
 8002c24:	4603      	mov	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	223f      	movs	r2, #63	@ 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	f010803f 	.word	0xf010803f

08002c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c5e:	f7ff fe31 	bl	80028c4 <HAL_GetTick>
 8002c62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2280      	movs	r2, #128	@ 0x80
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e052      	b.n	8002d28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0216 	bic.w	r2, r2, #22
 8002c90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ca0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_DMA_Abort+0x62>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0208 	bic.w	r2, r2, #8
 8002cc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd2:	e013      	b.n	8002cfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd4:	f7ff fdf6 	bl	80028c4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d90c      	bls.n	8002cfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2203      	movs	r2, #3
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e015      	b.n	8002d28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e4      	bne.n	8002cd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	223f      	movs	r2, #63	@ 0x3f
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00c      	b.n	8002d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d80:	4b8e      	ldr	r3, [pc, #568]	@ (8002fbc <HAL_DMA_IRQHandler+0x248>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8e      	ldr	r2, [pc, #568]	@ (8002fc0 <HAL_DMA_IRQHandler+0x24c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	2208      	movs	r2, #8
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	2208      	movs	r2, #8
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	2204      	movs	r2, #4
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	2210      	movs	r2, #16
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d043      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03c      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	2210      	movs	r2, #16
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d024      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e01f      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e016      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2220      	movs	r2, #32
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 808f 	beq.w	8003014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8087 	beq.w	8003014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d136      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0216 	bic.w	r2, r2, #22
 8002f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x1da>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0208 	bic.w	r2, r2, #8
 8002f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	223f      	movs	r2, #63	@ 0x3f
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d07e      	beq.n	8003080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
        }
        return;
 8002f8a:	e079      	b.n	8003080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d031      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e02c      	b.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
 8002fba:	bf00      	nop
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
 8002fd4:	e01e      	b.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10f      	bne.n	8003004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d032      	beq.n	8003082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d022      	beq.n	800306e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3301      	adds	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	d307      	bcc.n	800305c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f2      	bne.n	8003040 <HAL_DMA_IRQHandler+0x2cc>
 800305a:	e000      	b.n	800305e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800305c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003080:	bf00      	nop
    }
  }
}
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	460b      	mov	r3, r1
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_RegisterCallback+0x20>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e03d      	b.n	8003124 <HAL_DMA_RegisterCallback+0x9c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d12c      	bne.n	8003116 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d826      	bhi.n	8003110 <HAL_DMA_RegisterCallback+0x88>
 80030c2:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <HAL_DMA_RegisterCallback+0x40>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030e1 	.word	0x080030e1
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	080030f1 	.word	0x080030f1
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003101 	.word	0x08003101
 80030dc:	08003109 	.word	0x08003109
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80030e6:	e018      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80030ee:	e014      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 80030f6:	e010      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 80030fe:	e00c      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8003106:	e008      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800310e:	e004      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
      break;
 8003114:	e001      	b.n	800311a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3b10      	subs	r3, #16
 8003158:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <DMA_CalcBaseAndBitshift+0x60>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003162:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <DMA_CalcBaseAndBitshift+0x64>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d909      	bls.n	800318a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	659a      	str	r2, [r3, #88]	@ 0x58
 8003188:	e007      	b.n	800319a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	aaaaaaab 	.word	0xaaaaaaab
 80031ac:	08008658 	.word	0x08008658

080031b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11f      	bne.n	800320a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d856      	bhi.n	800327e <DMA_CheckFifoParam+0xce>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <DMA_CheckFifoParam+0x28>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031fb 	.word	0x080031fb
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	0800327f 	.word	0x0800327f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d046      	beq.n	8003282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e043      	b.n	8003282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003202:	d140      	bne.n	8003286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003208:	e03d      	b.n	8003286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003212:	d121      	bne.n	8003258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d837      	bhi.n	800328a <DMA_CheckFifoParam+0xda>
 800321a:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <DMA_CheckFifoParam+0x70>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003231 	.word	0x08003231
 8003224:	08003237 	.word	0x08003237
 8003228:	08003231 	.word	0x08003231
 800322c:	08003249 	.word	0x08003249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e030      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d025      	beq.n	800328e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003246:	e022      	b.n	800328e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003250:	d11f      	bne.n	8003292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003256:	e01c      	b.n	8003292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d903      	bls.n	8003266 <DMA_CheckFifoParam+0xb6>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d003      	beq.n	800326c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003264:	e018      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      break;
 800326a:	e015      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e00b      	b.n	8003296 <DMA_CheckFifoParam+0xe6>
      break;
 800327e:	bf00      	nop
 8003280:	e00a      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e008      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e006      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
 800328c:	e004      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;   
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003296:	bf00      	nop
    }
  } 
  
  return status; 
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b80      	cmp	r3, #128	@ 0x80
 80032bc:	d106      	bne.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f001 b911 	b.w	80044ee <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f001 b8ff 	b.w	80044ee <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80032fa:	2302      	movs	r3, #2
 80032fc:	f001 b8f7 	b.w	80044ee <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	f041 80e5 	bne.w	80044e0 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003332:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f001 f8f6 	bl	8004534 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b8d      	ldr	r3, [pc, #564]	@ (8003584 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8003350:	429a      	cmp	r2, r3
 8003352:	d960      	bls.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a8b      	ldr	r2, [pc, #556]	@ (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d057      	beq.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8a      	ldr	r2, [pc, #552]	@ (800358c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d050      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a88      	ldr	r2, [pc, #544]	@ (8003590 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d049      	beq.n	8003406 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a87      	ldr	r2, [pc, #540]	@ (8003594 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d042      	beq.n	8003402 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a85      	ldr	r2, [pc, #532]	@ (8003598 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d03a      	beq.n	80033fc <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a84      	ldr	r2, [pc, #528]	@ (800359c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d032      	beq.n	80033f6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a82      	ldr	r2, [pc, #520]	@ (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02a      	beq.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a81      	ldr	r2, [pc, #516]	@ (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d022      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7f      	ldr	r2, [pc, #508]	@ (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01a      	beq.n	80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7e      	ldr	r2, [pc, #504]	@ (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d012      	beq.n	80033de <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7c      	ldr	r2, [pc, #496]	@ (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00a      	beq.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7b      	ldr	r2, [pc, #492]	@ (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d102      	bne.n	80033d2 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80033cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033d0:	e01e      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033d6:	e01b      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033dc:	e018      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033e2:	e015      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033e8:	e012      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033ee:	e00f      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033f4:	e00c      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033fa:	e009      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80033fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003400:	e006      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003402:	2320      	movs	r3, #32
 8003404:	e004      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003406:	2320      	movs	r3, #32
 8003408:	e002      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800340a:	2320      	movs	r3, #32
 800340c:	e000      	b.n	8003410 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800340e:	2320      	movs	r3, #32
 8003410:	4a69      	ldr	r2, [pc, #420]	@ (80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e14f      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	4b67      	ldr	r3, [pc, #412]	@ (80035bc <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800341e:	429a      	cmp	r2, r3
 8003420:	d960      	bls.n	80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d057      	beq.n	80034dc <HAL_DMAEx_MultiBufferStart_IT+0x238>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a56      	ldr	r2, [pc, #344]	@ (800358c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d050      	beq.n	80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a55      	ldr	r2, [pc, #340]	@ (8003590 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d049      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a53      	ldr	r2, [pc, #332]	@ (8003594 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d042      	beq.n	80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a52      	ldr	r2, [pc, #328]	@ (8003598 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d03a      	beq.n	80034ca <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a50      	ldr	r2, [pc, #320]	@ (800359c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d032      	beq.n	80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4f      	ldr	r2, [pc, #316]	@ (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02a      	beq.n	80034be <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4d      	ldr	r2, [pc, #308]	@ (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d022      	beq.n	80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4c      	ldr	r2, [pc, #304]	@ (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d01a      	beq.n	80034b2 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a4a      	ldr	r2, [pc, #296]	@ (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d012      	beq.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a49      	ldr	r2, [pc, #292]	@ (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00a      	beq.n	80034a6 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a47      	ldr	r2, [pc, #284]	@ (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d102      	bne.n	80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800349a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800349e:	e01e      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80034a4:	e01b      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034aa:	e018      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034b0:	e015      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034b2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034b6:	e012      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034bc:	e00f      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034c2:	e00c      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034c8:	e009      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034ce:	e006      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034d0:	2320      	movs	r3, #32
 80034d2:	e004      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034d4:	2320      	movs	r3, #32
 80034d6:	e002      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034d8:	2320      	movs	r3, #32
 80034da:	e000      	b.n	80034de <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80034dc:	2320      	movs	r3, #32
 80034de:	4a36      	ldr	r2, [pc, #216]	@ (80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80034e0:	6093      	str	r3, [r2, #8]
 80034e2:	e0e8      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b35      	ldr	r3, [pc, #212]	@ (80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	f240 8082 	bls.w	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d078      	beq.n	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d071      	beq.n	80035ea <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d06a      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d063      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d05b      	beq.n	80035dc <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d053      	beq.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04b      	beq.n	80035d0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d043      	beq.n	80035ca <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d03b      	beq.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d012      	beq.n	800357c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00a      	beq.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d102      	bne.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800356a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800356e:	e03f      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003570:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003574:	e03c      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003576:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800357a:	e039      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800357c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003580:	e036      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003582:	bf00      	nop
 8003584:	40026458 	.word	0x40026458
 8003588:	40026010 	.word	0x40026010
 800358c:	40026410 	.word	0x40026410
 8003590:	40026070 	.word	0x40026070
 8003594:	40026470 	.word	0x40026470
 8003598:	40026028 	.word	0x40026028
 800359c:	40026428 	.word	0x40026428
 80035a0:	40026088 	.word	0x40026088
 80035a4:	40026488 	.word	0x40026488
 80035a8:	40026040 	.word	0x40026040
 80035ac:	40026440 	.word	0x40026440
 80035b0:	400260a0 	.word	0x400260a0
 80035b4:	400264a0 	.word	0x400264a0
 80035b8:	40026400 	.word	0x40026400
 80035bc:	400260b8 	.word	0x400260b8
 80035c0:	40026058 	.word	0x40026058
 80035c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035c8:	e012      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035ce:	e00f      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035d4:	e00c      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035da:	e009      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035e0:	e006      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035e2:	2320      	movs	r3, #32
 80035e4:	e004      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035e6:	2320      	movs	r3, #32
 80035e8:	e002      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035ea:	2320      	movs	r3, #32
 80035ec:	e000      	b.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035ee:	2320      	movs	r3, #32
 80035f0:	4a8c      	ldr	r2, [pc, #560]	@ (8003824 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80035f2:	60d3      	str	r3, [r2, #12]
 80035f4:	e05f      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a8b      	ldr	r2, [pc, #556]	@ (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d057      	beq.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a89      	ldr	r2, [pc, #548]	@ (800382c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d050      	beq.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a88      	ldr	r2, [pc, #544]	@ (8003830 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d049      	beq.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a86      	ldr	r2, [pc, #536]	@ (8003834 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d042      	beq.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a85      	ldr	r2, [pc, #532]	@ (8003838 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d03a      	beq.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a83      	ldr	r2, [pc, #524]	@ (800383c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d032      	beq.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a82      	ldr	r2, [pc, #520]	@ (8003840 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d02a      	beq.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a80      	ldr	r2, [pc, #512]	@ (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7f      	ldr	r2, [pc, #508]	@ (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01a      	beq.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7d      	ldr	r2, [pc, #500]	@ (800384c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d012      	beq.n	8003680 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7c      	ldr	r2, [pc, #496]	@ (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00a      	beq.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7a      	ldr	r2, [pc, #488]	@ (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d102      	bne.n	8003674 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 800366e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003672:	e01e      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003674:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003678:	e01b      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800367a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800367e:	e018      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003680:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003684:	e015      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003686:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800368a:	e012      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800368c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003690:	e00f      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003692:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003696:	e00c      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800369c:	e009      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800369e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036a2:	e006      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036a4:	2320      	movs	r3, #32
 80036a6:	e004      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036a8:	2320      	movs	r3, #32
 80036aa:	e002      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036ac:	2320      	movs	r3, #32
 80036ae:	e000      	b.n	80036b2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036b0:	2320      	movs	r3, #32
 80036b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003824 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80036b4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b66      	ldr	r3, [pc, #408]	@ (8003858 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80036be:	429a      	cmp	r2, r3
 80036c0:	d960      	bls.n	8003784 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a58      	ldr	r2, [pc, #352]	@ (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d057      	beq.n	800377c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a56      	ldr	r2, [pc, #344]	@ (800382c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d050      	beq.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a55      	ldr	r2, [pc, #340]	@ (8003830 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d049      	beq.n	8003774 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a53      	ldr	r2, [pc, #332]	@ (8003834 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d042      	beq.n	8003770 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a52      	ldr	r2, [pc, #328]	@ (8003838 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d03a      	beq.n	800376a <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a50      	ldr	r2, [pc, #320]	@ (800383c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d032      	beq.n	8003764 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4f      	ldr	r2, [pc, #316]	@ (8003840 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d02a      	beq.n	800375e <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4d      	ldr	r2, [pc, #308]	@ (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4c      	ldr	r2, [pc, #304]	@ (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01a      	beq.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a4a      	ldr	r2, [pc, #296]	@ (800384c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d012      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a49      	ldr	r2, [pc, #292]	@ (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00a      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a47      	ldr	r2, [pc, #284]	@ (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d102      	bne.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800373a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800373e:	e01e      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003740:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003744:	e01b      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003746:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800374a:	e018      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800374c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003750:	e015      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003752:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003756:	e012      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800375c:	e00f      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800375e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003762:	e00c      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003764:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003768:	e009      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800376a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800376e:	e006      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003770:	2310      	movs	r3, #16
 8003772:	e004      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003774:	2310      	movs	r3, #16
 8003776:	e002      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003778:	2310      	movs	r3, #16
 800377a:	e000      	b.n	800377e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800377c:	2310      	movs	r3, #16
 800377e:	4a37      	ldr	r2, [pc, #220]	@ (800385c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003780:	60d3      	str	r3, [r2, #12]
 8003782:	e14f      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	4b35      	ldr	r3, [pc, #212]	@ (8003860 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800378c:	429a      	cmp	r2, r3
 800378e:	f240 8082 	bls.w	8003896 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a24      	ldr	r2, [pc, #144]	@ (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d078      	beq.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a22      	ldr	r2, [pc, #136]	@ (800382c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d071      	beq.n	800388a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d06a      	beq.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d063      	beq.n	8003882 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d05b      	beq.n	800387c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d053      	beq.n	8003876 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d04b      	beq.n	8003870 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d043      	beq.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a16      	ldr	r2, [pc, #88]	@ (800384c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d012      	beq.n	800381c <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00a      	beq.n	8003816 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	@ (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d102      	bne.n	8003810 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800380a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800380e:	e03f      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003810:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003814:	e03c      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003816:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800381a:	e039      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800381c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003820:	e036      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003822:	bf00      	nop
 8003824:	40026000 	.word	0x40026000
 8003828:	40026010 	.word	0x40026010
 800382c:	40026410 	.word	0x40026410
 8003830:	40026070 	.word	0x40026070
 8003834:	40026470 	.word	0x40026470
 8003838:	40026028 	.word	0x40026028
 800383c:	40026428 	.word	0x40026428
 8003840:	40026088 	.word	0x40026088
 8003844:	40026488 	.word	0x40026488
 8003848:	40026040 	.word	0x40026040
 800384c:	40026440 	.word	0x40026440
 8003850:	400260a0 	.word	0x400260a0
 8003854:	400264a0 	.word	0x400264a0
 8003858:	40026458 	.word	0x40026458
 800385c:	40026400 	.word	0x40026400
 8003860:	400260b8 	.word	0x400260b8
 8003864:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003868:	e012      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800386a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800386e:	e00f      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003874:	e00c      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800387a:	e009      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800387c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003880:	e006      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003882:	2310      	movs	r3, #16
 8003884:	e004      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003886:	2310      	movs	r3, #16
 8003888:	e002      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800388a:	2310      	movs	r3, #16
 800388c:	e000      	b.n	8003890 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800388e:	2310      	movs	r3, #16
 8003890:	4a8c      	ldr	r2, [pc, #560]	@ (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003892:	6093      	str	r3, [r2, #8]
 8003894:	e0c6      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	4b8a      	ldr	r3, [pc, #552]	@ (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800389e:	429a      	cmp	r2, r3
 80038a0:	d960      	bls.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a89      	ldr	r2, [pc, #548]	@ (8003acc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d057      	beq.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a87      	ldr	r2, [pc, #540]	@ (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d050      	beq.n	8003958 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a86      	ldr	r2, [pc, #536]	@ (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d049      	beq.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a84      	ldr	r2, [pc, #528]	@ (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d042      	beq.n	8003950 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a83      	ldr	r2, [pc, #524]	@ (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d03a      	beq.n	800394a <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a81      	ldr	r2, [pc, #516]	@ (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d032      	beq.n	8003944 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a80      	ldr	r2, [pc, #512]	@ (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02a      	beq.n	800393e <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7d      	ldr	r2, [pc, #500]	@ (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01a      	beq.n	8003932 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7b      	ldr	r2, [pc, #492]	@ (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d012      	beq.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7a      	ldr	r2, [pc, #488]	@ (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00a      	beq.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a78      	ldr	r2, [pc, #480]	@ (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d102      	bne.n	8003920 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800391a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800391e:	e01e      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003920:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003924:	e01b      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003926:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800392a:	e018      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800392c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003930:	e015      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003932:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003936:	e012      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393c:	e00f      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800393e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003942:	e00c      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003948:	e009      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800394a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800394e:	e006      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003950:	2310      	movs	r3, #16
 8003952:	e004      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003954:	2310      	movs	r3, #16
 8003956:	e002      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003958:	2310      	movs	r3, #16
 800395a:	e000      	b.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800395c:	2310      	movs	r3, #16
 800395e:	4a67      	ldr	r2, [pc, #412]	@ (8003afc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003960:	60d3      	str	r3, [r2, #12]
 8003962:	e05f      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a58      	ldr	r2, [pc, #352]	@ (8003acc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d057      	beq.n	8003a1e <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a57      	ldr	r2, [pc, #348]	@ (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d050      	beq.n	8003a1a <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a55      	ldr	r2, [pc, #340]	@ (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d049      	beq.n	8003a16 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a54      	ldr	r2, [pc, #336]	@ (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d042      	beq.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a52      	ldr	r2, [pc, #328]	@ (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03a      	beq.n	8003a0c <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a51      	ldr	r2, [pc, #324]	@ (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d032      	beq.n	8003a06 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02a      	beq.n	8003a00 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a4e      	ldr	r2, [pc, #312]	@ (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d022      	beq.n	80039fa <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a4c      	ldr	r2, [pc, #304]	@ (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a4b      	ldr	r2, [pc, #300]	@ (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d012      	beq.n	80039ee <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a49      	ldr	r2, [pc, #292]	@ (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00a      	beq.n	80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a48      	ldr	r2, [pc, #288]	@ (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d102      	bne.n	80039e2 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80039dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039e0:	e01e      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80039e6:	e01b      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039ec:	e018      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039f2:	e015      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039f8:	e012      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80039fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039fe:	e00f      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a04:	e00c      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a0a:	e009      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a10:	e006      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a12:	2310      	movs	r3, #16
 8003a14:	e004      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a16:	2310      	movs	r3, #16
 8003a18:	e002      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	e000      	b.n	8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a1e:	2310      	movs	r3, #16
 8003a20:	4a36      	ldr	r2, [pc, #216]	@ (8003afc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003a22:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b35      	ldr	r3, [pc, #212]	@ (8003b00 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f240 8082 	bls.w	8003b36 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a25      	ldr	r2, [pc, #148]	@ (8003acc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d078      	beq.n	8003b2e <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a23      	ldr	r2, [pc, #140]	@ (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d071      	beq.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a22      	ldr	r2, [pc, #136]	@ (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d06a      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a20      	ldr	r2, [pc, #128]	@ (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d063      	beq.n	8003b22 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d05b      	beq.n	8003b1c <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d053      	beq.n	8003b16 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d04b      	beq.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d043      	beq.n	8003b0a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a19      	ldr	r2, [pc, #100]	@ (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d03b      	beq.n	8003b04 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d012      	beq.n	8003abc <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d102      	bne.n	8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003aaa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003aae:	e03f      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ab0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab4:	e03c      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ab6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003aba:	e039      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003abc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003ac0:	e036      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003ac2:	bf00      	nop
 8003ac4:	40026400 	.word	0x40026400
 8003ac8:	40026058 	.word	0x40026058
 8003acc:	40026010 	.word	0x40026010
 8003ad0:	40026410 	.word	0x40026410
 8003ad4:	40026070 	.word	0x40026070
 8003ad8:	40026470 	.word	0x40026470
 8003adc:	40026028 	.word	0x40026028
 8003ae0:	40026428 	.word	0x40026428
 8003ae4:	40026088 	.word	0x40026088
 8003ae8:	40026488 	.word	0x40026488
 8003aec:	40026040 	.word	0x40026040
 8003af0:	40026440 	.word	0x40026440
 8003af4:	400260a0 	.word	0x400260a0
 8003af8:	400264a0 	.word	0x400264a0
 8003afc:	40026000 	.word	0x40026000
 8003b00:	40026458 	.word	0x40026458
 8003b04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b08:	e012      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b0e:	e00f      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b14:	e00c      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b1a:	e009      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b20:	e006      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b22:	2308      	movs	r3, #8
 8003b24:	e004      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b26:	2308      	movs	r3, #8
 8003b28:	e002      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	e000      	b.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	4a8c      	ldr	r2, [pc, #560]	@ (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003b32:	60d3      	str	r3, [r2, #12]
 8003b34:	e14e      	b.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d960      	bls.n	8003c04 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a89      	ldr	r2, [pc, #548]	@ (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d057      	beq.n	8003bfc <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a87      	ldr	r2, [pc, #540]	@ (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d050      	beq.n	8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a86      	ldr	r2, [pc, #536]	@ (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d049      	beq.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a84      	ldr	r2, [pc, #528]	@ (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d042      	beq.n	8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a83      	ldr	r2, [pc, #524]	@ (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d03a      	beq.n	8003bea <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a81      	ldr	r2, [pc, #516]	@ (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d032      	beq.n	8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a80      	ldr	r2, [pc, #512]	@ (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d02a      	beq.n	8003bde <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a7e      	ldr	r2, [pc, #504]	@ (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7d      	ldr	r2, [pc, #500]	@ (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01a      	beq.n	8003bd2 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7b      	ldr	r2, [pc, #492]	@ (8003d90 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d012      	beq.n	8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7a      	ldr	r2, [pc, #488]	@ (8003d94 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00a      	beq.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a78      	ldr	r2, [pc, #480]	@ (8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d102      	bne.n	8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003bba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003bbe:	e01e      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bc4:	e01b      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bc6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003bca:	e018      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003bd0:	e015      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bd2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003bd6:	e012      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bdc:	e00f      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003be2:	e00c      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003be8:	e009      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bee:	e006      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	e004      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	e002      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	e000      	b.n	8003bfe <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	4a59      	ldr	r2, [pc, #356]	@ (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003c00:	6093      	str	r3, [r2, #8]
 8003c02:	e0e7      	b.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d960      	bls.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a55      	ldr	r2, [pc, #340]	@ (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d057      	beq.n	8003cca <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a54      	ldr	r2, [pc, #336]	@ (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d050      	beq.n	8003cc6 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a52      	ldr	r2, [pc, #328]	@ (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d049      	beq.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a51      	ldr	r2, [pc, #324]	@ (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d042      	beq.n	8003cbe <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d03a      	beq.n	8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4e      	ldr	r2, [pc, #312]	@ (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d032      	beq.n	8003cb2 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a4c      	ldr	r2, [pc, #304]	@ (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02a      	beq.n	8003cac <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a4b      	ldr	r2, [pc, #300]	@ (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a49      	ldr	r2, [pc, #292]	@ (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01a      	beq.n	8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a48      	ldr	r2, [pc, #288]	@ (8003d90 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d012      	beq.n	8003c9a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a46      	ldr	r2, [pc, #280]	@ (8003d94 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00a      	beq.n	8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a45      	ldr	r2, [pc, #276]	@ (8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d102      	bne.n	8003c8e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003c88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c8c:	e01e      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c92:	e01b      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c98:	e018      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003c9a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c9e:	e015      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003ca0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003ca4:	e012      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003caa:	e00f      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cb0:	e00c      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cb6:	e009      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cbc:	e006      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	e004      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	e002      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	e000      	b.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	4a34      	ldr	r2, [pc, #208]	@ (8003da0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e080      	b.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a25      	ldr	r2, [pc, #148]	@ (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d078      	beq.n	8003dce <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	@ (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d071      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a22      	ldr	r2, [pc, #136]	@ (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d06a      	beq.n	8003dc6 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a20      	ldr	r2, [pc, #128]	@ (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d063      	beq.n	8003dc2 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d05b      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1d      	ldr	r2, [pc, #116]	@ (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d053      	beq.n	8003db6 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1c      	ldr	r2, [pc, #112]	@ (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04b      	beq.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d043      	beq.n	8003daa <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a19      	ldr	r2, [pc, #100]	@ (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d03b      	beq.n	8003da4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a17      	ldr	r2, [pc, #92]	@ (8003d90 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d012      	beq.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a16      	ldr	r2, [pc, #88]	@ (8003d94 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00a      	beq.n	8003d56 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d102      	bne.n	8003d50 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003d4a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d4e:	e03f      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d54:	e03c      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d56:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d5a:	e039      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d60:	e036      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003d62:	bf00      	nop
 8003d64:	40026400 	.word	0x40026400
 8003d68:	400260b8 	.word	0x400260b8
 8003d6c:	40026010 	.word	0x40026010
 8003d70:	40026410 	.word	0x40026410
 8003d74:	40026070 	.word	0x40026070
 8003d78:	40026470 	.word	0x40026470
 8003d7c:	40026028 	.word	0x40026028
 8003d80:	40026428 	.word	0x40026428
 8003d84:	40026088 	.word	0x40026088
 8003d88:	40026488 	.word	0x40026488
 8003d8c:	40026040 	.word	0x40026040
 8003d90:	40026440 	.word	0x40026440
 8003d94:	400260a0 	.word	0x400260a0
 8003d98:	400264a0 	.word	0x400264a0
 8003d9c:	40026058 	.word	0x40026058
 8003da0:	40026000 	.word	0x40026000
 8003da4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003da8:	e012      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003daa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dae:	e00f      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003db4:	e00c      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003db6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dba:	e009      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dc0:	e006      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	e004      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	e002      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	4a8a      	ldr	r2, [pc, #552]	@ (8003ffc <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003dd2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b89      	ldr	r3, [pc, #548]	@ (8004000 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d960      	bls.n	8003ea2 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a87      	ldr	r2, [pc, #540]	@ (8004004 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d057      	beq.n	8003e9a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a86      	ldr	r2, [pc, #536]	@ (8004008 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d050      	beq.n	8003e96 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a84      	ldr	r2, [pc, #528]	@ (800400c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d049      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a83      	ldr	r2, [pc, #524]	@ (8004010 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d042      	beq.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a81      	ldr	r2, [pc, #516]	@ (8004014 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d03a      	beq.n	8003e88 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a80      	ldr	r2, [pc, #512]	@ (8004018 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d032      	beq.n	8003e82 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02a      	beq.n	8003e7c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004020 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a7b      	ldr	r2, [pc, #492]	@ (8004024 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01a      	beq.n	8003e70 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8004028 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d012      	beq.n	8003e6a <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a78      	ldr	r2, [pc, #480]	@ (800402c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00a      	beq.n	8003e64 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a77      	ldr	r2, [pc, #476]	@ (8004030 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d102      	bne.n	8003e5e <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003e58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e5c:	e01e      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e62:	e01b      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e68:	e018      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e6a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e6e:	e015      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003e74:	e012      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e7a:	e00f      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e80:	e00c      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e86:	e009      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e8c:	e006      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e004      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e92:	2304      	movs	r3, #4
 8003e94:	e002      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e96:	2304      	movs	r3, #4
 8003e98:	e000      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	4a65      	ldr	r2, [pc, #404]	@ (8004034 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003e9e:	60d3      	str	r3, [r2, #12]
 8003ea0:	e150      	b.n	8004144 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b63      	ldr	r3, [pc, #396]	@ (8004038 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d960      	bls.n	8003f70 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a54      	ldr	r2, [pc, #336]	@ (8004004 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d057      	beq.n	8003f68 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d050      	beq.n	8003f64 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a51      	ldr	r2, [pc, #324]	@ (800400c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d049      	beq.n	8003f60 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8004010 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d042      	beq.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4e      	ldr	r2, [pc, #312]	@ (8004014 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d03a      	beq.n	8003f56 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4c      	ldr	r2, [pc, #304]	@ (8004018 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d032      	beq.n	8003f50 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4b      	ldr	r2, [pc, #300]	@ (800401c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02a      	beq.n	8003f4a <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a49      	ldr	r2, [pc, #292]	@ (8004020 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a48      	ldr	r2, [pc, #288]	@ (8004024 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01a      	beq.n	8003f3e <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a46      	ldr	r2, [pc, #280]	@ (8004028 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d012      	beq.n	8003f38 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a45      	ldr	r2, [pc, #276]	@ (800402c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00a      	beq.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a43      	ldr	r2, [pc, #268]	@ (8004030 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d102      	bne.n	8003f2c <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003f26:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f2a:	e01e      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f30:	e01b      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f32:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f36:	e018      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f3c:	e015      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f3e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f42:	e012      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f48:	e00f      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f4e:	e00c      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f54:	e009      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f5a:	e006      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e004      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e002      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f64:	2304      	movs	r3, #4
 8003f66:	e000      	b.n	8003f6a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	4a32      	ldr	r2, [pc, #200]	@ (8004034 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003f6c:	6093      	str	r3, [r2, #8]
 8003f6e:	e0e9      	b.n	8004144 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b31      	ldr	r3, [pc, #196]	@ (800403c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	f240 8083 	bls.w	8004084 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a20      	ldr	r2, [pc, #128]	@ (8004004 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d079      	beq.n	800407c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004008 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d072      	beq.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1d      	ldr	r2, [pc, #116]	@ (800400c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d06b      	beq.n	8004074 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004010 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d064      	beq.n	8004070 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1a      	ldr	r2, [pc, #104]	@ (8004014 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d05c      	beq.n	800406a <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d054      	beq.n	8004064 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a17      	ldr	r2, [pc, #92]	@ (800401c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d04c      	beq.n	800405e <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d044      	beq.n	8004058 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a14      	ldr	r2, [pc, #80]	@ (8004024 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d03c      	beq.n	8004052 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a12      	ldr	r2, [pc, #72]	@ (8004028 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d034      	beq.n	800404c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a11      	ldr	r2, [pc, #68]	@ (800402c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8004030 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d124      	bne.n	8004040 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003ff6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003ffa:	e040      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ffc:	40026000 	.word	0x40026000
 8004000:	40026458 	.word	0x40026458
 8004004:	40026010 	.word	0x40026010
 8004008:	40026410 	.word	0x40026410
 800400c:	40026070 	.word	0x40026070
 8004010:	40026470 	.word	0x40026470
 8004014:	40026028 	.word	0x40026028
 8004018:	40026428 	.word	0x40026428
 800401c:	40026088 	.word	0x40026088
 8004020:	40026488 	.word	0x40026488
 8004024:	40026040 	.word	0x40026040
 8004028:	40026440 	.word	0x40026440
 800402c:	400260a0 	.word	0x400260a0
 8004030:	400264a0 	.word	0x400264a0
 8004034:	40026400 	.word	0x40026400
 8004038:	400260b8 	.word	0x400260b8
 800403c:	40026058 	.word	0x40026058
 8004040:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004044:	e01b      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004046:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800404a:	e018      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800404c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004050:	e015      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004052:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004056:	e012      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800405c:	e00f      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800405e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004062:	e00c      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004068:	e009      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800406a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800406e:	e006      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004070:	2304      	movs	r3, #4
 8004072:	e004      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004074:	2304      	movs	r3, #4
 8004076:	e002      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004078:	2304      	movs	r3, #4
 800407a:	e000      	b.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800407c:	2304      	movs	r3, #4
 800407e:	4a8b      	ldr	r2, [pc, #556]	@ (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004080:	60d3      	str	r3, [r2, #12]
 8004082:	e05f      	b.n	8004144 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a89      	ldr	r2, [pc, #548]	@ (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d057      	beq.n	800413e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a88      	ldr	r2, [pc, #544]	@ (80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d050      	beq.n	800413a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a86      	ldr	r2, [pc, #536]	@ (80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d049      	beq.n	8004136 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a85      	ldr	r2, [pc, #532]	@ (80042bc <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d042      	beq.n	8004132 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a83      	ldr	r2, [pc, #524]	@ (80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03a      	beq.n	800412c <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a82      	ldr	r2, [pc, #520]	@ (80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d032      	beq.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a80      	ldr	r2, [pc, #512]	@ (80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02a      	beq.n	8004120 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7f      	ldr	r2, [pc, #508]	@ (80042cc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7d      	ldr	r2, [pc, #500]	@ (80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01a      	beq.n	8004114 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7c      	ldr	r2, [pc, #496]	@ (80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d012      	beq.n	800410e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7a      	ldr	r2, [pc, #488]	@ (80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00a      	beq.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a79      	ldr	r2, [pc, #484]	@ (80042dc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d102      	bne.n	8004102 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80040fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004100:	e01e      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004102:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004106:	e01b      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004108:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800410c:	e018      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800410e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004112:	e015      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004114:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004118:	e012      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800411a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800411e:	e00f      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004124:	e00c      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800412a:	e009      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800412c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004130:	e006      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004132:	2304      	movs	r3, #4
 8004134:	e004      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004136:	2304      	movs	r3, #4
 8004138:	e002      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800413a:	2304      	movs	r3, #4
 800413c:	e000      	b.n	8004140 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800413e:	2304      	movs	r3, #4
 8004140:	4a5a      	ldr	r2, [pc, #360]	@ (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004142:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	4b65      	ldr	r3, [pc, #404]	@ (80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800414c:	429a      	cmp	r2, r3
 800414e:	d95c      	bls.n	800420a <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a56      	ldr	r2, [pc, #344]	@ (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d053      	beq.n	8004202 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a55      	ldr	r2, [pc, #340]	@ (80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d04c      	beq.n	80041fe <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a53      	ldr	r2, [pc, #332]	@ (80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d045      	beq.n	80041fa <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a52      	ldr	r2, [pc, #328]	@ (80042bc <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d03e      	beq.n	80041f6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a50      	ldr	r2, [pc, #320]	@ (80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d037      	beq.n	80041f2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a4f      	ldr	r2, [pc, #316]	@ (80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d030      	beq.n	80041ee <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a4d      	ldr	r2, [pc, #308]	@ (80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d029      	beq.n	80041ea <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a4c      	ldr	r2, [pc, #304]	@ (80042cc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a4a      	ldr	r2, [pc, #296]	@ (80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01a      	beq.n	80041e0 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a49      	ldr	r2, [pc, #292]	@ (80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d012      	beq.n	80041da <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a47      	ldr	r2, [pc, #284]	@ (80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00a      	beq.n	80041d4 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a46      	ldr	r2, [pc, #280]	@ (80042dc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d102      	bne.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80041c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041cc:	e01a      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041d2:	e017      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041d8:	e014      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041de:	e011      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041e4:	e00e      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041e6:	2340      	movs	r3, #64	@ 0x40
 80041e8:	e00c      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041ea:	2340      	movs	r3, #64	@ 0x40
 80041ec:	e00a      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041ee:	2340      	movs	r3, #64	@ 0x40
 80041f0:	e008      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041f2:	2340      	movs	r3, #64	@ 0x40
 80041f4:	e006      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e004      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e002      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004202:	2301      	movs	r3, #1
 8004204:	4a37      	ldr	r2, [pc, #220]	@ (80042e4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004206:	60d3      	str	r3, [r2, #12]
 8004208:	e141      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004212:	429a      	cmp	r2, r3
 8004214:	d97c      	bls.n	8004310 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a25      	ldr	r2, [pc, #148]	@ (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d073      	beq.n	8004308 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a23      	ldr	r2, [pc, #140]	@ (80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d06c      	beq.n	8004304 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a22      	ldr	r2, [pc, #136]	@ (80042b8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d065      	beq.n	8004300 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a20      	ldr	r2, [pc, #128]	@ (80042bc <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d05e      	beq.n	80042fc <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1f      	ldr	r2, [pc, #124]	@ (80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d057      	beq.n	80042f8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d050      	beq.n	80042f4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	@ (80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d049      	beq.n	80042f0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d042      	beq.n	80042ec <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a19      	ldr	r2, [pc, #100]	@ (80042d0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01a      	beq.n	80042a6 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d012      	beq.n	80042a0 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a16      	ldr	r2, [pc, #88]	@ (80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00a      	beq.n	800429a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a14      	ldr	r2, [pc, #80]	@ (80042dc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d102      	bne.n	8004294 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800428e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004292:	e03a      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004294:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004298:	e037      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800429a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800429e:	e034      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042a4:	e031      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042aa:	e02e      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042ac:	40026000 	.word	0x40026000
 80042b0:	40026010 	.word	0x40026010
 80042b4:	40026410 	.word	0x40026410
 80042b8:	40026070 	.word	0x40026070
 80042bc:	40026470 	.word	0x40026470
 80042c0:	40026028 	.word	0x40026028
 80042c4:	40026428 	.word	0x40026428
 80042c8:	40026088 	.word	0x40026088
 80042cc:	40026488 	.word	0x40026488
 80042d0:	40026040 	.word	0x40026040
 80042d4:	40026440 	.word	0x40026440
 80042d8:	400260a0 	.word	0x400260a0
 80042dc:	400264a0 	.word	0x400264a0
 80042e0:	40026458 	.word	0x40026458
 80042e4:	40026400 	.word	0x40026400
 80042e8:	400260b8 	.word	0x400260b8
 80042ec:	2340      	movs	r3, #64	@ 0x40
 80042ee:	e00c      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042f0:	2340      	movs	r3, #64	@ 0x40
 80042f2:	e00a      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042f4:	2340      	movs	r3, #64	@ 0x40
 80042f6:	e008      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042f8:	2340      	movs	r3, #64	@ 0x40
 80042fa:	e006      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e004      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004300:	2301      	movs	r3, #1
 8004302:	e002      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004308:	2301      	movs	r3, #1
 800430a:	4a7b      	ldr	r2, [pc, #492]	@ (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800430c:	6093      	str	r3, [r2, #8]
 800430e:	e0be      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b79      	ldr	r3, [pc, #484]	@ (80044fc <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004318:	429a      	cmp	r2, r3
 800431a:	d95c      	bls.n	80043d6 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a77      	ldr	r2, [pc, #476]	@ (8004500 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d053      	beq.n	80043ce <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a76      	ldr	r2, [pc, #472]	@ (8004504 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d04c      	beq.n	80043ca <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a74      	ldr	r2, [pc, #464]	@ (8004508 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d045      	beq.n	80043c6 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a73      	ldr	r2, [pc, #460]	@ (800450c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03e      	beq.n	80043c2 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a71      	ldr	r2, [pc, #452]	@ (8004510 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d037      	beq.n	80043be <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a70      	ldr	r2, [pc, #448]	@ (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d030      	beq.n	80043ba <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6e      	ldr	r2, [pc, #440]	@ (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d029      	beq.n	80043b6 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6d      	ldr	r2, [pc, #436]	@ (800451c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a6b      	ldr	r2, [pc, #428]	@ (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01a      	beq.n	80043ac <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a6a      	ldr	r2, [pc, #424]	@ (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d012      	beq.n	80043a6 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a68      	ldr	r2, [pc, #416]	@ (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00a      	beq.n	80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a67      	ldr	r2, [pc, #412]	@ (800452c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d102      	bne.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8004394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004398:	e01a      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800439a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800439e:	e017      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043a4:	e014      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043aa:	e011      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043b0:	e00e      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043b2:	2340      	movs	r3, #64	@ 0x40
 80043b4:	e00c      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043b6:	2340      	movs	r3, #64	@ 0x40
 80043b8:	e00a      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043ba:	2340      	movs	r3, #64	@ 0x40
 80043bc:	e008      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043be:	2340      	movs	r3, #64	@ 0x40
 80043c0:	e006      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e004      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e002      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4a57      	ldr	r2, [pc, #348]	@ (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80043d2:	60d3      	str	r3, [r2, #12]
 80043d4:	e05b      	b.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a49      	ldr	r2, [pc, #292]	@ (8004500 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d053      	beq.n	8004488 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a47      	ldr	r2, [pc, #284]	@ (8004504 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d04c      	beq.n	8004484 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a46      	ldr	r2, [pc, #280]	@ (8004508 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d045      	beq.n	8004480 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a44      	ldr	r2, [pc, #272]	@ (800450c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d03e      	beq.n	800447c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a43      	ldr	r2, [pc, #268]	@ (8004510 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d037      	beq.n	8004478 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a41      	ldr	r2, [pc, #260]	@ (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d030      	beq.n	8004474 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a40      	ldr	r2, [pc, #256]	@ (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d029      	beq.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3e      	ldr	r2, [pc, #248]	@ (800451c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3d      	ldr	r2, [pc, #244]	@ (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d01a      	beq.n	8004466 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3b      	ldr	r2, [pc, #236]	@ (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d012      	beq.n	8004460 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a3a      	ldr	r2, [pc, #232]	@ (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00a      	beq.n	800445a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a38      	ldr	r2, [pc, #224]	@ (800452c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d102      	bne.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800444e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004452:	e01a      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004454:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004458:	e017      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800445a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800445e:	e014      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004460:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004464:	e011      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004466:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800446a:	e00e      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800446c:	2340      	movs	r3, #64	@ 0x40
 800446e:	e00c      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004470:	2340      	movs	r3, #64	@ 0x40
 8004472:	e00a      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004474:	2340      	movs	r3, #64	@ 0x40
 8004476:	e008      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004478:	2340      	movs	r3, #64	@ 0x40
 800447a:	e006      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800447c:	2301      	movs	r3, #1
 800447e:	e004      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004480:	2301      	movs	r3, #1
 8004482:	e002      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004488:	2301      	movs	r3, #1
 800448a:	4a29      	ldr	r2, [pc, #164]	@ (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800448c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0216 	orr.w	r2, r2, #22
 800449c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d103      	bne.n	80044be <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0208 	orr.w	r2, r2, #8
 80044cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e005      	b.n	80044ec <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40026400 	.word	0x40026400
 80044fc:	40026058 	.word	0x40026058
 8004500:	40026010 	.word	0x40026010
 8004504:	40026410 	.word	0x40026410
 8004508:	40026070 	.word	0x40026070
 800450c:	40026470 	.word	0x40026470
 8004510:	40026028 	.word	0x40026028
 8004514:	40026428 	.word	0x40026428
 8004518:	40026088 	.word	0x40026088
 800451c:	40026488 	.word	0x40026488
 8004520:	40026040 	.word	0x40026040
 8004524:	40026440 	.word	0x40026440
 8004528:	400260a0 	.word	0x400260a0
 800452c:	400264a0 	.word	0x400264a0
 8004530:	40026000 	.word	0x40026000

08004534 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d108      	bne.n	8004564 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004562:	e007      	b.n	8004574 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
	...

08004580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	e159      	b.n	8004850 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800459c:	2201      	movs	r2, #1
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	f040 8148 	bne.w	800484a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d005      	beq.n	80045d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d130      	bne.n	8004634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004608:	2201      	movs	r2, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 0201 	and.w	r2, r3, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b03      	cmp	r3, #3
 800463e:	d017      	beq.n	8004670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	2203      	movs	r2, #3
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d123      	bne.n	80046c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	08da      	lsrs	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3208      	adds	r2, #8
 8004684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	220f      	movs	r2, #15
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	08da      	lsrs	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3208      	adds	r2, #8
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0203 	and.w	r2, r3, #3
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a2 	beq.w	800484a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	4b56      	ldr	r3, [pc, #344]	@ (8004864 <HAL_GPIO_Init+0x2e4>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	4a55      	ldr	r2, [pc, #340]	@ (8004864 <HAL_GPIO_Init+0x2e4>)
 8004710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004714:	6453      	str	r3, [r2, #68]	@ 0x44
 8004716:	4b53      	ldr	r3, [pc, #332]	@ (8004864 <HAL_GPIO_Init+0x2e4>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004722:	4a51      	ldr	r2, [pc, #324]	@ (8004868 <HAL_GPIO_Init+0x2e8>)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	3302      	adds	r3, #2
 800472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	220f      	movs	r2, #15
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a48      	ldr	r2, [pc, #288]	@ (800486c <HAL_GPIO_Init+0x2ec>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_Init+0x202>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a47      	ldr	r2, [pc, #284]	@ (8004870 <HAL_GPIO_Init+0x2f0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_Init+0x1fe>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a46      	ldr	r2, [pc, #280]	@ (8004874 <HAL_GPIO_Init+0x2f4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_Init+0x1fa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a45      	ldr	r2, [pc, #276]	@ (8004878 <HAL_GPIO_Init+0x2f8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_Init+0x1f6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a44      	ldr	r2, [pc, #272]	@ (800487c <HAL_GPIO_Init+0x2fc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_Init+0x1f2>
 800476e:	2304      	movs	r3, #4
 8004770:	e008      	b.n	8004784 <HAL_GPIO_Init+0x204>
 8004772:	2307      	movs	r3, #7
 8004774:	e006      	b.n	8004784 <HAL_GPIO_Init+0x204>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_Init+0x204>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_Init+0x204>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_Init+0x204>
 8004782:	2300      	movs	r3, #0
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004794:	4934      	ldr	r1, [pc, #208]	@ (8004868 <HAL_GPIO_Init+0x2e8>)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a2:	4b37      	ldr	r3, [pc, #220]	@ (8004880 <HAL_GPIO_Init+0x300>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004880 <HAL_GPIO_Init+0x300>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004880 <HAL_GPIO_Init+0x300>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f0:	4a23      	ldr	r2, [pc, #140]	@ (8004880 <HAL_GPIO_Init+0x300>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047f6:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <HAL_GPIO_Init+0x300>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481a:	4a19      	ldr	r2, [pc, #100]	@ (8004880 <HAL_GPIO_Init+0x300>)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <HAL_GPIO_Init+0x300>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004844:	4a0e      	ldr	r2, [pc, #56]	@ (8004880 <HAL_GPIO_Init+0x300>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	f67f aea2 	bls.w	800459c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3724      	adds	r7, #36	@ 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	40023800 	.word	0x40023800
 8004868:	40013800 	.word	0x40013800
 800486c:	40020000 	.word	0x40020000
 8004870:	40020400 	.word	0x40020400
 8004874:	40020800 	.word	0x40020800
 8004878:	40020c00 	.word	0x40020c00
 800487c:	40021000 	.word	0x40021000
 8004880:	40013c00 	.word	0x40013c00

08004884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
 8004890:	4613      	mov	r3, r2
 8004892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004894:	787b      	ldrb	r3, [r7, #1]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048a0:	e003      	b.n	80048aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048a2:	887b      	ldrh	r3, [r7, #2]
 80048a4:	041a      	lsls	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	619a      	str	r2, [r3, #24]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e267      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048d2:	4b88      	ldr	r3, [pc, #544]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d00c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b85      	ldr	r3, [pc, #532]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d112      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b82      	ldr	r3, [pc, #520]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b7e      	ldr	r3, [pc, #504]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x108>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d157      	bne.n	80049bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e242      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x74>
 800491a:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b70      	ldr	r3, [pc, #448]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6f      	ldr	r2, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b6d      	ldr	r3, [pc, #436]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6c      	ldr	r2, [pc, #432]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 800494c:	4b69      	ldr	r3, [pc, #420]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b66      	ldr	r3, [pc, #408]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a65      	ldr	r2, [pc, #404]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fd ffaa 	bl	80028c4 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd ffa6 	bl	80028c4 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e207      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xc0>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd ff96 	bl	80028c4 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd ff92 	bl	80028c4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	@ 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1f3      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b51      	ldr	r3, [pc, #324]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0xe8>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d063      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049ca:	4b4a      	ldr	r3, [pc, #296]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b44      	ldr	r3, [pc, #272]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1c7      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b3b      	ldr	r3, [pc, #236]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4937      	ldr	r1, [pc, #220]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e03a      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	@ (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd ff4b 	bl	80028c4 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fd ff47 	bl	80028c4 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1a8      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4925      	ldr	r1, [pc, #148]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd ff2a 	bl	80028c4 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fd ff26 	bl	80028c4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e187      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d036      	beq.n	8004b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_RCC_OscConfig+0x248>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fd ff0a 	bl	80028c4 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fd ff06 	bl	80028c4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e167      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x200>
 8004ad2:	e01b      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_RCC_OscConfig+0x248>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fd fef3 	bl	80028c4 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fd feef 	bl	80028c4 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d907      	bls.n	8004b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e150      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ea      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8097 	beq.w	8004c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b81      	ldr	r3, [pc, #516]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	4a7c      	ldr	r2, [pc, #496]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b77      	ldr	r3, [pc, #476]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d118      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b74      	ldr	r3, [pc, #464]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a73      	ldr	r2, [pc, #460]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fd feaf 	bl	80028c4 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fd feab 	bl	80028c4 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e10c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2ea>
 8004b90:	4b64      	ldr	r3, [pc, #400]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b94:	4a63      	ldr	r2, [pc, #396]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x30c>
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a5e      	ldr	r2, [pc, #376]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004bc0:	4b58      	ldr	r3, [pc, #352]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bcc:	4b55      	ldr	r3, [pc, #340]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	4a54      	ldr	r2, [pc, #336]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fd fe70 	bl	80028c4 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd fe6c 	bl	80028c4 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0cb      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	4b49      	ldr	r3, [pc, #292]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ee      	beq.n	8004be8 <HAL_RCC_OscConfig+0x334>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fe5a 	bl	80028c4 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fd fe56 	bl	80028c4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0b5      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b39      	ldr	r3, [pc, #228]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	4a38      	ldr	r2, [pc, #224]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a1 	beq.w	8004d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c52:	4b34      	ldr	r3, [pc, #208]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d05c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d141      	bne.n	8004cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b31      	ldr	r3, [pc, #196]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fd fe2a 	bl	80028c4 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fd fe26 	bl	80028c4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e087      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	491b      	ldr	r1, [pc, #108]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd fdff 	bl	80028c4 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd fdfb 	bl	80028c4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e05c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x416>
 8004ce8:	e054      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fde8 	bl	80028c4 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fd fde4 	bl	80028c4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e045      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x444>
 8004d16:	e03d      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e038      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	@ (8004da0 <HAL_RCC_OscConfig+0x4ec>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d121      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0cc      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b68      	ldr	r3, [pc, #416]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d90c      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b63      	ldr	r3, [pc, #396]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df8:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e10:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d044      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d003      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b3f      	ldr	r3, [pc, #252]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e067      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4934      	ldr	r1, [pc, #208]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e94:	f7fd fd16 	bl	80028c4 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fd fd12 	bl	80028c4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b25      	ldr	r3, [pc, #148]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d20c      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fd fc78 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	08008640 	.word	0x08008640
 8004f68:	20000008 	.word	0x20000008
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b094      	sub	sp, #80	@ 0x50
 8004f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f88:	4b7c      	ldr	r3, [pc, #496]	@ (800517c <HAL_RCC_GetSysClockFreq+0x20c>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d00d      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	f200 80e7 	bhi.w	8005168 <HAL_RCC_GetSysClockFreq+0x1f8>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x3a>
 8004fa2:	e0e1      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4b76      	ldr	r3, [pc, #472]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x210>)
 8004fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa8:	e0e1      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004faa:	4b76      	ldr	r3, [pc, #472]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x214>)
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fae:	e0de      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4b72      	ldr	r3, [pc, #456]	@ (800517c <HAL_RCC_GetSysClockFreq+0x20c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fba:	4b70      	ldr	r3, [pc, #448]	@ (800517c <HAL_RCC_GetSysClockFreq+0x20c>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d065      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800517c <HAL_RCC_GetSysClockFreq+0x20c>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fda:	2300      	movs	r3, #0
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	0159      	lsls	r1, r3, #5
 8004ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff4:	0150      	lsls	r0, r2, #5
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	1a51      	subs	r1, r2, r1
 8004ffe:	6139      	str	r1, [r7, #16]
 8005000:	4629      	mov	r1, r5
 8005002:	eb63 0301 	sbc.w	r3, r3, r1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005014:	4659      	mov	r1, fp
 8005016:	018b      	lsls	r3, r1, #6
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800501e:	4651      	mov	r1, sl
 8005020:	018a      	lsls	r2, r1, #6
 8005022:	46d4      	mov	ip, sl
 8005024:	ebb2 080c 	subs.w	r8, r2, ip
 8005028:	4659      	mov	r1, fp
 800502a:	eb63 0901 	sbc.w	r9, r3, r1
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800503a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005042:	4690      	mov	r8, r2
 8005044:	4699      	mov	r9, r3
 8005046:	4623      	mov	r3, r4
 8005048:	eb18 0303 	adds.w	r3, r8, r3
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	462b      	mov	r3, r5
 8005050:	eb49 0303 	adc.w	r3, r9, r3
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005062:	4629      	mov	r1, r5
 8005064:	024b      	lsls	r3, r1, #9
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	4604      	mov	r4, r0
 800506c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005070:	4601      	mov	r1, r0
 8005072:	024a      	lsls	r2, r1, #9
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507a:	2200      	movs	r2, #0
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005084:	f7fb fdc8 	bl	8000c18 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4613      	mov	r3, r2
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	e05c      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005092:	4b3a      	ldr	r3, [pc, #232]	@ (800517c <HAL_RCC_GetSysClockFreq+0x20c>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	2200      	movs	r2, #0
 800509a:	4618      	mov	r0, r3
 800509c:	4611      	mov	r1, r2
 800509e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	f04f 0000 	mov.w	r0, #0
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	0159      	lsls	r1, r3, #5
 80050ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050be:	0150      	lsls	r0, r2, #5
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	46c4      	mov	ip, r8
 80050c6:	ebb2 0a0c 	subs.w	sl, r2, ip
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	468c      	mov	ip, r1
 80050d0:	eb63 0b0c 	sbc.w	fp, r3, ip
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050e8:	ebb2 040a 	subs.w	r4, r2, sl
 80050ec:	eb63 050b 	sbc.w	r5, r3, fp
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	00eb      	lsls	r3, r5, #3
 80050fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050fe:	00e2      	lsls	r2, r4, #3
 8005100:	4614      	mov	r4, r2
 8005102:	461d      	mov	r5, r3
 8005104:	4603      	mov	r3, r0
 8005106:	18e3      	adds	r3, r4, r3
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	460b      	mov	r3, r1
 800510c:	eb45 0303 	adc.w	r3, r5, r3
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800511e:	4629      	mov	r1, r5
 8005120:	028b      	lsls	r3, r1, #10
 8005122:	4620      	mov	r0, r4
 8005124:	4629      	mov	r1, r5
 8005126:	4604      	mov	r4, r0
 8005128:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800512c:	4601      	mov	r1, r0
 800512e:	028a      	lsls	r2, r1, #10
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	61fa      	str	r2, [r7, #28]
 800513c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005140:	f7fb fd6a 	bl	8000c18 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_RCC_GetSysClockFreq+0x20c>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	3301      	adds	r3, #1
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800515c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800515e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005166:	e002      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x210>)
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800516c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800516e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005170:	4618      	mov	r0, r3
 8005172:	3750      	adds	r7, #80	@ 0x50
 8005174:	46bd      	mov	sp, r7
 8005176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	00f42400 	.word	0x00f42400
 8005184:	007a1200 	.word	0x007a1200

08005188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800518c:	4b02      	ldr	r3, [pc, #8]	@ (8005198 <HAL_RCC_GetHCLKFreq+0x10>)
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	20000008 	.word	0x20000008

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051a0:	f7ff fff2 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	0a9b      	lsrs	r3, r3, #10
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	4903      	ldr	r1, [pc, #12]	@ (80051c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40023800 	.word	0x40023800
 80051c0:	08008650 	.word	0x08008650

080051c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051c8:	f7ff ffde 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0b5b      	lsrs	r3, r3, #13
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4903      	ldr	r1, [pc, #12]	@ (80051e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800
 80051e8:	08008650 	.word	0x08008650

080051ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	220f      	movs	r2, #15
 80051fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <HAL_RCC_GetClockConfig+0x58>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0203 	and.w	r2, r3, #3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005208:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <HAL_RCC_GetClockConfig+0x58>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <HAL_RCC_GetClockConfig+0x58>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005220:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <HAL_RCC_GetClockConfig+0x58>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_RCC_GetClockConfig+0x5c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0207 	and.w	r2, r3, #7
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	40023800 	.word	0x40023800
 8005248:	40023c00 	.word	0x40023c00

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005270:	2b00      	cmp	r3, #0
 8005272:	d035      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005274:	4b67      	ldr	r3, [pc, #412]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800527a:	f7fd fb23 	bl	80028c4 <HAL_GetTick>
 800527e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005282:	f7fd fb1f 	bl	80028c4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0ba      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005294:	4b60      	ldr	r3, [pc, #384]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	019a      	lsls	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	071b      	lsls	r3, r3, #28
 80052ac:	495a      	ldr	r1, [pc, #360]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052b4:	4b57      	ldr	r3, [pc, #348]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ba:	f7fd fb03 	bl	80028c4 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052c2:	f7fd faff 	bl	80028c4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e09a      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d4:	4b50      	ldr	r3, [pc, #320]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8083 	beq.w	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	4b49      	ldr	r3, [pc, #292]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	4a48      	ldr	r2, [pc, #288]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052fe:	4b46      	ldr	r3, [pc, #280]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800530a:	4b44      	ldr	r3, [pc, #272]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a43      	ldr	r2, [pc, #268]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005316:	f7fd fad5 	bl	80028c4 <HAL_GetTick>
 800531a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800531c:	e008      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fd fad1 	bl	80028c4 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e06c      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005330:	4b3a      	ldr	r3, [pc, #232]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800533c:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005344:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02f      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	429a      	cmp	r2, r3
 8005358:	d028      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800535a:	4b2f      	ldr	r3, [pc, #188]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005362:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005364:	4b2e      	ldr	r3, [pc, #184]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536a:	4b2d      	ldr	r3, [pc, #180]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005370:	4a29      	ldr	r2, [pc, #164]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005376:	4b28      	ldr	r3, [pc, #160]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d114      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005382:	f7fd fa9f 	bl	80028c4 <HAL_GetTick>
 8005386:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	e00a      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fd fa9b 	bl	80028c4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e034      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ee      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053b8:	d10d      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053ba:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ce:	4912      	ldr	r1, [pc, #72]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	608b      	str	r3, [r1, #8]
 80053d4:	e005      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053d6:	4b10      	ldr	r3, [pc, #64]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	4a0f      	ldr	r2, [pc, #60]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053e0:	6093      	str	r3, [r2, #8]
 80053e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ee:	490a      	ldr	r1, [pc, #40]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	7c1a      	ldrb	r2, [r3, #16]
 8005404:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005406:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	42470068 	.word	0x42470068
 8005418:	40023800 	.word	0x40023800
 800541c:	40007000 	.word	0x40007000
 8005420:	42470e40 	.word	0x42470e40
 8005424:	424711e0 	.word	0x424711e0

08005428 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e073      	b.n	8005522 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7f5b      	ldrb	r3, [r3, #29]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fd f854 	bl	80024f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b10      	cmp	r3, #16
 8005462:	d055      	beq.n	8005510 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	22ca      	movs	r2, #202	@ 0xca
 800546a:	625a      	str	r2, [r3, #36]	@ 0x24
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2253      	movs	r2, #83	@ 0x53
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fa49 	bl	800590c <RTC_EnterInitMode>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d12c      	bne.n	80054de <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005496:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68d2      	ldr	r2, [r2, #12]
 80054be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6919      	ldr	r1, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	041a      	lsls	r2, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa50 	bl	800597a <RTC_ExitInitMode>
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d110      	bne.n	8005506 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	22ff      	movs	r2, #255	@ 0xff
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24
 800550e:	e001      	b.n	8005514 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800552a:	b590      	push	{r4, r7, lr}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	7f1b      	ldrb	r3, [r3, #28]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_RTC_SetTime+0x1c>
 8005542:	2302      	movs	r3, #2
 8005544:	e087      	b.n	8005656 <HAL_RTC_SetTime+0x12c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2202      	movs	r2, #2
 8005550:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d126      	bne.n	80055a6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2200      	movs	r2, #0
 800556a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fa27 	bl	80059c4 <RTC_ByteToBcd2>
 8005576:	4603      	mov	r3, r0
 8005578:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fa20 	bl	80059c4 <RTC_ByteToBcd2>
 8005584:	4603      	mov	r3, r0
 8005586:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005588:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	789b      	ldrb	r3, [r3, #2]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fa18 	bl	80059c4 <RTC_ByteToBcd2>
 8005594:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005596:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	78db      	ldrb	r3, [r3, #3]
 800559e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e018      	b.n	80055d8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055c6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	78db      	ldrb	r3, [r3, #3]
 80055d2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	22ca      	movs	r2, #202	@ 0xca
 80055de:	625a      	str	r2, [r3, #36]	@ 0x24
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2253      	movs	r2, #83	@ 0x53
 80055e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f98f 	bl	800590c <RTC_EnterInitMode>
 80055ee:	4603      	mov	r3, r0
 80055f0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055f2:	7cfb      	ldrb	r3, [r7, #19]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d120      	bne.n	800563a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005602:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005606:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005616:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6899      	ldr	r1, [r3, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f9a2 	bl	800597a <RTC_ExitInitMode>
 8005636:	4603      	mov	r3, r0
 8005638:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]

  return status;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
}
 8005656:	4618      	mov	r0, r3
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	bd90      	pop	{r4, r7, pc}

0800565e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005690:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005694:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	0a1b      	lsrs	r3, r3, #8
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	0d9b      	lsrs	r3, r3, #22
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11a      	bne.n	8005710 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f98d 	bl	80059fe <RTC_Bcd2ToByte>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f984 	bl	80059fe <RTC_Bcd2ToByte>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	789b      	ldrb	r3, [r3, #2]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f97b 	bl	80059fe <RTC_Bcd2ToByte>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800571a:	b590      	push	{r4, r7, lr}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	7f1b      	ldrb	r3, [r3, #28]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_RTC_SetDate+0x1c>
 8005732:	2302      	movs	r3, #2
 8005734:	e071      	b.n	800581a <HAL_RTC_SetDate+0x100>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2202      	movs	r2, #2
 8005740:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <HAL_RTC_SetDate+0x4c>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	f023 0310 	bic.w	r3, r3, #16
 800575c:	b2db      	uxtb	r3, r3
 800575e:	330a      	adds	r3, #10
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d11c      	bne.n	80057a6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	78db      	ldrb	r3, [r3, #3]
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f927 	bl	80059c4 <RTC_ByteToBcd2>
 8005776:	4603      	mov	r3, r0
 8005778:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f920 	bl	80059c4 <RTC_ByteToBcd2>
 8005784:	4603      	mov	r3, r0
 8005786:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005788:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	789b      	ldrb	r3, [r3, #2]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f918 	bl	80059c4 <RTC_ByteToBcd2>
 8005794:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005796:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e00e      	b.n	80057c4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	78db      	ldrb	r3, [r3, #3]
 80057aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80057b2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80057b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	22ca      	movs	r2, #202	@ 0xca
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2253      	movs	r2, #83	@ 0x53
 80057d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f899 	bl	800590c <RTC_EnterInitMode>
 80057da:	4603      	mov	r3, r0
 80057dc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057de:	7cfb      	ldrb	r3, [r7, #19]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10c      	bne.n	80057fe <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f8c0 	bl	800597a <RTC_ExitInitMode>
 80057fa:	4603      	mov	r3, r0
 80057fc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	22ff      	movs	r2, #255	@ 0xff
 8005810:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]

  return status;
 8005818:	7cfb      	ldrb	r3, [r7, #19]
}
 800581a:	4618      	mov	r0, r3
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	bd90      	pop	{r4, r7, pc}

08005822 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b086      	sub	sp, #24
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800583c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005840:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	0b5b      	lsrs	r3, r3, #13
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d11a      	bne.n	80058b6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	78db      	ldrb	r3, [r3, #3]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f8ba 	bl	80059fe <RTC_Bcd2ToByte>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f8b1 	bl	80059fe <RTC_Bcd2ToByte>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	789b      	ldrb	r3, [r3, #2]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f8a8 	bl	80059fe <RTC_Bcd2ToByte>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005908 <HAL_RTC_WaitForSynchro+0x48>)
 80058d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058d4:	f7fc fff6 	bl	80028c4 <HAL_GetTick>
 80058d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058da:	e009      	b.n	80058f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058dc:	f7fc fff2 	bl	80028c4 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ea:	d901      	bls.n	80058f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e007      	b.n	8005900 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0ee      	beq.n	80058dc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	00013f5f 	.word	0x00013f5f

0800590c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d122      	bne.n	8005970 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005938:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800593a:	f7fc ffc3 	bl	80028c4 <HAL_GetTick>
 800593e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005940:	e00c      	b.n	800595c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005942:	f7fc ffbf 	bl	80028c4 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005950:	d904      	bls.n	800595c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <RTC_EnterInitMode+0x64>
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d1e8      	bne.n	8005942 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005994:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff ff8b 	bl	80058c0 <HAL_RTC_WaitForSynchro>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80059d2:	e005      	b.n	80059e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	3b0a      	subs	r3, #10
 80059de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b09      	cmp	r3, #9
 80059e4:	d8f6      	bhi.n	80059d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b2db      	uxtb	r3, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	4603      	mov	r3, r0
 8005a06:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	b2db      	uxtb	r3, r3
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e041      	b.n	8005ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc fd76 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 f974 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e03c      	b.n	8005b6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b74 <HAL_TIM_Base_Start+0x9c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d018      	beq.n	8005b34 <HAL_TIM_Base_Start+0x5c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0a:	d013      	beq.n	8005b34 <HAL_TIM_Base_Start+0x5c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a19      	ldr	r2, [pc, #100]	@ (8005b78 <HAL_TIM_Base_Start+0xa0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00e      	beq.n	8005b34 <HAL_TIM_Base_Start+0x5c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a18      	ldr	r2, [pc, #96]	@ (8005b7c <HAL_TIM_Base_Start+0xa4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_TIM_Base_Start+0x5c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <HAL_TIM_Base_Start+0xa8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_TIM_Base_Start+0x5c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <HAL_TIM_Base_Start+0xac>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d111      	bne.n	8005b58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d010      	beq.n	8005b68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0201 	orr.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	e007      	b.n	8005b68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800
 8005b80:	40000c00 	.word	0x40000c00
 8005b84:	40014000 	.word	0x40014000

08005b88 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIM_GenerateEvent+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e014      	b.n	8005bca <HAL_TIM_GenerateEvent+0x42>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0b4      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x186>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c28:	d03e      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c2e:	f200 8087 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x172>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3e:	d87f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b70      	cmp	r3, #112	@ 0x70
 8005c42:	d01a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xa6>
 8005c44:	2b70      	cmp	r3, #112	@ 0x70
 8005c46:	d87b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b60      	cmp	r3, #96	@ 0x60
 8005c4a:	d050      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x11a>
 8005c4c:	2b60      	cmp	r3, #96	@ 0x60
 8005c4e:	d877      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b50      	cmp	r3, #80	@ 0x50
 8005c52:	d03c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xfa>
 8005c54:	2b50      	cmp	r3, #80	@ 0x50
 8005c56:	d873      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	d058      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x13a>
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d86f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b30      	cmp	r3, #48	@ 0x30
 8005c62:	d064      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	2b30      	cmp	r3, #48	@ 0x30
 8005c66:	d86b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d060      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d867      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d05a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c78:	e062      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8a:	f000 f966 	bl	8005f5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
      break;
 8005ca6:	e04f      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb8:	f000 f94f 	bl	8005f5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 f8c6 	bl	8005e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2150      	movs	r1, #80	@ 0x50
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f91d 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e02c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 f8e4 	bl	8005ec8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2160      	movs	r1, #96	@ 0x60
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f90d 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 f8a6 	bl	8005e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2140      	movs	r1, #64	@ 0x40
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f8fd 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 f8f4 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a36      	ldr	r2, [pc, #216]	@ (8005e50 <TIM_Base_SetConfig+0xec>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00f      	beq.n	8005d9c <TIM_Base_SetConfig+0x38>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d82:	d00b      	beq.n	8005d9c <TIM_Base_SetConfig+0x38>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a33      	ldr	r2, [pc, #204]	@ (8005e54 <TIM_Base_SetConfig+0xf0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d007      	beq.n	8005d9c <TIM_Base_SetConfig+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a32      	ldr	r2, [pc, #200]	@ (8005e58 <TIM_Base_SetConfig+0xf4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_Base_SetConfig+0x38>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a31      	ldr	r2, [pc, #196]	@ (8005e5c <TIM_Base_SetConfig+0xf8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d108      	bne.n	8005dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a27      	ldr	r2, [pc, #156]	@ (8005e50 <TIM_Base_SetConfig+0xec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a24      	ldr	r2, [pc, #144]	@ (8005e54 <TIM_Base_SetConfig+0xf0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a23      	ldr	r2, [pc, #140]	@ (8005e58 <TIM_Base_SetConfig+0xf4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a22      	ldr	r2, [pc, #136]	@ (8005e5c <TIM_Base_SetConfig+0xf8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a21      	ldr	r2, [pc, #132]	@ (8005e60 <TIM_Base_SetConfig+0xfc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a20      	ldr	r2, [pc, #128]	@ (8005e64 <TIM_Base_SetConfig+0x100>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e68 <TIM_Base_SetConfig+0x104>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a0b      	ldr	r2, [pc, #44]	@ (8005e50 <TIM_Base_SetConfig+0xec>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d103      	bne.n	8005e2e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f043 0204 	orr.w	r2, r3, #4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800

08005e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 030a 	bic.w	r3, r3, #10
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0210 	bic.w	r2, r3, #16
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	031b      	lsls	r3, r3, #12
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	621a      	str	r2, [r3, #32]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f043 0307 	orr.w	r3, r3, #7
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	609a      	str	r2, [r3, #8]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	609a      	str	r2, [r3, #8]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e050      	b.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1b      	ldr	r2, [pc, #108]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffc:	d013      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a17      	ldr	r2, [pc, #92]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a14      	ldr	r2, [pc, #80]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a12      	ldr	r2, [pc, #72]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10c      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800602c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4313      	orrs	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr
 800605c:	40010000 	.word	0x40010000
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40014000 	.word	0x40014000

08006070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e042      	b.n	8006108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc fab8 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	@ 0x24
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fd79 	bl	8006bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b20      	cmp	r3, #32
 800612e:	d175      	bne.n	800621c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_UART_Transmit+0x2c>
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e06e      	b.n	800621e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2221      	movs	r2, #33	@ 0x21
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800614e:	f7fc fbb9 	bl	80028c4 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006168:	d108      	bne.n	800617c <HAL_UART_Transmit+0x6c>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e003      	b.n	8006184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006184:	e02e      	b.n	80061e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	2180      	movs	r1, #128	@ 0x80
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fb19 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e03a      	b.n	800621e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	3302      	adds	r3, #2
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e007      	b.n	80061d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	781a      	ldrb	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	3301      	adds	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1cb      	bne.n	8006186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2140      	movs	r1, #64	@ 0x40
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fae5 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e006      	b.n	800621e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b0ba      	sub	sp, #232	@ 0xe8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_UART_IRQHandler+0x66>
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fbd1 	bl	8006a2e <UART_Receive_IT>
      return;
 800628c:	e273      	b.n	8006776 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80de 	beq.w	8006454 <HAL_UART_IRQHandler+0x22c>
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80d1 	beq.w	8006454 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <HAL_UART_IRQHandler+0xae>
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xd2>
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f043 0202 	orr.w	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xf6>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006316:	f043 0204 	orr.w	r2, r3, #4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <HAL_UART_IRQHandler+0x126>
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d105      	bne.n	8006342 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 820a 	beq.w	800676c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_UART_IRQHandler+0x14e>
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fb5c 	bl	8006a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b40      	cmp	r3, #64	@ 0x40
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <HAL_UART_IRQHandler+0x17a>
 800639a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d04f      	beq.n	8006442 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa69 	bl	800687a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d141      	bne.n	800643a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1d9      	bne.n	80063b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d013      	beq.n	8006432 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640e:	4a8a      	ldr	r2, [pc, #552]	@ (8006638 <HAL_UART_IRQHandler+0x410>)
 8006410:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	4618      	mov	r0, r3
 8006418:	f7fc fc8a 	bl	8002d30 <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e00e      	b.n	8006450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9b4 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	e00a      	b.n	8006450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9b0 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	e006      	b.n	8006450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9ac 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800644e:	e18d      	b.n	800676c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006450:	bf00      	nop
    return;
 8006452:	e18b      	b.n	800676c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006458:	2b01      	cmp	r3, #1
 800645a:	f040 8167 	bne.w	800672c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800645e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8160 	beq.w	800672c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8159 	beq.w	800672c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	f040 80ce 	bne.w	800663c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80a9 	beq.w	8006608 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064be:	429a      	cmp	r2, r3
 80064c0:	f080 80a2 	bcs.w	8006608 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d6:	f000 8088 	beq.w	80065ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800650a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800651e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1d9      	bne.n	80064da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3314      	adds	r3, #20
 8006546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800654a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800654e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800655c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e1      	bne.n	8006526 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800658c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e3      	bne.n	8006562 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e3      	bne.n	80065a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fc fb33 	bl	8002c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8d6 	bl	80067b2 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006606:	e0b3      	b.n	8006770 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800660c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006610:	429a      	cmp	r2, r3
 8006612:	f040 80ad 	bne.w	8006770 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006620:	f040 80a6 	bne.w	8006770 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8be 	bl	80067b2 <HAL_UARTEx_RxEventCallback>
      return;
 8006636:	e09b      	b.n	8006770 <HAL_UART_IRQHandler+0x548>
 8006638:	0800693f 	.word	0x0800693f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006644:	b29b      	uxth	r3, r3
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 808e 	beq.w	8006774 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8089 	beq.w	8006774 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006678:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006686:	647a      	str	r2, [r7, #68]	@ 0x44
 8006688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800668c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e3      	bne.n	8006662 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	623b      	str	r3, [r7, #32]
   return(result);
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066be:	633a      	str	r2, [r7, #48]	@ 0x30
 80066c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e3      	bne.n	800669a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006704:	61fa      	str	r2, [r7, #28]
 8006706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	69b9      	ldr	r1, [r7, #24]
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	617b      	str	r3, [r7, #20]
   return(result);
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e3      	bne.n	80066e0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800671e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f844 	bl	80067b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800672a:	e023      	b.n	8006774 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <HAL_UART_IRQHandler+0x524>
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f90b 	bl	8006960 <UART_Transmit_IT>
    return;
 800674a:	e014      	b.n	8006776 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00e      	beq.n	8006776 <HAL_UART_IRQHandler+0x54e>
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800675c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f94a 	bl	80069fe <UART_EndTransmit_IT>
    return;
 800676a:	e004      	b.n	8006776 <HAL_UART_IRQHandler+0x54e>
    return;
 800676c:	bf00      	nop
 800676e:	e002      	b.n	8006776 <HAL_UART_IRQHandler+0x54e>
      return;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_UART_IRQHandler+0x54e>
      return;
 8006774:	bf00      	nop
  }
}
 8006776:	37e8      	adds	r7, #232	@ 0xe8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr

0800678e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr

080067b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr

080067c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d8:	e03b      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d037      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fc f86f 	bl	80028c4 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	6a3a      	ldr	r2, [r7, #32]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e03a      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d023      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b80      	cmp	r3, #128	@ 0x80
 800680e:	d020      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b40      	cmp	r3, #64	@ 0x40
 8006814:	d01d      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d116      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f81d 	bl	800687a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2208      	movs	r2, #8
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e00f      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d0b4      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800687a:	b480      	push	{r7}
 800687c:	b095      	sub	sp, #84	@ 0x54
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80068a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3314      	adds	r3, #20
 80068bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d119      	bne.n	8006926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	60bb      	str	r3, [r7, #8]
   return(result);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	647b      	str	r3, [r7, #68]	@ 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006912:	61ba      	str	r2, [r7, #24]
 8006914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6979      	ldr	r1, [r7, #20]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	613b      	str	r3, [r7, #16]
   return(result);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006934:	bf00      	nop
 8006936:	3754      	adds	r7, #84	@ 0x54
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff ff24 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b21      	cmp	r3, #33	@ 0x21
 8006972:	d13e      	bne.n	80069f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697c:	d114      	bne.n	80069a8 <UART_Transmit_IT+0x48>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d110      	bne.n	80069a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800699a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	1c9a      	adds	r2, r3, #2
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]
 80069a6:	e008      	b.n	80069ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6211      	str	r1, [r2, #32]
 80069b2:	781a      	ldrb	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	4619      	mov	r1, r3
 80069c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10f      	bne.n	80069ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff feac 	bl	800677c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b08c      	sub	sp, #48	@ 0x30
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b22      	cmp	r3, #34	@ 0x22
 8006a48:	f040 80aa 	bne.w	8006ba0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a54:	d115      	bne.n	8006a82 <UART_Receive_IT+0x54>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d111      	bne.n	8006a82 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7a:	1c9a      	adds	r2, r3, #2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a80:	e024      	b.n	8006acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a90:	d007      	beq.n	8006aa2 <UART_Receive_IT+0x74>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <UART_Receive_IT+0x82>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e008      	b.n	8006ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d15d      	bne.n	8006b9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0220 	bic.w	r2, r2, #32
 8006aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695a      	ldr	r2, [r3, #20]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d135      	bne.n	8006b92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	330c      	adds	r3, #12
 8006b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f023 0310 	bic.w	r3, r3, #16
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b4c:	623a      	str	r2, [r7, #32]
 8006b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d10a      	bne.n	8006b84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fe11 	bl	80067b2 <HAL_UARTEx_RxEventCallback>
 8006b90:	e002      	b.n	8006b98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff fdfb 	bl	800678e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e002      	b.n	8006ba2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e000      	b.n	8006ba2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ba0:	2302      	movs	r3, #2
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3730      	adds	r7, #48	@ 0x30
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb0:	b0c0      	sub	sp, #256	@ 0x100
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	68d9      	ldr	r1, [r3, #12]
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	ea40 0301 	orr.w	r3, r0, r1
 8006bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c04:	f021 010c 	bic.w	r1, r1, #12
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c12:	430b      	orrs	r3, r1
 8006c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c26:	6999      	ldr	r1, [r3, #24]
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	ea40 0301 	orr.w	r3, r0, r1
 8006c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b91      	ldr	r3, [pc, #580]	@ (8006e80 <UART_SetConfig+0x2d4>)
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d005      	beq.n	8006c4c <UART_SetConfig+0xa0>
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b8f      	ldr	r3, [pc, #572]	@ (8006e84 <UART_SetConfig+0x2d8>)
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d104      	bne.n	8006c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c4c:	f7fe faba 	bl	80051c4 <HAL_RCC_GetPCLK2Freq>
 8006c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c54:	e003      	b.n	8006c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c56:	f7fe faa1 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8006c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c68:	f040 8110 	bne.w	8006e8c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c7e:	4622      	mov	r2, r4
 8006c80:	462b      	mov	r3, r5
 8006c82:	1891      	adds	r1, r2, r2
 8006c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c86:	415b      	adcs	r3, r3
 8006c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	4604      	mov	r4, r0
 8006c94:	eb12 0804 	adds.w	r8, r2, r4
 8006c98:	460c      	mov	r4, r1
 8006c9a:	eb43 0904 	adc.w	r9, r3, r4
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	eb18 0303 	adds.w	r3, r8, r3
 8006cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	eb49 0303 	adc.w	r3, r9, r3
 8006cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cde:	460b      	mov	r3, r1
 8006ce0:	18db      	adds	r3, r3, r3
 8006ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	eb42 0303 	adc.w	r3, r2, r3
 8006cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cf4:	f7f9 ff90 	bl	8000c18 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b62      	ldr	r3, [pc, #392]	@ (8006e88 <UART_SetConfig+0x2dc>)
 8006cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	011c      	lsls	r4, r3, #4
 8006d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d20:	415b      	adcs	r3, r3
 8006d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d28:	4645      	mov	r5, r8
 8006d2a:	eb12 0a05 	adds.w	sl, r2, r5
 8006d2e:	4640      	mov	r0, r8
 8006d30:	4649      	mov	r1, r9
 8006d32:	460d      	mov	r5, r1
 8006d34:	eb43 0b05 	adc.w	fp, r3, r5
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d4c:	4692      	mov	sl, r2
 8006d4e:	469b      	mov	fp, r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	eb1a 0303 	adds.w	r3, sl, r3
 8006d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	18db      	adds	r3, r3, r3
 8006d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d7e:	4613      	mov	r3, r2
 8006d80:	eb42 0303 	adc.w	r3, r2, r3
 8006d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d8e:	f7f9 ff43 	bl	8000c18 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	4b3b      	ldr	r3, [pc, #236]	@ (8006e88 <UART_SetConfig+0x2dc>)
 8006d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	2264      	movs	r2, #100	@ 0x64
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	1acb      	subs	r3, r1, r3
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dae:	4b36      	ldr	r3, [pc, #216]	@ (8006e88 <UART_SetConfig+0x2dc>)
 8006db0:	fba3 2302 	umull	r2, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dbc:	441c      	add	r4, r3
 8006dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	1891      	adds	r1, r2, r2
 8006dd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dd8:	415b      	adcs	r3, r3
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006de0:	4641      	mov	r1, r8
 8006de2:	1851      	adds	r1, r2, r1
 8006de4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006de6:	4649      	mov	r1, r9
 8006de8:	414b      	adcs	r3, r1
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006df8:	4659      	mov	r1, fp
 8006dfa:	00cb      	lsls	r3, r1, #3
 8006dfc:	4655      	mov	r5, sl
 8006dfe:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006e02:	4651      	mov	r1, sl
 8006e04:	00ca      	lsls	r2, r1, #3
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	189b      	adds	r3, r3, r2
 8006e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e14:	464b      	mov	r3, r9
 8006e16:	460a      	mov	r2, r1
 8006e18:	eb42 0303 	adc.w	r3, r2, r3
 8006e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e34:	460b      	mov	r3, r1
 8006e36:	18db      	adds	r3, r3, r3
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	eb42 0303 	adc.w	r3, r2, r3
 8006e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e4a:	f7f9 fee5 	bl	8000c18 <__aeabi_uldivmod>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4b0d      	ldr	r3, [pc, #52]	@ (8006e88 <UART_SetConfig+0x2dc>)
 8006e54:	fba3 1302 	umull	r1, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	2164      	movs	r1, #100	@ 0x64
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	3332      	adds	r3, #50	@ 0x32
 8006e66:	4a08      	ldr	r2, [pc, #32]	@ (8006e88 <UART_SetConfig+0x2dc>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	f003 0207 	and.w	r2, r3, #7
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4422      	add	r2, r4
 8006e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e7c:	e10a      	b.n	8007094 <UART_SetConfig+0x4e8>
 8006e7e:	bf00      	nop
 8006e80:	40011000 	.word	0x40011000
 8006e84:	40011400 	.word	0x40011400
 8006e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	1891      	adds	r1, r2, r2
 8006ea4:	6239      	str	r1, [r7, #32]
 8006ea6:	415b      	adcs	r3, r3
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eae:	4641      	mov	r1, r8
 8006eb0:	1854      	adds	r4, r2, r1
 8006eb2:	46cc      	mov	ip, r9
 8006eb4:	eb43 050c 	adc.w	r5, r3, ip
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	00eb      	lsls	r3, r5, #3
 8006ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ec6:	00e2      	lsls	r2, r4, #3
 8006ec8:	4614      	mov	r4, r2
 8006eca:	461d      	mov	r5, r3
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	18e3      	adds	r3, r4, r3
 8006ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed8:	460b      	mov	r3, r1
 8006eda:	eb45 0303 	adc.w	r3, r5, r3
 8006ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006efe:	4629      	mov	r1, r5
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	4604      	mov	r4, r0
 8006f08:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	008a      	lsls	r2, r1, #2
 8006f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f14:	f7f9 fe80 	bl	8000c18 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4b60      	ldr	r3, [pc, #384]	@ (80070a0 <UART_SetConfig+0x4f4>)
 8006f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	011c      	lsls	r4, r3, #4
 8006f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f48:	4641      	mov	r1, r8
 8006f4a:	1851      	adds	r1, r2, r1
 8006f4c:	6139      	str	r1, [r7, #16]
 8006f4e:	4649      	mov	r1, r9
 8006f50:	414b      	adcs	r3, r1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f60:	4659      	mov	r1, fp
 8006f62:	00cb      	lsls	r3, r1, #3
 8006f64:	4655      	mov	r5, sl
 8006f66:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	00ca      	lsls	r2, r1, #3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	4642      	mov	r2, r8
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	460a      	mov	r2, r1
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	008b      	lsls	r3, r1, #2
 8006fa4:	4645      	mov	r5, r8
 8006fa6:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8006faa:	4641      	mov	r1, r8
 8006fac:	008a      	lsls	r2, r1, #2
 8006fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fb2:	f7f9 fe31 	bl	8000c18 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4b38      	ldr	r3, [pc, #224]	@ (80070a0 <UART_SetConfig+0x4f4>)
 8006fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2264      	movs	r2, #100	@ 0x64
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	1acb      	subs	r3, r1, r3
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	3332      	adds	r3, #50	@ 0x32
 8006fd0:	4a33      	ldr	r2, [pc, #204]	@ (80070a0 <UART_SetConfig+0x4f4>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fdc:	441c      	add	r4, r3
 8006fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	1891      	adds	r1, r2, r2
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	415b      	adcs	r3, r3
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	1851      	adds	r1, r2, r1
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	4649      	mov	r1, r9
 8007004:	414b      	adcs	r3, r1
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007014:	4659      	mov	r1, fp
 8007016:	00cb      	lsls	r3, r1, #3
 8007018:	4655      	mov	r5, sl
 800701a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800701e:	4651      	mov	r1, sl
 8007020:	00ca      	lsls	r2, r1, #3
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	4603      	mov	r3, r0
 8007028:	4642      	mov	r2, r8
 800702a:	189b      	adds	r3, r3, r2
 800702c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702e:	464b      	mov	r3, r9
 8007030:	460a      	mov	r2, r1
 8007032:	eb42 0303 	adc.w	r3, r2, r3
 8007036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	663b      	str	r3, [r7, #96]	@ 0x60
 8007042:	667a      	str	r2, [r7, #100]	@ 0x64
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007050:	4649      	mov	r1, r9
 8007052:	008b      	lsls	r3, r1, #2
 8007054:	4645      	mov	r5, r8
 8007056:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800705a:	4641      	mov	r1, r8
 800705c:	008a      	lsls	r2, r1, #2
 800705e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007062:	f7f9 fdd9 	bl	8000c18 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <UART_SetConfig+0x4f4>)
 800706c:	fba3 1302 	umull	r1, r3, r3, r2
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	2164      	movs	r1, #100	@ 0x64
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	3332      	adds	r3, #50	@ 0x32
 800707e:	4a08      	ldr	r2, [pc, #32]	@ (80070a0 <UART_SetConfig+0x4f4>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4422      	add	r2, r4
 8007092:	609a      	str	r2, [r3, #8]
}
 8007094:	bf00      	nop
 8007096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800709a:	46bd      	mov	sp, r7
 800709c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a0:	51eb851f 	.word	0x51eb851f

080070a4 <_vsniprintf_r>:
 80070a4:	b530      	push	{r4, r5, lr}
 80070a6:	4614      	mov	r4, r2
 80070a8:	2c00      	cmp	r4, #0
 80070aa:	b09b      	sub	sp, #108	@ 0x6c
 80070ac:	4605      	mov	r5, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	da05      	bge.n	80070be <_vsniprintf_r+0x1a>
 80070b2:	238b      	movs	r3, #139	@ 0x8b
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ba:	b01b      	add	sp, #108	@ 0x6c
 80070bc:	bd30      	pop	{r4, r5, pc}
 80070be:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80070c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	9319      	str	r3, [sp, #100]	@ 0x64
 80070cc:	bf14      	ite	ne
 80070ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070d2:	4623      	moveq	r3, r4
 80070d4:	9302      	str	r3, [sp, #8]
 80070d6:	9305      	str	r3, [sp, #20]
 80070d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070dc:	9100      	str	r1, [sp, #0]
 80070de:	9104      	str	r1, [sp, #16]
 80070e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070e4:	4669      	mov	r1, sp
 80070e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80070e8:	f000 f9a0 	bl	800742c <_svfiprintf_r>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	bfbc      	itt	lt
 80070f0:	238b      	movlt	r3, #139	@ 0x8b
 80070f2:	602b      	strlt	r3, [r5, #0]
 80070f4:	2c00      	cmp	r4, #0
 80070f6:	d0e0      	beq.n	80070ba <_vsniprintf_r+0x16>
 80070f8:	9b00      	ldr	r3, [sp, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e7dc      	b.n	80070ba <_vsniprintf_r+0x16>

08007100 <vsniprintf>:
 8007100:	b507      	push	{r0, r1, r2, lr}
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	460a      	mov	r2, r1
 8007108:	4601      	mov	r1, r0
 800710a:	4803      	ldr	r0, [pc, #12]	@ (8007118 <vsniprintf+0x18>)
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f7ff ffc9 	bl	80070a4 <_vsniprintf_r>
 8007112:	b003      	add	sp, #12
 8007114:	f85d fb04 	ldr.w	pc, [sp], #4
 8007118:	20000014 	.word	0x20000014

0800711c <memset>:
 800711c:	4402      	add	r2, r0
 800711e:	4603      	mov	r3, r0
 8007120:	4293      	cmp	r3, r2
 8007122:	d100      	bne.n	8007126 <memset+0xa>
 8007124:	4770      	bx	lr
 8007126:	f803 1b01 	strb.w	r1, [r3], #1
 800712a:	e7f9      	b.n	8007120 <memset+0x4>

0800712c <__errno>:
 800712c:	4b01      	ldr	r3, [pc, #4]	@ (8007134 <__errno+0x8>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000014 	.word	0x20000014

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4d0d      	ldr	r5, [pc, #52]	@ (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	@ (8007174 <__libc_init_array+0x3c>)
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2600      	movs	r6, #0
 8007144:	42a6      	cmp	r6, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4d0b      	ldr	r5, [pc, #44]	@ (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	@ (800717c <__libc_init_array+0x44>)
 800714c:	f001 f924 	bl	8008398 <_init>
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2600      	movs	r6, #0
 8007156:	42a6      	cmp	r6, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007160:	4798      	blx	r3
 8007162:	3601      	adds	r6, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f855 3b04 	ldr.w	r3, [r5], #4
 800716a:	4798      	blx	r3
 800716c:	3601      	adds	r6, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	080086bc 	.word	0x080086bc
 8007174:	080086bc 	.word	0x080086bc
 8007178:	080086bc 	.word	0x080086bc
 800717c:	080086c0 	.word	0x080086c0

08007180 <__retarget_lock_acquire_recursive>:
 8007180:	4770      	bx	lr

08007182 <__retarget_lock_release_recursive>:
 8007182:	4770      	bx	lr

08007184 <_free_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	2900      	cmp	r1, #0
 800718a:	d041      	beq.n	8007210 <_free_r+0x8c>
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f0c      	subs	r4, r1, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfb8      	it	lt
 8007196:	18e4      	addlt	r4, r4, r3
 8007198:	f000 f8e0 	bl	800735c <__malloc_lock>
 800719c:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <_free_r+0x90>)
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	b933      	cbnz	r3, 80071b0 <_free_r+0x2c>
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	6014      	str	r4, [r2, #0]
 80071a6:	4628      	mov	r0, r5
 80071a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ac:	f000 b8dc 	b.w	8007368 <__malloc_unlock>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d908      	bls.n	80071c6 <_free_r+0x42>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	1821      	adds	r1, r4, r0
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1809      	addeq	r1, r1, r0
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	e7ed      	b.n	80071a2 <_free_r+0x1e>
 80071c6:	461a      	mov	r2, r3
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b10b      	cbz	r3, 80071d0 <_free_r+0x4c>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d9fa      	bls.n	80071c6 <_free_r+0x42>
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	1850      	adds	r0, r2, r1
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d10b      	bne.n	80071f0 <_free_r+0x6c>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	4401      	add	r1, r0
 80071dc:	1850      	adds	r0, r2, r1
 80071de:	4283      	cmp	r3, r0
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	d1e0      	bne.n	80071a6 <_free_r+0x22>
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	4408      	add	r0, r1
 80071ec:	6010      	str	r0, [r2, #0]
 80071ee:	e7da      	b.n	80071a6 <_free_r+0x22>
 80071f0:	d902      	bls.n	80071f8 <_free_r+0x74>
 80071f2:	230c      	movs	r3, #12
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	e7d6      	b.n	80071a6 <_free_r+0x22>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf04      	itt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	bf04      	itt	eq
 8007208:	1809      	addeq	r1, r1, r0
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	6054      	str	r4, [r2, #4]
 800720e:	e7ca      	b.n	80071a6 <_free_r+0x22>
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	20014af4 	.word	0x20014af4

08007218 <sbrk_aligned>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4e0f      	ldr	r6, [pc, #60]	@ (8007258 <sbrk_aligned+0x40>)
 800721c:	460c      	mov	r4, r1
 800721e:	6831      	ldr	r1, [r6, #0]
 8007220:	4605      	mov	r5, r0
 8007222:	b911      	cbnz	r1, 800722a <sbrk_aligned+0x12>
 8007224:	f000 fba4 	bl	8007970 <_sbrk_r>
 8007228:	6030      	str	r0, [r6, #0]
 800722a:	4621      	mov	r1, r4
 800722c:	4628      	mov	r0, r5
 800722e:	f000 fb9f 	bl	8007970 <_sbrk_r>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d103      	bne.n	800723e <sbrk_aligned+0x26>
 8007236:	f04f 34ff 	mov.w	r4, #4294967295
 800723a:	4620      	mov	r0, r4
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	1cc4      	adds	r4, r0, #3
 8007240:	f024 0403 	bic.w	r4, r4, #3
 8007244:	42a0      	cmp	r0, r4
 8007246:	d0f8      	beq.n	800723a <sbrk_aligned+0x22>
 8007248:	1a21      	subs	r1, r4, r0
 800724a:	4628      	mov	r0, r5
 800724c:	f000 fb90 	bl	8007970 <_sbrk_r>
 8007250:	3001      	adds	r0, #1
 8007252:	d1f2      	bne.n	800723a <sbrk_aligned+0x22>
 8007254:	e7ef      	b.n	8007236 <sbrk_aligned+0x1e>
 8007256:	bf00      	nop
 8007258:	20014af0 	.word	0x20014af0

0800725c <_malloc_r>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	1ccd      	adds	r5, r1, #3
 8007262:	f025 0503 	bic.w	r5, r5, #3
 8007266:	3508      	adds	r5, #8
 8007268:	2d0c      	cmp	r5, #12
 800726a:	bf38      	it	cc
 800726c:	250c      	movcc	r5, #12
 800726e:	2d00      	cmp	r5, #0
 8007270:	4606      	mov	r6, r0
 8007272:	db01      	blt.n	8007278 <_malloc_r+0x1c>
 8007274:	42a9      	cmp	r1, r5
 8007276:	d904      	bls.n	8007282 <_malloc_r+0x26>
 8007278:	230c      	movs	r3, #12
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	2000      	movs	r0, #0
 800727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007358 <_malloc_r+0xfc>
 8007286:	f000 f869 	bl	800735c <__malloc_lock>
 800728a:	f8d8 3000 	ldr.w	r3, [r8]
 800728e:	461c      	mov	r4, r3
 8007290:	bb44      	cbnz	r4, 80072e4 <_malloc_r+0x88>
 8007292:	4629      	mov	r1, r5
 8007294:	4630      	mov	r0, r6
 8007296:	f7ff ffbf 	bl	8007218 <sbrk_aligned>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	4604      	mov	r4, r0
 800729e:	d158      	bne.n	8007352 <_malloc_r+0xf6>
 80072a0:	f8d8 4000 	ldr.w	r4, [r8]
 80072a4:	4627      	mov	r7, r4
 80072a6:	2f00      	cmp	r7, #0
 80072a8:	d143      	bne.n	8007332 <_malloc_r+0xd6>
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	d04b      	beq.n	8007346 <_malloc_r+0xea>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	4639      	mov	r1, r7
 80072b2:	4630      	mov	r0, r6
 80072b4:	eb04 0903 	add.w	r9, r4, r3
 80072b8:	f000 fb5a 	bl	8007970 <_sbrk_r>
 80072bc:	4581      	cmp	r9, r0
 80072be:	d142      	bne.n	8007346 <_malloc_r+0xea>
 80072c0:	6821      	ldr	r1, [r4, #0]
 80072c2:	1a6d      	subs	r5, r5, r1
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff ffa6 	bl	8007218 <sbrk_aligned>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d03a      	beq.n	8007346 <_malloc_r+0xea>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	442b      	add	r3, r5
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	f8d8 3000 	ldr.w	r3, [r8]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	bb62      	cbnz	r2, 8007338 <_malloc_r+0xdc>
 80072de:	f8c8 7000 	str.w	r7, [r8]
 80072e2:	e00f      	b.n	8007304 <_malloc_r+0xa8>
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	1b52      	subs	r2, r2, r5
 80072e8:	d420      	bmi.n	800732c <_malloc_r+0xd0>
 80072ea:	2a0b      	cmp	r2, #11
 80072ec:	d917      	bls.n	800731e <_malloc_r+0xc2>
 80072ee:	1961      	adds	r1, r4, r5
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	6025      	str	r5, [r4, #0]
 80072f4:	bf18      	it	ne
 80072f6:	6059      	strne	r1, [r3, #4]
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	bf08      	it	eq
 80072fc:	f8c8 1000 	streq.w	r1, [r8]
 8007300:	5162      	str	r2, [r4, r5]
 8007302:	604b      	str	r3, [r1, #4]
 8007304:	4630      	mov	r0, r6
 8007306:	f000 f82f 	bl	8007368 <__malloc_unlock>
 800730a:	f104 000b 	add.w	r0, r4, #11
 800730e:	1d23      	adds	r3, r4, #4
 8007310:	f020 0007 	bic.w	r0, r0, #7
 8007314:	1ac2      	subs	r2, r0, r3
 8007316:	bf1c      	itt	ne
 8007318:	1a1b      	subne	r3, r3, r0
 800731a:	50a3      	strne	r3, [r4, r2]
 800731c:	e7af      	b.n	800727e <_malloc_r+0x22>
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	42a3      	cmp	r3, r4
 8007322:	bf0c      	ite	eq
 8007324:	f8c8 2000 	streq.w	r2, [r8]
 8007328:	605a      	strne	r2, [r3, #4]
 800732a:	e7eb      	b.n	8007304 <_malloc_r+0xa8>
 800732c:	4623      	mov	r3, r4
 800732e:	6864      	ldr	r4, [r4, #4]
 8007330:	e7ae      	b.n	8007290 <_malloc_r+0x34>
 8007332:	463c      	mov	r4, r7
 8007334:	687f      	ldr	r7, [r7, #4]
 8007336:	e7b6      	b.n	80072a6 <_malloc_r+0x4a>
 8007338:	461a      	mov	r2, r3
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	42a3      	cmp	r3, r4
 800733e:	d1fb      	bne.n	8007338 <_malloc_r+0xdc>
 8007340:	2300      	movs	r3, #0
 8007342:	6053      	str	r3, [r2, #4]
 8007344:	e7de      	b.n	8007304 <_malloc_r+0xa8>
 8007346:	230c      	movs	r3, #12
 8007348:	6033      	str	r3, [r6, #0]
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f80c 	bl	8007368 <__malloc_unlock>
 8007350:	e794      	b.n	800727c <_malloc_r+0x20>
 8007352:	6005      	str	r5, [r0, #0]
 8007354:	e7d6      	b.n	8007304 <_malloc_r+0xa8>
 8007356:	bf00      	nop
 8007358:	20014af4 	.word	0x20014af4

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff bf0f 	b.w	8007180 <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	20014aec 	.word	0x20014aec

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff bf0a 	b.w	8007182 <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	20014aec 	.word	0x20014aec

08007374 <__ssputs_r>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	688e      	ldr	r6, [r1, #8]
 800737a:	461f      	mov	r7, r3
 800737c:	42be      	cmp	r6, r7
 800737e:	680b      	ldr	r3, [r1, #0]
 8007380:	4682      	mov	sl, r0
 8007382:	460c      	mov	r4, r1
 8007384:	4690      	mov	r8, r2
 8007386:	d82d      	bhi.n	80073e4 <__ssputs_r+0x70>
 8007388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800738c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007390:	d026      	beq.n	80073e0 <__ssputs_r+0x6c>
 8007392:	6965      	ldr	r5, [r4, #20]
 8007394:	6909      	ldr	r1, [r1, #16]
 8007396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800739a:	eba3 0901 	sub.w	r9, r3, r1
 800739e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073a2:	1c7b      	adds	r3, r7, #1
 80073a4:	444b      	add	r3, r9
 80073a6:	106d      	asrs	r5, r5, #1
 80073a8:	429d      	cmp	r5, r3
 80073aa:	bf38      	it	cc
 80073ac:	461d      	movcc	r5, r3
 80073ae:	0553      	lsls	r3, r2, #21
 80073b0:	d527      	bpl.n	8007402 <__ssputs_r+0x8e>
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7ff ff52 	bl	800725c <_malloc_r>
 80073b8:	4606      	mov	r6, r0
 80073ba:	b360      	cbz	r0, 8007416 <__ssputs_r+0xa2>
 80073bc:	6921      	ldr	r1, [r4, #16]
 80073be:	464a      	mov	r2, r9
 80073c0:	f000 fae6 	bl	8007990 <memcpy>
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	6126      	str	r6, [r4, #16]
 80073d2:	6165      	str	r5, [r4, #20]
 80073d4:	444e      	add	r6, r9
 80073d6:	eba5 0509 	sub.w	r5, r5, r9
 80073da:	6026      	str	r6, [r4, #0]
 80073dc:	60a5      	str	r5, [r4, #8]
 80073de:	463e      	mov	r6, r7
 80073e0:	42be      	cmp	r6, r7
 80073e2:	d900      	bls.n	80073e6 <__ssputs_r+0x72>
 80073e4:	463e      	mov	r6, r7
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	4632      	mov	r2, r6
 80073ea:	4641      	mov	r1, r8
 80073ec:	f000 faa6 	bl	800793c <memmove>
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	1b9b      	subs	r3, r3, r6
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	4433      	add	r3, r6
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	2000      	movs	r0, #0
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	462a      	mov	r2, r5
 8007404:	f000 fad2 	bl	80079ac <_realloc_r>
 8007408:	4606      	mov	r6, r0
 800740a:	2800      	cmp	r0, #0
 800740c:	d1e0      	bne.n	80073d0 <__ssputs_r+0x5c>
 800740e:	6921      	ldr	r1, [r4, #16]
 8007410:	4650      	mov	r0, sl
 8007412:	f7ff feb7 	bl	8007184 <_free_r>
 8007416:	230c      	movs	r3, #12
 8007418:	f8ca 3000 	str.w	r3, [sl]
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	e7e9      	b.n	80073fe <__ssputs_r+0x8a>
	...

0800742c <_svfiprintf_r>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	4698      	mov	r8, r3
 8007432:	898b      	ldrh	r3, [r1, #12]
 8007434:	061b      	lsls	r3, r3, #24
 8007436:	b09d      	sub	sp, #116	@ 0x74
 8007438:	4607      	mov	r7, r0
 800743a:	460d      	mov	r5, r1
 800743c:	4614      	mov	r4, r2
 800743e:	d510      	bpl.n	8007462 <_svfiprintf_r+0x36>
 8007440:	690b      	ldr	r3, [r1, #16]
 8007442:	b973      	cbnz	r3, 8007462 <_svfiprintf_r+0x36>
 8007444:	2140      	movs	r1, #64	@ 0x40
 8007446:	f7ff ff09 	bl	800725c <_malloc_r>
 800744a:	6028      	str	r0, [r5, #0]
 800744c:	6128      	str	r0, [r5, #16]
 800744e:	b930      	cbnz	r0, 800745e <_svfiprintf_r+0x32>
 8007450:	230c      	movs	r3, #12
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	b01d      	add	sp, #116	@ 0x74
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745e:	2340      	movs	r3, #64	@ 0x40
 8007460:	616b      	str	r3, [r5, #20]
 8007462:	2300      	movs	r3, #0
 8007464:	9309      	str	r3, [sp, #36]	@ 0x24
 8007466:	2320      	movs	r3, #32
 8007468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800746c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007470:	2330      	movs	r3, #48	@ 0x30
 8007472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007610 <_svfiprintf_r+0x1e4>
 8007476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800747a:	f04f 0901 	mov.w	r9, #1
 800747e:	4623      	mov	r3, r4
 8007480:	469a      	mov	sl, r3
 8007482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007486:	b10a      	cbz	r2, 800748c <_svfiprintf_r+0x60>
 8007488:	2a25      	cmp	r2, #37	@ 0x25
 800748a:	d1f9      	bne.n	8007480 <_svfiprintf_r+0x54>
 800748c:	ebba 0b04 	subs.w	fp, sl, r4
 8007490:	d00b      	beq.n	80074aa <_svfiprintf_r+0x7e>
 8007492:	465b      	mov	r3, fp
 8007494:	4622      	mov	r2, r4
 8007496:	4629      	mov	r1, r5
 8007498:	4638      	mov	r0, r7
 800749a:	f7ff ff6b 	bl	8007374 <__ssputs_r>
 800749e:	3001      	adds	r0, #1
 80074a0:	f000 80a7 	beq.w	80075f2 <_svfiprintf_r+0x1c6>
 80074a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a6:	445a      	add	r2, fp
 80074a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80074aa:	f89a 3000 	ldrb.w	r3, [sl]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 809f 	beq.w	80075f2 <_svfiprintf_r+0x1c6>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074be:	f10a 0a01 	add.w	sl, sl, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80074cc:	4654      	mov	r4, sl
 80074ce:	2205      	movs	r2, #5
 80074d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d4:	484e      	ldr	r0, [pc, #312]	@ (8007610 <_svfiprintf_r+0x1e4>)
 80074d6:	f7f8 fe83 	bl	80001e0 <memchr>
 80074da:	9a04      	ldr	r2, [sp, #16]
 80074dc:	b9d8      	cbnz	r0, 8007516 <_svfiprintf_r+0xea>
 80074de:	06d0      	lsls	r0, r2, #27
 80074e0:	bf44      	itt	mi
 80074e2:	2320      	movmi	r3, #32
 80074e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e8:	0711      	lsls	r1, r2, #28
 80074ea:	bf44      	itt	mi
 80074ec:	232b      	movmi	r3, #43	@ 0x2b
 80074ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074f2:	f89a 3000 	ldrb.w	r3, [sl]
 80074f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f8:	d015      	beq.n	8007526 <_svfiprintf_r+0xfa>
 80074fa:	9a07      	ldr	r2, [sp, #28]
 80074fc:	4654      	mov	r4, sl
 80074fe:	2000      	movs	r0, #0
 8007500:	f04f 0c0a 	mov.w	ip, #10
 8007504:	4621      	mov	r1, r4
 8007506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800750a:	3b30      	subs	r3, #48	@ 0x30
 800750c:	2b09      	cmp	r3, #9
 800750e:	d94b      	bls.n	80075a8 <_svfiprintf_r+0x17c>
 8007510:	b1b0      	cbz	r0, 8007540 <_svfiprintf_r+0x114>
 8007512:	9207      	str	r2, [sp, #28]
 8007514:	e014      	b.n	8007540 <_svfiprintf_r+0x114>
 8007516:	eba0 0308 	sub.w	r3, r0, r8
 800751a:	fa09 f303 	lsl.w	r3, r9, r3
 800751e:	4313      	orrs	r3, r2
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	46a2      	mov	sl, r4
 8007524:	e7d2      	b.n	80074cc <_svfiprintf_r+0xa0>
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	1d19      	adds	r1, r3, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	9103      	str	r1, [sp, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	bfbb      	ittet	lt
 8007532:	425b      	neglt	r3, r3
 8007534:	f042 0202 	orrlt.w	r2, r2, #2
 8007538:	9307      	strge	r3, [sp, #28]
 800753a:	9307      	strlt	r3, [sp, #28]
 800753c:	bfb8      	it	lt
 800753e:	9204      	strlt	r2, [sp, #16]
 8007540:	7823      	ldrb	r3, [r4, #0]
 8007542:	2b2e      	cmp	r3, #46	@ 0x2e
 8007544:	d10a      	bne.n	800755c <_svfiprintf_r+0x130>
 8007546:	7863      	ldrb	r3, [r4, #1]
 8007548:	2b2a      	cmp	r3, #42	@ 0x2a
 800754a:	d132      	bne.n	80075b2 <_svfiprintf_r+0x186>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	9203      	str	r2, [sp, #12]
 8007554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007558:	3402      	adds	r4, #2
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007614 <_svfiprintf_r+0x1e8>
 8007560:	7821      	ldrb	r1, [r4, #0]
 8007562:	2203      	movs	r2, #3
 8007564:	4650      	mov	r0, sl
 8007566:	f7f8 fe3b 	bl	80001e0 <memchr>
 800756a:	b138      	cbz	r0, 800757c <_svfiprintf_r+0x150>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	eba0 000a 	sub.w	r0, r0, sl
 8007572:	2240      	movs	r2, #64	@ 0x40
 8007574:	4082      	lsls	r2, r0
 8007576:	4313      	orrs	r3, r2
 8007578:	3401      	adds	r4, #1
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007580:	4825      	ldr	r0, [pc, #148]	@ (8007618 <_svfiprintf_r+0x1ec>)
 8007582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007586:	2206      	movs	r2, #6
 8007588:	f7f8 fe2a 	bl	80001e0 <memchr>
 800758c:	2800      	cmp	r0, #0
 800758e:	d036      	beq.n	80075fe <_svfiprintf_r+0x1d2>
 8007590:	4b22      	ldr	r3, [pc, #136]	@ (800761c <_svfiprintf_r+0x1f0>)
 8007592:	bb1b      	cbnz	r3, 80075dc <_svfiprintf_r+0x1b0>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	3307      	adds	r3, #7
 8007598:	f023 0307 	bic.w	r3, r3, #7
 800759c:	3308      	adds	r3, #8
 800759e:	9303      	str	r3, [sp, #12]
 80075a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a2:	4433      	add	r3, r6
 80075a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a6:	e76a      	b.n	800747e <_svfiprintf_r+0x52>
 80075a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ac:	460c      	mov	r4, r1
 80075ae:	2001      	movs	r0, #1
 80075b0:	e7a8      	b.n	8007504 <_svfiprintf_r+0xd8>
 80075b2:	2300      	movs	r3, #0
 80075b4:	3401      	adds	r4, #1
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	4619      	mov	r1, r3
 80075ba:	f04f 0c0a 	mov.w	ip, #10
 80075be:	4620      	mov	r0, r4
 80075c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c4:	3a30      	subs	r2, #48	@ 0x30
 80075c6:	2a09      	cmp	r2, #9
 80075c8:	d903      	bls.n	80075d2 <_svfiprintf_r+0x1a6>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0c6      	beq.n	800755c <_svfiprintf_r+0x130>
 80075ce:	9105      	str	r1, [sp, #20]
 80075d0:	e7c4      	b.n	800755c <_svfiprintf_r+0x130>
 80075d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d6:	4604      	mov	r4, r0
 80075d8:	2301      	movs	r3, #1
 80075da:	e7f0      	b.n	80075be <_svfiprintf_r+0x192>
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	462a      	mov	r2, r5
 80075e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007620 <_svfiprintf_r+0x1f4>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4638      	mov	r0, r7
 80075e8:	f3af 8000 	nop.w
 80075ec:	1c42      	adds	r2, r0, #1
 80075ee:	4606      	mov	r6, r0
 80075f0:	d1d6      	bne.n	80075a0 <_svfiprintf_r+0x174>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	065b      	lsls	r3, r3, #25
 80075f6:	f53f af2d 	bmi.w	8007454 <_svfiprintf_r+0x28>
 80075fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075fc:	e72c      	b.n	8007458 <_svfiprintf_r+0x2c>
 80075fe:	ab03      	add	r3, sp, #12
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	462a      	mov	r2, r5
 8007604:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <_svfiprintf_r+0x1f4>)
 8007606:	a904      	add	r1, sp, #16
 8007608:	4638      	mov	r0, r7
 800760a:	f000 f879 	bl	8007700 <_printf_i>
 800760e:	e7ed      	b.n	80075ec <_svfiprintf_r+0x1c0>
 8007610:	08008660 	.word	0x08008660
 8007614:	08008666 	.word	0x08008666
 8007618:	0800866a 	.word	0x0800866a
 800761c:	00000000 	.word	0x00000000
 8007620:	08007375 	.word	0x08007375

08007624 <_printf_common>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	4616      	mov	r6, r2
 800762a:	4698      	mov	r8, r3
 800762c:	688a      	ldr	r2, [r1, #8]
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007634:	4293      	cmp	r3, r2
 8007636:	bfb8      	it	lt
 8007638:	4613      	movlt	r3, r2
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007640:	4607      	mov	r7, r0
 8007642:	460c      	mov	r4, r1
 8007644:	b10a      	cbz	r2, 800764a <_printf_common+0x26>
 8007646:	3301      	adds	r3, #1
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	0699      	lsls	r1, r3, #26
 800764e:	bf42      	ittt	mi
 8007650:	6833      	ldrmi	r3, [r6, #0]
 8007652:	3302      	addmi	r3, #2
 8007654:	6033      	strmi	r3, [r6, #0]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d106      	bne.n	800766c <_printf_common+0x48>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	6832      	ldr	r2, [r6, #0]
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	42ab      	cmp	r3, r5
 800766a:	dc26      	bgt.n	80076ba <_printf_common+0x96>
 800766c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	3b00      	subs	r3, #0
 8007674:	bf18      	it	ne
 8007676:	2301      	movne	r3, #1
 8007678:	0692      	lsls	r2, r2, #26
 800767a:	d42b      	bmi.n	80076d4 <_printf_common+0xb0>
 800767c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007680:	4641      	mov	r1, r8
 8007682:	4638      	mov	r0, r7
 8007684:	47c8      	blx	r9
 8007686:	3001      	adds	r0, #1
 8007688:	d01e      	beq.n	80076c8 <_printf_common+0xa4>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	2b04      	cmp	r3, #4
 8007694:	bf02      	ittt	eq
 8007696:	68e5      	ldreq	r5, [r4, #12]
 8007698:	6833      	ldreq	r3, [r6, #0]
 800769a:	1aed      	subeq	r5, r5, r3
 800769c:	68a3      	ldr	r3, [r4, #8]
 800769e:	bf0c      	ite	eq
 80076a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a4:	2500      	movne	r5, #0
 80076a6:	4293      	cmp	r3, r2
 80076a8:	bfc4      	itt	gt
 80076aa:	1a9b      	subgt	r3, r3, r2
 80076ac:	18ed      	addgt	r5, r5, r3
 80076ae:	2600      	movs	r6, #0
 80076b0:	341a      	adds	r4, #26
 80076b2:	42b5      	cmp	r5, r6
 80076b4:	d11a      	bne.n	80076ec <_printf_common+0xc8>
 80076b6:	2000      	movs	r0, #0
 80076b8:	e008      	b.n	80076cc <_printf_common+0xa8>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4652      	mov	r2, sl
 80076be:	4641      	mov	r1, r8
 80076c0:	4638      	mov	r0, r7
 80076c2:	47c8      	blx	r9
 80076c4:	3001      	adds	r0, #1
 80076c6:	d103      	bne.n	80076d0 <_printf_common+0xac>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d0:	3501      	adds	r5, #1
 80076d2:	e7c6      	b.n	8007662 <_printf_common+0x3e>
 80076d4:	18e1      	adds	r1, r4, r3
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	2030      	movs	r0, #48	@ 0x30
 80076da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076de:	4422      	add	r2, r4
 80076e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076e8:	3302      	adds	r3, #2
 80076ea:	e7c7      	b.n	800767c <_printf_common+0x58>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4622      	mov	r2, r4
 80076f0:	4641      	mov	r1, r8
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c8      	blx	r9
 80076f6:	3001      	adds	r0, #1
 80076f8:	d0e6      	beq.n	80076c8 <_printf_common+0xa4>
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7d9      	b.n	80076b2 <_printf_common+0x8e>
	...

08007700 <_printf_i>:
 8007700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	7e0f      	ldrb	r7, [r1, #24]
 8007706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007708:	2f78      	cmp	r7, #120	@ 0x78
 800770a:	4691      	mov	r9, r2
 800770c:	4680      	mov	r8, r0
 800770e:	460c      	mov	r4, r1
 8007710:	469a      	mov	sl, r3
 8007712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007716:	d807      	bhi.n	8007728 <_printf_i+0x28>
 8007718:	2f62      	cmp	r7, #98	@ 0x62
 800771a:	d80a      	bhi.n	8007732 <_printf_i+0x32>
 800771c:	2f00      	cmp	r7, #0
 800771e:	f000 80d1 	beq.w	80078c4 <_printf_i+0x1c4>
 8007722:	2f58      	cmp	r7, #88	@ 0x58
 8007724:	f000 80b8 	beq.w	8007898 <_printf_i+0x198>
 8007728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800772c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007730:	e03a      	b.n	80077a8 <_printf_i+0xa8>
 8007732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007736:	2b15      	cmp	r3, #21
 8007738:	d8f6      	bhi.n	8007728 <_printf_i+0x28>
 800773a:	a101      	add	r1, pc, #4	@ (adr r1, 8007740 <_printf_i+0x40>)
 800773c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007740:	08007799 	.word	0x08007799
 8007744:	080077ad 	.word	0x080077ad
 8007748:	08007729 	.word	0x08007729
 800774c:	08007729 	.word	0x08007729
 8007750:	08007729 	.word	0x08007729
 8007754:	08007729 	.word	0x08007729
 8007758:	080077ad 	.word	0x080077ad
 800775c:	08007729 	.word	0x08007729
 8007760:	08007729 	.word	0x08007729
 8007764:	08007729 	.word	0x08007729
 8007768:	08007729 	.word	0x08007729
 800776c:	080078ab 	.word	0x080078ab
 8007770:	080077d7 	.word	0x080077d7
 8007774:	08007865 	.word	0x08007865
 8007778:	08007729 	.word	0x08007729
 800777c:	08007729 	.word	0x08007729
 8007780:	080078cd 	.word	0x080078cd
 8007784:	08007729 	.word	0x08007729
 8007788:	080077d7 	.word	0x080077d7
 800778c:	08007729 	.word	0x08007729
 8007790:	08007729 	.word	0x08007729
 8007794:	0800786d 	.word	0x0800786d
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6032      	str	r2, [r6, #0]
 80077a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e09c      	b.n	80078e6 <_printf_i+0x1e6>
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	6820      	ldr	r0, [r4, #0]
 80077b0:	1d19      	adds	r1, r3, #4
 80077b2:	6031      	str	r1, [r6, #0]
 80077b4:	0606      	lsls	r6, r0, #24
 80077b6:	d501      	bpl.n	80077bc <_printf_i+0xbc>
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	e003      	b.n	80077c4 <_printf_i+0xc4>
 80077bc:	0645      	lsls	r5, r0, #25
 80077be:	d5fb      	bpl.n	80077b8 <_printf_i+0xb8>
 80077c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	da03      	bge.n	80077d0 <_printf_i+0xd0>
 80077c8:	232d      	movs	r3, #45	@ 0x2d
 80077ca:	426d      	negs	r5, r5
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077d0:	4858      	ldr	r0, [pc, #352]	@ (8007934 <_printf_i+0x234>)
 80077d2:	230a      	movs	r3, #10
 80077d4:	e011      	b.n	80077fa <_printf_i+0xfa>
 80077d6:	6821      	ldr	r1, [r4, #0]
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	0608      	lsls	r0, r1, #24
 80077dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80077e0:	d402      	bmi.n	80077e8 <_printf_i+0xe8>
 80077e2:	0649      	lsls	r1, r1, #25
 80077e4:	bf48      	it	mi
 80077e6:	b2ad      	uxthmi	r5, r5
 80077e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077ea:	4852      	ldr	r0, [pc, #328]	@ (8007934 <_printf_i+0x234>)
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	bf14      	ite	ne
 80077f0:	230a      	movne	r3, #10
 80077f2:	2308      	moveq	r3, #8
 80077f4:	2100      	movs	r1, #0
 80077f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077fa:	6866      	ldr	r6, [r4, #4]
 80077fc:	60a6      	str	r6, [r4, #8]
 80077fe:	2e00      	cmp	r6, #0
 8007800:	db05      	blt.n	800780e <_printf_i+0x10e>
 8007802:	6821      	ldr	r1, [r4, #0]
 8007804:	432e      	orrs	r6, r5
 8007806:	f021 0104 	bic.w	r1, r1, #4
 800780a:	6021      	str	r1, [r4, #0]
 800780c:	d04b      	beq.n	80078a6 <_printf_i+0x1a6>
 800780e:	4616      	mov	r6, r2
 8007810:	fbb5 f1f3 	udiv	r1, r5, r3
 8007814:	fb03 5711 	mls	r7, r3, r1, r5
 8007818:	5dc7      	ldrb	r7, [r0, r7]
 800781a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800781e:	462f      	mov	r7, r5
 8007820:	42bb      	cmp	r3, r7
 8007822:	460d      	mov	r5, r1
 8007824:	d9f4      	bls.n	8007810 <_printf_i+0x110>
 8007826:	2b08      	cmp	r3, #8
 8007828:	d10b      	bne.n	8007842 <_printf_i+0x142>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	07df      	lsls	r7, r3, #31
 800782e:	d508      	bpl.n	8007842 <_printf_i+0x142>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	6861      	ldr	r1, [r4, #4]
 8007834:	4299      	cmp	r1, r3
 8007836:	bfde      	ittt	le
 8007838:	2330      	movle	r3, #48	@ 0x30
 800783a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800783e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007842:	1b92      	subs	r2, r2, r6
 8007844:	6122      	str	r2, [r4, #16]
 8007846:	f8cd a000 	str.w	sl, [sp]
 800784a:	464b      	mov	r3, r9
 800784c:	aa03      	add	r2, sp, #12
 800784e:	4621      	mov	r1, r4
 8007850:	4640      	mov	r0, r8
 8007852:	f7ff fee7 	bl	8007624 <_printf_common>
 8007856:	3001      	adds	r0, #1
 8007858:	d14a      	bne.n	80078f0 <_printf_i+0x1f0>
 800785a:	f04f 30ff 	mov.w	r0, #4294967295
 800785e:	b004      	add	sp, #16
 8007860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	f043 0320 	orr.w	r3, r3, #32
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	4832      	ldr	r0, [pc, #200]	@ (8007938 <_printf_i+0x238>)
 800786e:	2778      	movs	r7, #120	@ 0x78
 8007870:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	6831      	ldr	r1, [r6, #0]
 8007878:	061f      	lsls	r7, r3, #24
 800787a:	f851 5b04 	ldr.w	r5, [r1], #4
 800787e:	d402      	bmi.n	8007886 <_printf_i+0x186>
 8007880:	065f      	lsls	r7, r3, #25
 8007882:	bf48      	it	mi
 8007884:	b2ad      	uxthmi	r5, r5
 8007886:	6031      	str	r1, [r6, #0]
 8007888:	07d9      	lsls	r1, r3, #31
 800788a:	bf44      	itt	mi
 800788c:	f043 0320 	orrmi.w	r3, r3, #32
 8007890:	6023      	strmi	r3, [r4, #0]
 8007892:	b11d      	cbz	r5, 800789c <_printf_i+0x19c>
 8007894:	2310      	movs	r3, #16
 8007896:	e7ad      	b.n	80077f4 <_printf_i+0xf4>
 8007898:	4826      	ldr	r0, [pc, #152]	@ (8007934 <_printf_i+0x234>)
 800789a:	e7e9      	b.n	8007870 <_printf_i+0x170>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	f023 0320 	bic.w	r3, r3, #32
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	e7f6      	b.n	8007894 <_printf_i+0x194>
 80078a6:	4616      	mov	r6, r2
 80078a8:	e7bd      	b.n	8007826 <_printf_i+0x126>
 80078aa:	6833      	ldr	r3, [r6, #0]
 80078ac:	6825      	ldr	r5, [r4, #0]
 80078ae:	6961      	ldr	r1, [r4, #20]
 80078b0:	1d18      	adds	r0, r3, #4
 80078b2:	6030      	str	r0, [r6, #0]
 80078b4:	062e      	lsls	r6, r5, #24
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	d501      	bpl.n	80078be <_printf_i+0x1be>
 80078ba:	6019      	str	r1, [r3, #0]
 80078bc:	e002      	b.n	80078c4 <_printf_i+0x1c4>
 80078be:	0668      	lsls	r0, r5, #25
 80078c0:	d5fb      	bpl.n	80078ba <_printf_i+0x1ba>
 80078c2:	8019      	strh	r1, [r3, #0]
 80078c4:	2300      	movs	r3, #0
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	4616      	mov	r6, r2
 80078ca:	e7bc      	b.n	8007846 <_printf_i+0x146>
 80078cc:	6833      	ldr	r3, [r6, #0]
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	6032      	str	r2, [r6, #0]
 80078d2:	681e      	ldr	r6, [r3, #0]
 80078d4:	6862      	ldr	r2, [r4, #4]
 80078d6:	2100      	movs	r1, #0
 80078d8:	4630      	mov	r0, r6
 80078da:	f7f8 fc81 	bl	80001e0 <memchr>
 80078de:	b108      	cbz	r0, 80078e4 <_printf_i+0x1e4>
 80078e0:	1b80      	subs	r0, r0, r6
 80078e2:	6060      	str	r0, [r4, #4]
 80078e4:	6863      	ldr	r3, [r4, #4]
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	2300      	movs	r3, #0
 80078ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ee:	e7aa      	b.n	8007846 <_printf_i+0x146>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	4632      	mov	r2, r6
 80078f4:	4649      	mov	r1, r9
 80078f6:	4640      	mov	r0, r8
 80078f8:	47d0      	blx	sl
 80078fa:	3001      	adds	r0, #1
 80078fc:	d0ad      	beq.n	800785a <_printf_i+0x15a>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	079b      	lsls	r3, r3, #30
 8007902:	d413      	bmi.n	800792c <_printf_i+0x22c>
 8007904:	68e0      	ldr	r0, [r4, #12]
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	4298      	cmp	r0, r3
 800790a:	bfb8      	it	lt
 800790c:	4618      	movlt	r0, r3
 800790e:	e7a6      	b.n	800785e <_printf_i+0x15e>
 8007910:	2301      	movs	r3, #1
 8007912:	4632      	mov	r2, r6
 8007914:	4649      	mov	r1, r9
 8007916:	4640      	mov	r0, r8
 8007918:	47d0      	blx	sl
 800791a:	3001      	adds	r0, #1
 800791c:	d09d      	beq.n	800785a <_printf_i+0x15a>
 800791e:	3501      	adds	r5, #1
 8007920:	68e3      	ldr	r3, [r4, #12]
 8007922:	9903      	ldr	r1, [sp, #12]
 8007924:	1a5b      	subs	r3, r3, r1
 8007926:	42ab      	cmp	r3, r5
 8007928:	dcf2      	bgt.n	8007910 <_printf_i+0x210>
 800792a:	e7eb      	b.n	8007904 <_printf_i+0x204>
 800792c:	2500      	movs	r5, #0
 800792e:	f104 0619 	add.w	r6, r4, #25
 8007932:	e7f5      	b.n	8007920 <_printf_i+0x220>
 8007934:	08008671 	.word	0x08008671
 8007938:	08008682 	.word	0x08008682

0800793c <memmove>:
 800793c:	4288      	cmp	r0, r1
 800793e:	b510      	push	{r4, lr}
 8007940:	eb01 0402 	add.w	r4, r1, r2
 8007944:	d902      	bls.n	800794c <memmove+0x10>
 8007946:	4284      	cmp	r4, r0
 8007948:	4623      	mov	r3, r4
 800794a:	d807      	bhi.n	800795c <memmove+0x20>
 800794c:	1e43      	subs	r3, r0, #1
 800794e:	42a1      	cmp	r1, r4
 8007950:	d008      	beq.n	8007964 <memmove+0x28>
 8007952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800795a:	e7f8      	b.n	800794e <memmove+0x12>
 800795c:	4402      	add	r2, r0
 800795e:	4601      	mov	r1, r0
 8007960:	428a      	cmp	r2, r1
 8007962:	d100      	bne.n	8007966 <memmove+0x2a>
 8007964:	bd10      	pop	{r4, pc}
 8007966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800796e:	e7f7      	b.n	8007960 <memmove+0x24>

08007970 <_sbrk_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d06      	ldr	r5, [pc, #24]	@ (800798c <_sbrk_r+0x1c>)
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	f7fa fed8 	bl	8002730 <_sbrk>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_sbrk_r+0x1a>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_sbrk_r+0x1a>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20014ae8 	.word	0x20014ae8

08007990 <memcpy>:
 8007990:	440a      	add	r2, r1
 8007992:	4291      	cmp	r1, r2
 8007994:	f100 33ff 	add.w	r3, r0, #4294967295
 8007998:	d100      	bne.n	800799c <memcpy+0xc>
 800799a:	4770      	bx	lr
 800799c:	b510      	push	{r4, lr}
 800799e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a6:	4291      	cmp	r1, r2
 80079a8:	d1f9      	bne.n	800799e <memcpy+0xe>
 80079aa:	bd10      	pop	{r4, pc}

080079ac <_realloc_r>:
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	4607      	mov	r7, r0
 80079b2:	4614      	mov	r4, r2
 80079b4:	460d      	mov	r5, r1
 80079b6:	b921      	cbnz	r1, 80079c2 <_realloc_r+0x16>
 80079b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	4611      	mov	r1, r2
 80079be:	f7ff bc4d 	b.w	800725c <_malloc_r>
 80079c2:	b92a      	cbnz	r2, 80079d0 <_realloc_r+0x24>
 80079c4:	f7ff fbde 	bl	8007184 <_free_r>
 80079c8:	4625      	mov	r5, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d0:	f000 f81a 	bl	8007a08 <_malloc_usable_size_r>
 80079d4:	4284      	cmp	r4, r0
 80079d6:	4606      	mov	r6, r0
 80079d8:	d802      	bhi.n	80079e0 <_realloc_r+0x34>
 80079da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079de:	d8f4      	bhi.n	80079ca <_realloc_r+0x1e>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7ff fc3a 	bl	800725c <_malloc_r>
 80079e8:	4680      	mov	r8, r0
 80079ea:	b908      	cbnz	r0, 80079f0 <_realloc_r+0x44>
 80079ec:	4645      	mov	r5, r8
 80079ee:	e7ec      	b.n	80079ca <_realloc_r+0x1e>
 80079f0:	42b4      	cmp	r4, r6
 80079f2:	4622      	mov	r2, r4
 80079f4:	4629      	mov	r1, r5
 80079f6:	bf28      	it	cs
 80079f8:	4632      	movcs	r2, r6
 80079fa:	f7ff ffc9 	bl	8007990 <memcpy>
 80079fe:	4629      	mov	r1, r5
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7ff fbbf 	bl	8007184 <_free_r>
 8007a06:	e7f1      	b.n	80079ec <_realloc_r+0x40>

08007a08 <_malloc_usable_size_r>:
 8007a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0c:	1f18      	subs	r0, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bfbc      	itt	lt
 8007a12:	580b      	ldrlt	r3, [r1, r0]
 8007a14:	18c0      	addlt	r0, r0, r3
 8007a16:	4770      	bx	lr

08007a18 <powf>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	f000 f87d 	bl	8007b1c <__ieee754_powf>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4605      	mov	r5, r0
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7f9 f8ba 	bl	8000ba0 <__aeabi_fcmpun>
 8007a2c:	bb68      	cbnz	r0, 8007a8a <powf+0x72>
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7f9 f883 	bl	8000b3c <__aeabi_fcmpeq>
 8007a36:	b190      	cbz	r0, 8007a5e <powf+0x46>
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f7f9 f87e 	bl	8000b3c <__aeabi_fcmpeq>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d133      	bne.n	8007aac <powf+0x94>
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 f834 	bl	8007ab2 <finitef>
 8007a4a:	b1f0      	cbz	r0, 8007a8a <powf+0x72>
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f7f9 f87e 	bl	8000b50 <__aeabi_fcmplt>
 8007a54:	b1c8      	cbz	r0, 8007a8a <powf+0x72>
 8007a56:	f7ff fb69 	bl	800712c <__errno>
 8007a5a:	2322      	movs	r3, #34	@ 0x22
 8007a5c:	e014      	b.n	8007a88 <powf+0x70>
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 f827 	bl	8007ab2 <finitef>
 8007a64:	b998      	cbnz	r0, 8007a8e <powf+0x76>
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 f823 	bl	8007ab2 <finitef>
 8007a6c:	b178      	cbz	r0, 8007a8e <powf+0x76>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 f81f 	bl	8007ab2 <finitef>
 8007a74:	b158      	cbz	r0, 8007a8e <powf+0x76>
 8007a76:	4629      	mov	r1, r5
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7f9 f891 	bl	8000ba0 <__aeabi_fcmpun>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d0e9      	beq.n	8007a56 <powf+0x3e>
 8007a82:	f7ff fb53 	bl	800712c <__errno>
 8007a86:	2321      	movs	r3, #33	@ 0x21
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7f9 f853 	bl	8000b3c <__aeabi_fcmpeq>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0f7      	beq.n	8007a8a <powf+0x72>
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f000 f809 	bl	8007ab2 <finitef>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d0f2      	beq.n	8007a8a <powf+0x72>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 f804 	bl	8007ab2 <finitef>
 8007aaa:	e7d3      	b.n	8007a54 <powf+0x3c>
 8007aac:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8007ab0:	e7eb      	b.n	8007a8a <powf+0x72>

08007ab2 <finitef>:
 8007ab2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007ab6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007aba:	bfac      	ite	ge
 8007abc:	2000      	movge	r0, #0
 8007abe:	2001      	movlt	r0, #1
 8007ac0:	4770      	bx	lr

08007ac2 <lroundf>:
 8007ac2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	f1a3 047f 	sub.w	r4, r3, #127	@ 0x7f
 8007ace:	bfac      	ite	ge
 8007ad0:	2101      	movge	r1, #1
 8007ad2:	f04f 31ff 	movlt.w	r1, #4294967295
 8007ad6:	2c1e      	cmp	r4, #30
 8007ad8:	dc1b      	bgt.n	8007b12 <lroundf+0x50>
 8007ada:	2c00      	cmp	r4, #0
 8007adc:	da04      	bge.n	8007ae8 <lroundf+0x26>
 8007ade:	3401      	adds	r4, #1
 8007ae0:	bf18      	it	ne
 8007ae2:	2100      	movne	r1, #0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	bd10      	pop	{r4, pc}
 8007ae8:	2c16      	cmp	r4, #22
 8007aea:	bfd8      	it	le
 8007aec:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 8007af0:	f3c0 0216 	ubfx	r2, r0, #0, #23
 8007af4:	bfd8      	it	le
 8007af6:	4123      	asrle	r3, r4
 8007af8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007afc:	bfcd      	iteet	gt
 8007afe:	3b96      	subgt	r3, #150	@ 0x96
 8007b00:	189b      	addle	r3, r3, r2
 8007b02:	f1c4 0417 	rsble	r4, r4, #23
 8007b06:	fa02 f303 	lslgt.w	r3, r2, r3
 8007b0a:	bfd8      	it	le
 8007b0c:	40e3      	lsrle	r3, r4
 8007b0e:	4359      	muls	r1, r3
 8007b10:	e7e8      	b.n	8007ae4 <lroundf+0x22>
 8007b12:	f7f9 f85b 	bl	8000bcc <__aeabi_f2iz>
 8007b16:	4601      	mov	r1, r0
 8007b18:	e7e4      	b.n	8007ae4 <lroundf+0x22>
	...

08007b1c <__ieee754_powf>:
 8007b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8007b24:	b087      	sub	sp, #28
 8007b26:	4681      	mov	r9, r0
 8007b28:	460f      	mov	r7, r1
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	d10c      	bne.n	8007b4a <__ieee754_powf+0x2e>
 8007b30:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8007b34:	0076      	lsls	r6, r6, #1
 8007b36:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007b3a:	f240 8310 	bls.w	800815e <__ieee754_powf+0x642>
 8007b3e:	4639      	mov	r1, r7
 8007b40:	4648      	mov	r0, r9
 8007b42:	f7f8 fd5f 	bl	8000604 <__addsf3>
 8007b46:	4601      	mov	r1, r0
 8007b48:	e043      	b.n	8007bd2 <__ieee754_powf+0xb6>
 8007b4a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8007b4e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007b52:	d802      	bhi.n	8007b5a <__ieee754_powf+0x3e>
 8007b54:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007b58:	d908      	bls.n	8007b6c <__ieee754_powf+0x50>
 8007b5a:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007b5e:	d1ee      	bne.n	8007b3e <__ieee754_powf+0x22>
 8007b60:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007b64:	0064      	lsls	r4, r4, #1
 8007b66:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007b6a:	e7e6      	b.n	8007b3a <__ieee754_powf+0x1e>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	da1f      	bge.n	8007bb0 <__ieee754_powf+0x94>
 8007b70:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8007b74:	f080 82f8 	bcs.w	8008168 <__ieee754_powf+0x64c>
 8007b78:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8007b7c:	d32f      	bcc.n	8007bde <__ieee754_powf+0xc2>
 8007b7e:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8007b82:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007b86:	fa4b f503 	asr.w	r5, fp, r3
 8007b8a:	fa05 f303 	lsl.w	r3, r5, r3
 8007b8e:	455b      	cmp	r3, fp
 8007b90:	d123      	bne.n	8007bda <__ieee754_powf+0xbe>
 8007b92:	f005 0501 	and.w	r5, r5, #1
 8007b96:	f1c5 0502 	rsb	r5, r5, #2
 8007b9a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8007b9e:	d11f      	bne.n	8007be0 <__ieee754_powf+0xc4>
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	da15      	bge.n	8007bd2 <__ieee754_powf+0xb6>
 8007ba6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007baa:	f7f8 fee7 	bl	800097c <__aeabi_fdiv>
 8007bae:	e7ca      	b.n	8007b46 <__ieee754_powf+0x2a>
 8007bb0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007bb4:	d111      	bne.n	8007bda <__ieee754_powf+0xbe>
 8007bb6:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8007bba:	f000 82d0 	beq.w	800815e <__ieee754_powf+0x642>
 8007bbe:	d904      	bls.n	8007bca <__ieee754_powf+0xae>
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	f280 82cf 	bge.w	8008164 <__ieee754_powf+0x648>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e003      	b.n	8007bd2 <__ieee754_powf+0xb6>
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	dafb      	bge.n	8007bc6 <__ieee754_powf+0xaa>
 8007bce:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	b007      	add	sp, #28
 8007bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bda:	2500      	movs	r5, #0
 8007bdc:	e7dd      	b.n	8007b9a <__ieee754_powf+0x7e>
 8007bde:	2500      	movs	r5, #0
 8007be0:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007be4:	d104      	bne.n	8007bf0 <__ieee754_powf+0xd4>
 8007be6:	4649      	mov	r1, r9
 8007be8:	4648      	mov	r0, r9
 8007bea:	f7f8 fe13 	bl	8000814 <__aeabi_fmul>
 8007bee:	e7aa      	b.n	8007b46 <__ieee754_powf+0x2a>
 8007bf0:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007bf4:	f040 82bd 	bne.w	8008172 <__ieee754_powf+0x656>
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	f2c0 82ba 	blt.w	8008172 <__ieee754_powf+0x656>
 8007bfe:	4648      	mov	r0, r9
 8007c00:	b007      	add	sp, #28
 8007c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c06:	f000 bb57 	b.w	80082b8 <__ieee754_sqrtf>
 8007c0a:	2d01      	cmp	r5, #1
 8007c0c:	d1e1      	bne.n	8007bd2 <__ieee754_powf+0xb6>
 8007c0e:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8007c12:	e798      	b.n	8007b46 <__ieee754_powf+0x2a>
 8007c14:	0ff3      	lsrs	r3, r6, #31
 8007c16:	3b01      	subs	r3, #1
 8007c18:	9303      	str	r3, [sp, #12]
 8007c1a:	432b      	orrs	r3, r5
 8007c1c:	d101      	bne.n	8007c22 <__ieee754_powf+0x106>
 8007c1e:	4649      	mov	r1, r9
 8007c20:	e2c5      	b.n	80081ae <__ieee754_powf+0x692>
 8007c22:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8007c26:	f240 809b 	bls.w	8007d60 <__ieee754_powf+0x244>
 8007c2a:	4b46      	ldr	r3, [pc, #280]	@ (8007d44 <__ieee754_powf+0x228>)
 8007c2c:	4598      	cmp	r8, r3
 8007c2e:	d807      	bhi.n	8007c40 <__ieee754_powf+0x124>
 8007c30:	2c00      	cmp	r4, #0
 8007c32:	da0a      	bge.n	8007c4a <__ieee754_powf+0x12e>
 8007c34:	2000      	movs	r0, #0
 8007c36:	b007      	add	sp, #28
 8007c38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	f000 bb37 	b.w	80082ae <__math_oflowf>
 8007c40:	4b41      	ldr	r3, [pc, #260]	@ (8007d48 <__ieee754_powf+0x22c>)
 8007c42:	4598      	cmp	r8, r3
 8007c44:	d907      	bls.n	8007c56 <__ieee754_powf+0x13a>
 8007c46:	2c00      	cmp	r4, #0
 8007c48:	dcf4      	bgt.n	8007c34 <__ieee754_powf+0x118>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	b007      	add	sp, #28
 8007c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c52:	f000 bb28 	b.w	80082a6 <__math_uflowf>
 8007c56:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c5a:	f7f8 fcd1 	bl	8000600 <__aeabi_fsub>
 8007c5e:	493b      	ldr	r1, [pc, #236]	@ (8007d4c <__ieee754_powf+0x230>)
 8007c60:	4606      	mov	r6, r0
 8007c62:	f7f8 fdd7 	bl	8000814 <__aeabi_fmul>
 8007c66:	493a      	ldr	r1, [pc, #232]	@ (8007d50 <__ieee754_powf+0x234>)
 8007c68:	4680      	mov	r8, r0
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7f8 fdd2 	bl	8000814 <__aeabi_fmul>
 8007c70:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8007c74:	4681      	mov	r9, r0
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7f8 fdcc 	bl	8000814 <__aeabi_fmul>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4835      	ldr	r0, [pc, #212]	@ (8007d54 <__ieee754_powf+0x238>)
 8007c80:	f7f8 fcbe 	bl	8000600 <__aeabi_fsub>
 8007c84:	4631      	mov	r1, r6
 8007c86:	f7f8 fdc5 	bl	8000814 <__aeabi_fmul>
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8007c90:	f7f8 fcb6 	bl	8000600 <__aeabi_fsub>
 8007c94:	4631      	mov	r1, r6
 8007c96:	4682      	mov	sl, r0
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7f8 fdbb 	bl	8000814 <__aeabi_fmul>
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	f7f8 fdb7 	bl	8000814 <__aeabi_fmul>
 8007ca6:	492c      	ldr	r1, [pc, #176]	@ (8007d58 <__ieee754_powf+0x23c>)
 8007ca8:	f7f8 fdb4 	bl	8000814 <__aeabi_fmul>
 8007cac:	4601      	mov	r1, r0
 8007cae:	4648      	mov	r0, r9
 8007cb0:	f7f8 fca6 	bl	8000600 <__aeabi_fsub>
 8007cb4:	4601      	mov	r1, r0
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	4640      	mov	r0, r8
 8007cba:	f7f8 fca3 	bl	8000604 <__addsf3>
 8007cbe:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8007cc2:	f02b 0b0f 	bic.w	fp, fp, #15
 8007cc6:	4641      	mov	r1, r8
 8007cc8:	4658      	mov	r0, fp
 8007cca:	f7f8 fc99 	bl	8000600 <__aeabi_fsub>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7f8 fc95 	bl	8000600 <__aeabi_fsub>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	3d01      	subs	r5, #1
 8007cda:	f36f 040b 	bfc	r4, #0, #12
 8007cde:	431d      	orrs	r5, r3
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	bf0c      	ite	eq
 8007ce8:	4d1c      	ldreq	r5, [pc, #112]	@ (8007d5c <__ieee754_powf+0x240>)
 8007cea:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8007cee:	f7f8 fc87 	bl	8000600 <__aeabi_fsub>
 8007cf2:	4659      	mov	r1, fp
 8007cf4:	f7f8 fd8e 	bl	8000814 <__aeabi_fmul>
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7f8 fd89 	bl	8000814 <__aeabi_fmul>
 8007d02:	4601      	mov	r1, r0
 8007d04:	4640      	mov	r0, r8
 8007d06:	f7f8 fc7d 	bl	8000604 <__addsf3>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	4658      	mov	r0, fp
 8007d10:	f7f8 fd80 	bl	8000814 <__aeabi_fmul>
 8007d14:	4601      	mov	r1, r0
 8007d16:	4607      	mov	r7, r0
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7f8 fc73 	bl	8000604 <__addsf3>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	4604      	mov	r4, r0
 8007d22:	4680      	mov	r8, r0
 8007d24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007d28:	f340 813f 	ble.w	8007faa <__ieee754_powf+0x48e>
 8007d2c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007d30:	f240 8128 	bls.w	8007f84 <__ieee754_powf+0x468>
 8007d34:	2100      	movs	r1, #0
 8007d36:	4628      	mov	r0, r5
 8007d38:	f7f8 ff0a 	bl	8000b50 <__aeabi_fcmplt>
 8007d3c:	3800      	subs	r0, #0
 8007d3e:	bf18      	it	ne
 8007d40:	2001      	movne	r0, #1
 8007d42:	e778      	b.n	8007c36 <__ieee754_powf+0x11a>
 8007d44:	3f7ffff3 	.word	0x3f7ffff3
 8007d48:	3f800007 	.word	0x3f800007
 8007d4c:	3fb8aa00 	.word	0x3fb8aa00
 8007d50:	36eca570 	.word	0x36eca570
 8007d54:	3eaaaaab 	.word	0x3eaaaaab
 8007d58:	3fb8aa3b 	.word	0x3fb8aa3b
 8007d5c:	bf800000 	.word	0xbf800000
 8007d60:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007d64:	f040 810a 	bne.w	8007f7c <__ieee754_powf+0x460>
 8007d68:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8007d6c:	f7f8 fd52 	bl	8000814 <__aeabi_fmul>
 8007d70:	f06f 0217 	mvn.w	r2, #23
 8007d74:	4682      	mov	sl, r0
 8007d76:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8007d7a:	3b7f      	subs	r3, #127	@ 0x7f
 8007d7c:	441a      	add	r2, r3
 8007d7e:	4b95      	ldr	r3, [pc, #596]	@ (8007fd4 <__ieee754_powf+0x4b8>)
 8007d80:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8007d84:	459a      	cmp	sl, r3
 8007d86:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8007d8a:	dd06      	ble.n	8007d9a <__ieee754_powf+0x27e>
 8007d8c:	4b92      	ldr	r3, [pc, #584]	@ (8007fd8 <__ieee754_powf+0x4bc>)
 8007d8e:	459a      	cmp	sl, r3
 8007d90:	f340 80f6 	ble.w	8007f80 <__ieee754_powf+0x464>
 8007d94:	3201      	adds	r2, #1
 8007d96:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	9205      	str	r2, [sp, #20]
 8007da0:	4b8e      	ldr	r3, [pc, #568]	@ (8007fdc <__ieee754_powf+0x4c0>)
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8007da8:	4630      	mov	r0, r6
 8007daa:	4659      	mov	r1, fp
 8007dac:	f7f8 fc28 	bl	8000600 <__aeabi_fsub>
 8007db0:	4631      	mov	r1, r6
 8007db2:	4681      	mov	r9, r0
 8007db4:	4658      	mov	r0, fp
 8007db6:	f7f8 fc25 	bl	8000604 <__addsf3>
 8007dba:	4601      	mov	r1, r0
 8007dbc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007dc0:	f7f8 fddc 	bl	800097c <__aeabi_fdiv>
 8007dc4:	4601      	mov	r1, r0
 8007dc6:	9004      	str	r0, [sp, #16]
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f7f8 fd23 	bl	8000814 <__aeabi_fmul>
 8007dce:	9002      	str	r0, [sp, #8]
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	46b2      	mov	sl, r6
 8007dd4:	f36f 030b 	bfc	r3, #0, #12
 8007dd8:	1076      	asrs	r6, r6, #1
 8007dda:	4698      	mov	r8, r3
 8007ddc:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8007de6:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8007dea:	4631      	mov	r1, r6
 8007dec:	4640      	mov	r0, r8
 8007dee:	f7f8 fd11 	bl	8000814 <__aeabi_fmul>
 8007df2:	4601      	mov	r1, r0
 8007df4:	4648      	mov	r0, r9
 8007df6:	f7f8 fc03 	bl	8000600 <__aeabi_fsub>
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	4681      	mov	r9, r0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7f8 fbfe 	bl	8000600 <__aeabi_fsub>
 8007e04:	4601      	mov	r1, r0
 8007e06:	4650      	mov	r0, sl
 8007e08:	f7f8 fbfa 	bl	8000600 <__aeabi_fsub>
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	f7f8 fd01 	bl	8000814 <__aeabi_fmul>
 8007e12:	4601      	mov	r1, r0
 8007e14:	4648      	mov	r0, r9
 8007e16:	f7f8 fbf3 	bl	8000600 <__aeabi_fsub>
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f7f8 fcf9 	bl	8000814 <__aeabi_fmul>
 8007e22:	9902      	ldr	r1, [sp, #8]
 8007e24:	4683      	mov	fp, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	f7f8 fcf4 	bl	8000814 <__aeabi_fmul>
 8007e2c:	496c      	ldr	r1, [pc, #432]	@ (8007fe0 <__ieee754_powf+0x4c4>)
 8007e2e:	4606      	mov	r6, r0
 8007e30:	f7f8 fcf0 	bl	8000814 <__aeabi_fmul>
 8007e34:	496b      	ldr	r1, [pc, #428]	@ (8007fe4 <__ieee754_powf+0x4c8>)
 8007e36:	f7f8 fbe5 	bl	8000604 <__addsf3>
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	f7f8 fcea 	bl	8000814 <__aeabi_fmul>
 8007e40:	4969      	ldr	r1, [pc, #420]	@ (8007fe8 <__ieee754_powf+0x4cc>)
 8007e42:	f7f8 fbdf 	bl	8000604 <__addsf3>
 8007e46:	4631      	mov	r1, r6
 8007e48:	f7f8 fce4 	bl	8000814 <__aeabi_fmul>
 8007e4c:	4967      	ldr	r1, [pc, #412]	@ (8007fec <__ieee754_powf+0x4d0>)
 8007e4e:	f7f8 fbd9 	bl	8000604 <__addsf3>
 8007e52:	4631      	mov	r1, r6
 8007e54:	f7f8 fcde 	bl	8000814 <__aeabi_fmul>
 8007e58:	4965      	ldr	r1, [pc, #404]	@ (8007ff0 <__ieee754_powf+0x4d4>)
 8007e5a:	f7f8 fbd3 	bl	8000604 <__addsf3>
 8007e5e:	4631      	mov	r1, r6
 8007e60:	f7f8 fcd8 	bl	8000814 <__aeabi_fmul>
 8007e64:	4963      	ldr	r1, [pc, #396]	@ (8007ff4 <__ieee754_powf+0x4d8>)
 8007e66:	f7f8 fbcd 	bl	8000604 <__addsf3>
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4681      	mov	r9, r0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7f8 fcd0 	bl	8000814 <__aeabi_fmul>
 8007e74:	4601      	mov	r1, r0
 8007e76:	4648      	mov	r0, r9
 8007e78:	f7f8 fccc 	bl	8000814 <__aeabi_fmul>
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	4606      	mov	r6, r0
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	f7f8 fbbf 	bl	8000604 <__addsf3>
 8007e86:	4659      	mov	r1, fp
 8007e88:	f7f8 fcc4 	bl	8000814 <__aeabi_fmul>
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	f7f8 fbb9 	bl	8000604 <__addsf3>
 8007e92:	4641      	mov	r1, r8
 8007e94:	4681      	mov	r9, r0
 8007e96:	4640      	mov	r0, r8
 8007e98:	f7f8 fcbc 	bl	8000814 <__aeabi_fmul>
 8007e9c:	4956      	ldr	r1, [pc, #344]	@ (8007ff8 <__ieee754_powf+0x4dc>)
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	f7f8 fbb0 	bl	8000604 <__addsf3>
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	f7f8 fbad 	bl	8000604 <__addsf3>
 8007eaa:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8007eae:	f026 060f 	bic.w	r6, r6, #15
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	f7f8 fcad 	bl	8000814 <__aeabi_fmul>
 8007eba:	494f      	ldr	r1, [pc, #316]	@ (8007ff8 <__ieee754_powf+0x4dc>)
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f7f8 fb9e 	bl	8000600 <__aeabi_fsub>
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	f7f8 fb9b 	bl	8000600 <__aeabi_fsub>
 8007eca:	4601      	mov	r1, r0
 8007ecc:	4648      	mov	r0, r9
 8007ece:	f7f8 fb97 	bl	8000600 <__aeabi_fsub>
 8007ed2:	9902      	ldr	r1, [sp, #8]
 8007ed4:	f7f8 fc9e 	bl	8000814 <__aeabi_fmul>
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4681      	mov	r9, r0
 8007edc:	4658      	mov	r0, fp
 8007ede:	f7f8 fc99 	bl	8000814 <__aeabi_fmul>
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	4648      	mov	r0, r9
 8007ee6:	f7f8 fb8d 	bl	8000604 <__addsf3>
 8007eea:	4682      	mov	sl, r0
 8007eec:	4601      	mov	r1, r0
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f7f8 fb88 	bl	8000604 <__addsf3>
 8007ef4:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8007ef8:	f026 060f 	bic.w	r6, r6, #15
 8007efc:	493f      	ldr	r1, [pc, #252]	@ (8007ffc <__ieee754_powf+0x4e0>)
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7f8 fc88 	bl	8000814 <__aeabi_fmul>
 8007f04:	4641      	mov	r1, r8
 8007f06:	4681      	mov	r9, r0
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7f8 fb79 	bl	8000600 <__aeabi_fsub>
 8007f0e:	4601      	mov	r1, r0
 8007f10:	4650      	mov	r0, sl
 8007f12:	f7f8 fb75 	bl	8000600 <__aeabi_fsub>
 8007f16:	493a      	ldr	r1, [pc, #232]	@ (8008000 <__ieee754_powf+0x4e4>)
 8007f18:	f7f8 fc7c 	bl	8000814 <__aeabi_fmul>
 8007f1c:	4939      	ldr	r1, [pc, #228]	@ (8008004 <__ieee754_powf+0x4e8>)
 8007f1e:	4680      	mov	r8, r0
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7f8 fc77 	bl	8000814 <__aeabi_fmul>
 8007f26:	4601      	mov	r1, r0
 8007f28:	4640      	mov	r0, r8
 8007f2a:	f7f8 fb6b 	bl	8000604 <__addsf3>
 8007f2e:	4b36      	ldr	r3, [pc, #216]	@ (8008008 <__ieee754_powf+0x4ec>)
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f36:	f7f8 fb65 	bl	8000604 <__addsf3>
 8007f3a:	9a05      	ldr	r2, [sp, #20]
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7f8 fc14 	bl	800076c <__aeabi_i2f>
 8007f44:	4b31      	ldr	r3, [pc, #196]	@ (800800c <__ieee754_powf+0x4f0>)
 8007f46:	9a01      	ldr	r2, [sp, #4]
 8007f48:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4648      	mov	r0, r9
 8007f52:	f7f8 fb57 	bl	8000604 <__addsf3>
 8007f56:	4651      	mov	r1, sl
 8007f58:	f7f8 fb54 	bl	8000604 <__addsf3>
 8007f5c:	4641      	mov	r1, r8
 8007f5e:	f7f8 fb51 	bl	8000604 <__addsf3>
 8007f62:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8007f66:	f02b 0b0f 	bic.w	fp, fp, #15
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f7f8 fb47 	bl	8000600 <__aeabi_fsub>
 8007f72:	4651      	mov	r1, sl
 8007f74:	f7f8 fb44 	bl	8000600 <__aeabi_fsub>
 8007f78:	4649      	mov	r1, r9
 8007f7a:	e6a6      	b.n	8007cca <__ieee754_powf+0x1ae>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	e6fa      	b.n	8007d76 <__ieee754_powf+0x25a>
 8007f80:	2301      	movs	r3, #1
 8007f82:	e70b      	b.n	8007d9c <__ieee754_powf+0x280>
 8007f84:	d148      	bne.n	8008018 <__ieee754_powf+0x4fc>
 8007f86:	4922      	ldr	r1, [pc, #136]	@ (8008010 <__ieee754_powf+0x4f4>)
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7f8 fb3b 	bl	8000604 <__addsf3>
 8007f8e:	4639      	mov	r1, r7
 8007f90:	4681      	mov	r9, r0
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7f8 fb34 	bl	8000600 <__aeabi_fsub>
 8007f98:	4601      	mov	r1, r0
 8007f9a:	4648      	mov	r0, r9
 8007f9c:	f7f8 fdf6 	bl	8000b8c <__aeabi_fcmpgt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f47f aec7 	bne.w	8007d34 <__ieee754_powf+0x218>
 8007fa6:	2386      	movs	r3, #134	@ 0x86
 8007fa8:	e03b      	b.n	8008022 <__ieee754_powf+0x506>
 8007faa:	4a1a      	ldr	r2, [pc, #104]	@ (8008014 <__ieee754_powf+0x4f8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d907      	bls.n	8007fc0 <__ieee754_powf+0x4a4>
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f7f8 fdcc 	bl	8000b50 <__aeabi_fcmplt>
 8007fb8:	3800      	subs	r0, #0
 8007fba:	bf18      	it	ne
 8007fbc:	2001      	movne	r0, #1
 8007fbe:	e645      	b.n	8007c4c <__ieee754_powf+0x130>
 8007fc0:	d12a      	bne.n	8008018 <__ieee754_powf+0x4fc>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	f7f8 fb1c 	bl	8000600 <__aeabi_fsub>
 8007fc8:	4631      	mov	r1, r6
 8007fca:	f7f8 fdd5 	bl	8000b78 <__aeabi_fcmpge>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d0e9      	beq.n	8007fa6 <__ieee754_powf+0x48a>
 8007fd2:	e7ed      	b.n	8007fb0 <__ieee754_powf+0x494>
 8007fd4:	001cc471 	.word	0x001cc471
 8007fd8:	005db3d6 	.word	0x005db3d6
 8007fdc:	080086a4 	.word	0x080086a4
 8007fe0:	3e53f142 	.word	0x3e53f142
 8007fe4:	3e6c3255 	.word	0x3e6c3255
 8007fe8:	3e8ba305 	.word	0x3e8ba305
 8007fec:	3eaaaaab 	.word	0x3eaaaaab
 8007ff0:	3edb6db7 	.word	0x3edb6db7
 8007ff4:	3f19999a 	.word	0x3f19999a
 8007ff8:	40400000 	.word	0x40400000
 8007ffc:	3f763800 	.word	0x3f763800
 8008000:	3f76384f 	.word	0x3f76384f
 8008004:	369dc3a0 	.word	0x369dc3a0
 8008008:	08008694 	.word	0x08008694
 800800c:	0800869c 	.word	0x0800869c
 8008010:	3338aa3c 	.word	0x3338aa3c
 8008014:	43160000 	.word	0x43160000
 8008018:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800801c:	f240 809b 	bls.w	8008156 <__ieee754_powf+0x63a>
 8008020:	15db      	asrs	r3, r3, #23
 8008022:	3b7e      	subs	r3, #126	@ 0x7e
 8008024:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8008028:	411c      	asrs	r4, r3
 800802a:	4444      	add	r4, r8
 800802c:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8008030:	4961      	ldr	r1, [pc, #388]	@ (80081b8 <__ieee754_powf+0x69c>)
 8008032:	3b7f      	subs	r3, #127	@ 0x7f
 8008034:	4119      	asrs	r1, r3
 8008036:	4021      	ands	r1, r4
 8008038:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800803c:	f1c3 0317 	rsb	r3, r3, #23
 8008040:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8008044:	411c      	asrs	r4, r3
 8008046:	f1b8 0f00 	cmp.w	r8, #0
 800804a:	4638      	mov	r0, r7
 800804c:	bfb8      	it	lt
 800804e:	4264      	neglt	r4, r4
 8008050:	f7f8 fad6 	bl	8000600 <__aeabi_fsub>
 8008054:	4607      	mov	r7, r0
 8008056:	4631      	mov	r1, r6
 8008058:	4638      	mov	r0, r7
 800805a:	f7f8 fad3 	bl	8000604 <__addsf3>
 800805e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8008062:	f028 080f 	bic.w	r8, r8, #15
 8008066:	4955      	ldr	r1, [pc, #340]	@ (80081bc <__ieee754_powf+0x6a0>)
 8008068:	4640      	mov	r0, r8
 800806a:	f7f8 fbd3 	bl	8000814 <__aeabi_fmul>
 800806e:	4639      	mov	r1, r7
 8008070:	4681      	mov	r9, r0
 8008072:	4640      	mov	r0, r8
 8008074:	f7f8 fac4 	bl	8000600 <__aeabi_fsub>
 8008078:	4601      	mov	r1, r0
 800807a:	4630      	mov	r0, r6
 800807c:	f7f8 fac0 	bl	8000600 <__aeabi_fsub>
 8008080:	494f      	ldr	r1, [pc, #316]	@ (80081c0 <__ieee754_powf+0x6a4>)
 8008082:	f7f8 fbc7 	bl	8000814 <__aeabi_fmul>
 8008086:	494f      	ldr	r1, [pc, #316]	@ (80081c4 <__ieee754_powf+0x6a8>)
 8008088:	4606      	mov	r6, r0
 800808a:	4640      	mov	r0, r8
 800808c:	f7f8 fbc2 	bl	8000814 <__aeabi_fmul>
 8008090:	4601      	mov	r1, r0
 8008092:	4630      	mov	r0, r6
 8008094:	f7f8 fab6 	bl	8000604 <__addsf3>
 8008098:	4607      	mov	r7, r0
 800809a:	4601      	mov	r1, r0
 800809c:	4648      	mov	r0, r9
 800809e:	f7f8 fab1 	bl	8000604 <__addsf3>
 80080a2:	4649      	mov	r1, r9
 80080a4:	4606      	mov	r6, r0
 80080a6:	f7f8 faab 	bl	8000600 <__aeabi_fsub>
 80080aa:	4601      	mov	r1, r0
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7f8 faa7 	bl	8000600 <__aeabi_fsub>
 80080b2:	4631      	mov	r1, r6
 80080b4:	4680      	mov	r8, r0
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7f8 fbac 	bl	8000814 <__aeabi_fmul>
 80080bc:	4942      	ldr	r1, [pc, #264]	@ (80081c8 <__ieee754_powf+0x6ac>)
 80080be:	4607      	mov	r7, r0
 80080c0:	f7f8 fba8 	bl	8000814 <__aeabi_fmul>
 80080c4:	4941      	ldr	r1, [pc, #260]	@ (80081cc <__ieee754_powf+0x6b0>)
 80080c6:	f7f8 fa9b 	bl	8000600 <__aeabi_fsub>
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fba2 	bl	8000814 <__aeabi_fmul>
 80080d0:	493f      	ldr	r1, [pc, #252]	@ (80081d0 <__ieee754_powf+0x6b4>)
 80080d2:	f7f8 fa97 	bl	8000604 <__addsf3>
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7f8 fb9c 	bl	8000814 <__aeabi_fmul>
 80080dc:	493d      	ldr	r1, [pc, #244]	@ (80081d4 <__ieee754_powf+0x6b8>)
 80080de:	f7f8 fa8f 	bl	8000600 <__aeabi_fsub>
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fb96 	bl	8000814 <__aeabi_fmul>
 80080e8:	493b      	ldr	r1, [pc, #236]	@ (80081d8 <__ieee754_powf+0x6bc>)
 80080ea:	f7f8 fa8b 	bl	8000604 <__addsf3>
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fb90 	bl	8000814 <__aeabi_fmul>
 80080f4:	4601      	mov	r1, r0
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7f8 fa82 	bl	8000600 <__aeabi_fsub>
 80080fc:	4607      	mov	r7, r0
 80080fe:	4601      	mov	r1, r0
 8008100:	4630      	mov	r0, r6
 8008102:	f7f8 fb87 	bl	8000814 <__aeabi_fmul>
 8008106:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800810a:	4681      	mov	r9, r0
 800810c:	4638      	mov	r0, r7
 800810e:	f7f8 fa77 	bl	8000600 <__aeabi_fsub>
 8008112:	4601      	mov	r1, r0
 8008114:	4648      	mov	r0, r9
 8008116:	f7f8 fc31 	bl	800097c <__aeabi_fdiv>
 800811a:	4641      	mov	r1, r8
 800811c:	4607      	mov	r7, r0
 800811e:	4630      	mov	r0, r6
 8008120:	f7f8 fb78 	bl	8000814 <__aeabi_fmul>
 8008124:	4641      	mov	r1, r8
 8008126:	f7f8 fa6d 	bl	8000604 <__addsf3>
 800812a:	4601      	mov	r1, r0
 800812c:	4638      	mov	r0, r7
 800812e:	f7f8 fa67 	bl	8000600 <__aeabi_fsub>
 8008132:	4631      	mov	r1, r6
 8008134:	f7f8 fa64 	bl	8000600 <__aeabi_fsub>
 8008138:	4601      	mov	r1, r0
 800813a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800813e:	f7f8 fa5f 	bl	8000600 <__aeabi_fsub>
 8008142:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008146:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800814a:	da06      	bge.n	800815a <__ieee754_powf+0x63e>
 800814c:	4621      	mov	r1, r4
 800814e:	f000 f849 	bl	80081e4 <scalbnf>
 8008152:	4629      	mov	r1, r5
 8008154:	e549      	b.n	8007bea <__ieee754_powf+0xce>
 8008156:	2400      	movs	r4, #0
 8008158:	e77d      	b.n	8008056 <__ieee754_powf+0x53a>
 800815a:	4618      	mov	r0, r3
 800815c:	e7f9      	b.n	8008152 <__ieee754_powf+0x636>
 800815e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008162:	e536      	b.n	8007bd2 <__ieee754_powf+0xb6>
 8008164:	4639      	mov	r1, r7
 8008166:	e534      	b.n	8007bd2 <__ieee754_powf+0xb6>
 8008168:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800816c:	f43f ad23 	beq.w	8007bb6 <__ieee754_powf+0x9a>
 8008170:	2502      	movs	r5, #2
 8008172:	4648      	mov	r0, r9
 8008174:	f000 f832 	bl	80081dc <fabsf>
 8008178:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800817c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008180:	46c2      	mov	sl, r8
 8008182:	4601      	mov	r1, r0
 8008184:	d003      	beq.n	800818e <__ieee754_powf+0x672>
 8008186:	f1b8 0f00 	cmp.w	r8, #0
 800818a:	f47f ad43 	bne.w	8007c14 <__ieee754_powf+0xf8>
 800818e:	2c00      	cmp	r4, #0
 8008190:	da04      	bge.n	800819c <__ieee754_powf+0x680>
 8008192:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008196:	f7f8 fbf1 	bl	800097c <__aeabi_fdiv>
 800819a:	4601      	mov	r1, r0
 800819c:	2e00      	cmp	r6, #0
 800819e:	f6bf ad18 	bge.w	8007bd2 <__ieee754_powf+0xb6>
 80081a2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80081a6:	ea58 0805 	orrs.w	r8, r8, r5
 80081aa:	f47f ad2e 	bne.w	8007c0a <__ieee754_powf+0xee>
 80081ae:	4608      	mov	r0, r1
 80081b0:	f7f8 fa26 	bl	8000600 <__aeabi_fsub>
 80081b4:	4601      	mov	r1, r0
 80081b6:	e4f8      	b.n	8007baa <__ieee754_powf+0x8e>
 80081b8:	ff800000 	.word	0xff800000
 80081bc:	3f317200 	.word	0x3f317200
 80081c0:	3f317218 	.word	0x3f317218
 80081c4:	35bfbe8c 	.word	0x35bfbe8c
 80081c8:	3331bb4c 	.word	0x3331bb4c
 80081cc:	35ddea0e 	.word	0x35ddea0e
 80081d0:	388ab355 	.word	0x388ab355
 80081d4:	3b360b61 	.word	0x3b360b61
 80081d8:	3e2aaaab 	.word	0x3e2aaaab

080081dc <fabsf>:
 80081dc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80081e0:	4770      	bx	lr
	...

080081e4 <scalbnf>:
 80081e4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4603      	mov	r3, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	4604      	mov	r4, r0
 80081f0:	d02e      	beq.n	8008250 <scalbnf+0x6c>
 80081f2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80081f6:	d304      	bcc.n	8008202 <scalbnf+0x1e>
 80081f8:	4601      	mov	r1, r0
 80081fa:	f7f8 fa03 	bl	8000604 <__addsf3>
 80081fe:	4603      	mov	r3, r0
 8008200:	e026      	b.n	8008250 <scalbnf+0x6c>
 8008202:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8008206:	d118      	bne.n	800823a <scalbnf+0x56>
 8008208:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800820c:	f7f8 fb02 	bl	8000814 <__aeabi_fmul>
 8008210:	4a17      	ldr	r2, [pc, #92]	@ (8008270 <scalbnf+0x8c>)
 8008212:	4295      	cmp	r5, r2
 8008214:	4603      	mov	r3, r0
 8008216:	db0c      	blt.n	8008232 <scalbnf+0x4e>
 8008218:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800821c:	4604      	mov	r4, r0
 800821e:	3a19      	subs	r2, #25
 8008220:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008224:	428d      	cmp	r5, r1
 8008226:	dd0a      	ble.n	800823e <scalbnf+0x5a>
 8008228:	4912      	ldr	r1, [pc, #72]	@ (8008274 <scalbnf+0x90>)
 800822a:	4618      	mov	r0, r3
 800822c:	f361 001e 	bfi	r0, r1, #0, #31
 8008230:	e000      	b.n	8008234 <scalbnf+0x50>
 8008232:	4911      	ldr	r1, [pc, #68]	@ (8008278 <scalbnf+0x94>)
 8008234:	f7f8 faee 	bl	8000814 <__aeabi_fmul>
 8008238:	e7e1      	b.n	80081fe <scalbnf+0x1a>
 800823a:	0dd2      	lsrs	r2, r2, #23
 800823c:	e7f0      	b.n	8008220 <scalbnf+0x3c>
 800823e:	1951      	adds	r1, r2, r5
 8008240:	29fe      	cmp	r1, #254	@ 0xfe
 8008242:	dcf1      	bgt.n	8008228 <scalbnf+0x44>
 8008244:	2900      	cmp	r1, #0
 8008246:	dd05      	ble.n	8008254 <scalbnf+0x70>
 8008248:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800824c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008250:	4618      	mov	r0, r3
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	f111 0f16 	cmn.w	r1, #22
 8008258:	da01      	bge.n	800825e <scalbnf+0x7a>
 800825a:	4907      	ldr	r1, [pc, #28]	@ (8008278 <scalbnf+0x94>)
 800825c:	e7e5      	b.n	800822a <scalbnf+0x46>
 800825e:	f101 0019 	add.w	r0, r1, #25
 8008262:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008266:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800826a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800826e:	e7e1      	b.n	8008234 <scalbnf+0x50>
 8008270:	ffff3cb0 	.word	0xffff3cb0
 8008274:	7149f2ca 	.word	0x7149f2ca
 8008278:	0da24260 	.word	0x0da24260

0800827c <with_errnof>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	f7fe ff53 	bl	800712c <__errno>
 8008286:	6005      	str	r5, [r0, #0]
 8008288:	4620      	mov	r0, r4
 800828a:	bd38      	pop	{r3, r4, r5, pc}

0800828c <xflowf>:
 800828c:	b508      	push	{r3, lr}
 800828e:	b140      	cbz	r0, 80082a2 <xflowf+0x16>
 8008290:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008294:	f7f8 fabe 	bl	8000814 <__aeabi_fmul>
 8008298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800829c:	2122      	movs	r1, #34	@ 0x22
 800829e:	f7ff bfed 	b.w	800827c <with_errnof>
 80082a2:	4608      	mov	r0, r1
 80082a4:	e7f6      	b.n	8008294 <xflowf+0x8>

080082a6 <__math_uflowf>:
 80082a6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80082aa:	f7ff bfef 	b.w	800828c <xflowf>

080082ae <__math_oflowf>:
 80082ae:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80082b2:	f7ff bfeb 	b.w	800828c <xflowf>
	...

080082b8 <__ieee754_sqrtf>:
 80082b8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80082bc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	4603      	mov	r3, r0
 80082c6:	4604      	mov	r4, r0
 80082c8:	d30a      	bcc.n	80082e0 <__ieee754_sqrtf+0x28>
 80082ca:	4601      	mov	r1, r0
 80082cc:	f7f8 faa2 	bl	8000814 <__aeabi_fmul>
 80082d0:	4601      	mov	r1, r0
 80082d2:	4620      	mov	r0, r4
 80082d4:	f7f8 f996 	bl	8000604 <__addsf3>
 80082d8:	4604      	mov	r4, r0
 80082da:	4620      	mov	r0, r4
 80082dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	d0fa      	beq.n	80082da <__ieee754_sqrtf+0x22>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	da06      	bge.n	80082f6 <__ieee754_sqrtf+0x3e>
 80082e8:	4601      	mov	r1, r0
 80082ea:	f7f8 f989 	bl	8000600 <__aeabi_fsub>
 80082ee:	4601      	mov	r1, r0
 80082f0:	f7f8 fb44 	bl	800097c <__aeabi_fdiv>
 80082f4:	e7f0      	b.n	80082d8 <__ieee754_sqrtf+0x20>
 80082f6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80082fa:	d03c      	beq.n	8008376 <__ieee754_sqrtf+0xbe>
 80082fc:	15c2      	asrs	r2, r0, #23
 80082fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008302:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008306:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800830a:	07d2      	lsls	r2, r2, #31
 800830c:	bf58      	it	pl
 800830e:	005b      	lslpl	r3, r3, #1
 8008310:	2400      	movs	r4, #0
 8008312:	106d      	asrs	r5, r5, #1
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	2019      	movs	r0, #25
 8008318:	4626      	mov	r6, r4
 800831a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800831e:	1872      	adds	r2, r6, r1
 8008320:	429a      	cmp	r2, r3
 8008322:	bfdd      	ittte	le
 8008324:	1856      	addle	r6, r2, r1
 8008326:	1864      	addle	r4, r4, r1
 8008328:	1a9a      	suble	r2, r3, r2
 800832a:	461a      	movgt	r2, r3
 800832c:	3801      	subs	r0, #1
 800832e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008332:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008336:	d1f2      	bne.n	800831e <__ieee754_sqrtf+0x66>
 8008338:	b1ba      	cbz	r2, 800836a <__ieee754_sqrtf+0xb2>
 800833a:	4e15      	ldr	r6, [pc, #84]	@ (8008390 <__ieee754_sqrtf+0xd8>)
 800833c:	4f15      	ldr	r7, [pc, #84]	@ (8008394 <__ieee754_sqrtf+0xdc>)
 800833e:	6830      	ldr	r0, [r6, #0]
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	f8d6 8000 	ldr.w	r8, [r6]
 8008346:	f7f8 f95b 	bl	8000600 <__aeabi_fsub>
 800834a:	4601      	mov	r1, r0
 800834c:	4640      	mov	r0, r8
 800834e:	f7f8 fc09 	bl	8000b64 <__aeabi_fcmple>
 8008352:	b150      	cbz	r0, 800836a <__ieee754_sqrtf+0xb2>
 8008354:	6830      	ldr	r0, [r6, #0]
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6836      	ldr	r6, [r6, #0]
 800835a:	f7f8 f953 	bl	8000604 <__addsf3>
 800835e:	4601      	mov	r1, r0
 8008360:	4630      	mov	r0, r6
 8008362:	f7f8 fbf5 	bl	8000b50 <__aeabi_fcmplt>
 8008366:	b170      	cbz	r0, 8008386 <__ieee754_sqrtf+0xce>
 8008368:	3402      	adds	r4, #2
 800836a:	1064      	asrs	r4, r4, #1
 800836c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008370:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008374:	e7b1      	b.n	80082da <__ieee754_sqrtf+0x22>
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	0218      	lsls	r0, r3, #8
 800837a:	460a      	mov	r2, r1
 800837c:	f101 0101 	add.w	r1, r1, #1
 8008380:	d5f9      	bpl.n	8008376 <__ieee754_sqrtf+0xbe>
 8008382:	4252      	negs	r2, r2
 8008384:	e7bb      	b.n	80082fe <__ieee754_sqrtf+0x46>
 8008386:	3401      	adds	r4, #1
 8008388:	f024 0401 	bic.w	r4, r4, #1
 800838c:	e7ed      	b.n	800836a <__ieee754_sqrtf+0xb2>
 800838e:	bf00      	nop
 8008390:	080086b0 	.word	0x080086b0
 8008394:	080086ac 	.word	0x080086ac

08008398 <_init>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	bf00      	nop
 800839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839e:	bc08      	pop	{r3}
 80083a0:	469e      	mov	lr, r3
 80083a2:	4770      	bx	lr

080083a4 <_fini>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	bf00      	nop
 80083a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083aa:	bc08      	pop	{r3}
 80083ac:	469e      	mov	lr, r3
 80083ae:	4770      	bx	lr
